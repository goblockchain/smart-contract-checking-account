{
	"id": "d72aa25db492e383326a8b602e0262a3",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/"
			]
		},
		"sources": {
			"src/Dummy.sol": {
				"content": "import \"../lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\";\r\nimport \"../lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\";\r\n\r\ncontract Dummy is ERC2771Context, ERC2771Forwarder {\r\n\r\n    uint number;\r\n\r\n    constructor() ERC2771Forwarder(\"Factory\") ERC2771Context(0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2) {\r\n    }\r\n    \r\n    function setNumber(uint _number) external {\r\n        number = _number;\r\n    }\r\n}"
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n *\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n * function only accessible if `msg.data.length == 0`.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /**\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\n     * invoke functions on this contract on behalf of other accounts.\n     *\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\n     */\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder_) {\n        _trustedForwarder = trustedForwarder_;\n    }\n\n    /**\n     * @dev Returns the address of the trusted forwarder.\n     */\n    function trustedForwarder() public view virtual returns (address) {\n        return _trustedForwarder;\n    }\n\n    /**\n     * @dev Indicates whether any particular address is the trusted forwarder.\n     */\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == trustedForwarder();\n    }\n\n    /**\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    /**\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n     * a call is not performed by the trusted forwarder or the calldata length is less than\n     * 20 bytes (an address length).\n     */\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender) && msg.data.length >= 20) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (metatx/ERC2771Forwarder.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC2771Context} from \"./ERC2771Context.sol\";\nimport {ECDSA} from \"../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../utils/Nonces.sol\";\nimport {Address} from \"../utils/Address.sol\";\n\n/**\n * @dev A forwarder compatible with ERC2771 contracts. See {ERC2771Context}.\n *\n * This forwarder operates on forward requests that include:\n *\n * * `from`: An address to operate on behalf of. It is required to be equal to the request signer.\n * * `to`: The address that should be called.\n * * `value`: The amount of native token to attach with the requested call.\n * * `gas`: The amount of gas limit that will be forwarded with the requested call.\n * * `nonce`: A unique transaction ordering identifier to avoid replayability and request invalidation.\n * * `deadline`: A timestamp after which the request is not executable anymore.\n * * `data`: Encoded `msg.data` to send with the requested call.\n *\n * Relayers are able to submit batches if they are processing a high volume of requests. With high\n * throughput, relayers may run into limitations of the chain such as limits on the number of\n * transactions in the mempool. In these cases the recommendation is to distribute the load among\n * multiple accounts.\n *\n * NOTE: Batching requests includes an optional refund for unused `msg.value` that is achieved by\n * performing a call with empty calldata. While this is within the bounds of ERC-2771 compliance,\n * if the refund receiver happens to consider the forwarder a trusted forwarder, it MUST properly\n * handle `msg.data.length == 0`. `ERC2771Context` in OpenZeppelin Contracts versions prior to 4.9.3\n * do not handle this properly.\n *\n * ==== Security Considerations\n *\n * If a relayer submits a forward request, it should be willing to pay up to 100% of the gas amount\n * specified in the request. This contract does not implement any kind of retribution for this gas,\n * and it is assumed that there is an out of band incentive for relayers to pay for execution on\n * behalf of signers. Often, the relayer is operated by a project that will consider it a user\n * acquisition cost.\n *\n * By offering to pay for gas, relayers are at risk of having that gas used by an attacker toward\n * some other purpose that is not aligned with the expected out of band incentives. If you operate a\n * relayer, consider whitelisting target contracts and function selectors. When relaying ERC-721 or\n * ERC-1155 transfers specifically, consider rejecting the use of the `data` field, since it can be\n * used to execute arbitrary code.\n */\ncontract ERC2771Forwarder is EIP712, Nonces {\n    using ECDSA for bytes32;\n\n    struct ForwardRequestData {\n        address from;\n        address to;\n        uint256 value;\n        uint256 gas;\n        uint48 deadline;\n        bytes data;\n        bytes signature;\n    }\n\n    bytes32 internal constant _FORWARD_REQUEST_TYPEHASH =\n        keccak256(\n            \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\"\n        );\n\n    /**\n     * @dev Emitted when a `ForwardRequest` is executed.\n     *\n     * NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline,\n     * or simply a revert in the requested call. The contract guarantees that the relayer is not able to force\n     * the requested call to run out of gas.\n     */\n    event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success);\n\n    /**\n     * @dev The request `from` doesn't match with the recovered `signer`.\n     */\n    error ERC2771ForwarderInvalidSigner(address signer, address from);\n\n    /**\n     * @dev The `requestedValue` doesn't match with the available `msgValue`.\n     */\n    error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue);\n\n    /**\n     * @dev The request `deadline` has expired.\n     */\n    error ERC2771ForwarderExpiredRequest(uint48 deadline);\n\n    /**\n     * @dev The request target doesn't trust the `forwarder`.\n     */\n    error ERC2771UntrustfulTarget(address target, address forwarder);\n\n    /**\n     * @dev See {EIP712-constructor}.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev Returns `true` if a request is valid for a provided `signature` at the current block timestamp.\n     *\n     * A transaction is considered valid when the target trusts this forwarder, the request hasn't expired\n     * (deadline is not met), and the signer matches the `from` parameter of the signed request.\n     *\n     * NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund\n     * receiver is provided.\n     */\n    function verify(ForwardRequestData calldata request) public view virtual returns (bool) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, ) = _validate(request);\n        return isTrustedForwarder && active && signerMatch;\n    }\n\n    /**\n     * @dev Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas\n     * provided to the requested call may not be exactly the amount requested, but the call will not run\n     * out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed.\n     *\n     * Requirements:\n     *\n     * - The request value should be equal to the provided `msg.value`.\n     * - The request should be valid according to {verify}.\n     */\n    function execute(ForwardRequestData calldata request) public payable virtual {\n        // We make sure that msg.value and request.value match exactly.\n        // If the request is invalid or the call reverts, this whole function\n        // will revert, ensuring value isn't stuck.\n        if (msg.value != request.value) {\n            revert ERC2771ForwarderMismatchedValue(request.value, msg.value);\n        }\n\n        if (!_execute(request, true)) {\n            revert Address.FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Batch version of {execute} with optional refunding and atomic execution.\n     *\n     * In case a batch contains at least one invalid request (see {verify}), the\n     * request will be skipped and the `refundReceiver` parameter will receive back the\n     * unused requested value at the end of the execution. This is done to prevent reverting\n     * the entire batch when a request is invalid or has already been submitted.\n     *\n     * If the `refundReceiver` is the `address(0)`, this function will revert when at least\n     * one of the requests was not valid instead of skipping it. This could be useful if\n     * a batch is required to get executed atomically (at least at the top-level). For example,\n     * refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids\n     * including reverted transactions.\n     *\n     * Requirements:\n     *\n     * - The sum of the requests' values should be equal to the provided `msg.value`.\n     * - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address.\n     *\n     * NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for\n     * the first-level forwarded calls. In case a forwarded request calls to a contract with another\n     * subcall, the second-level call may revert without the top-level call reverting.\n     */\n    function executeBatch(\n        ForwardRequestData[] calldata requests,\n        address payable refundReceiver\n    ) public payable virtual {\n        bool atomic = refundReceiver == address(0);\n\n        uint256 requestsValue;\n        uint256 refundValue;\n\n        for (uint256 i; i < requests.length; ++i) {\n            requestsValue += requests[i].value;\n            bool success = _execute(requests[i], atomic);\n            if (!success) {\n                refundValue += requests[i].value;\n            }\n        }\n\n        // The batch should revert if there's a mismatched msg.value provided\n        // to avoid request value tampering\n        if (requestsValue != msg.value) {\n            revert ERC2771ForwarderMismatchedValue(requestsValue, msg.value);\n        }\n\n        // Some requests with value were invalid (possibly due to frontrunning).\n        // To avoid leaving ETH in the contract this value is refunded.\n        if (refundValue != 0) {\n            // We know refundReceiver != address(0) && requestsValue == msg.value\n            // meaning we can ensure refundValue is not taken from the original contract's balance\n            // and refundReceiver is a known account.\n            Address.sendValue(refundReceiver, refundValue);\n        }\n    }\n\n    /**\n     * @dev Validates if the provided request can be executed at current block timestamp with\n     * the given `request.signature` on behalf of `request.signer`.\n     */\n    function _validate(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool isTrustedForwarder, bool active, bool signerMatch, address signer) {\n        (bool isValid, address recovered) = _recoverForwardRequestSigner(request);\n\n        return (\n            _isTrustedByTarget(request.to),\n            request.deadline >= block.timestamp,\n            isValid && recovered == request.from,\n            recovered\n        );\n    }\n\n    /**\n     * @dev Returns a tuple with the recovered the signer of an EIP712 forward request message hash\n     * and a boolean indicating if the signature is valid.\n     *\n     * NOTE: The signature is considered valid if {ECDSA-tryRecover} indicates no recover error for it.\n     */\n    function _recoverForwardRequestSigner(\n        ForwardRequestData calldata request\n    ) internal view virtual returns (bool, address) {\n        (address recovered, ECDSA.RecoverError err, ) = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _FORWARD_REQUEST_TYPEHASH,\n                    request.from,\n                    request.to,\n                    request.value,\n                    request.gas,\n                    nonces(request.from),\n                    request.deadline,\n                    keccak256(request.data)\n                )\n            )\n        ).tryRecover(request.signature);\n\n        return (err == ECDSA.RecoverError.NoError, recovered);\n    }\n\n    /**\n     * @dev Validates and executes a signed request returning the request call `success` value.\n     *\n     * Internal function without msg.value validation.\n     *\n     * Requirements:\n     *\n     * - The caller must have provided enough gas to forward with the call.\n     * - The request must be valid (see {verify}) if the `requireValidRequest` is true.\n     *\n     * Emits an {ExecutedForwardRequest} event.\n     *\n     * IMPORTANT: Using this function doesn't check that all the `msg.value` was sent, potentially\n     * leaving value stuck in the contract.\n     */\n    function _execute(\n        ForwardRequestData calldata request,\n        bool requireValidRequest\n    ) internal virtual returns (bool success) {\n        (bool isTrustedForwarder, bool active, bool signerMatch, address signer) = _validate(request);\n\n        // Need to explicitly specify if a revert is required since non-reverting is default for\n        // batches and reversion is opt-in since it could be useful in some scenarios\n        if (requireValidRequest) {\n            if (!isTrustedForwarder) {\n                revert ERC2771UntrustfulTarget(request.to, address(this));\n            }\n\n            if (!active) {\n                revert ERC2771ForwarderExpiredRequest(request.deadline);\n            }\n\n            if (!signerMatch) {\n                revert ERC2771ForwarderInvalidSigner(signer, request.from);\n            }\n        }\n\n        // Ignore an invalid request because requireValidRequest = false\n        if (isTrustedForwarder && signerMatch && active) {\n            // Nonce should be used before the call to prevent reusing by reentrancy\n            uint256 currentNonce = _useNonce(signer);\n\n            uint256 reqGas = request.gas;\n            address to = request.to;\n            uint256 value = request.value;\n            bytes memory data = abi.encodePacked(request.data, request.from);\n\n            uint256 gasLeft;\n\n            assembly {\n                success := call(reqGas, to, value, add(data, 0x20), mload(data), 0, 0)\n                gasLeft := gas()\n            }\n\n            _checkForwardedGas(gasLeft, request);\n\n            emit ExecutedForwardRequest(signer, currentNonce, success);\n        }\n    }\n\n    /**\n     * @dev Returns whether the target trusts this forwarder.\n     *\n     * This function performs a static call to the target contract calling the\n     * {ERC2771Context-isTrustedForwarder} function.\n     */\n    function _isTrustedByTarget(address target) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this)));\n\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Perform the staticcal and save the result in the scratch space.\n            // | Location  | Content  | Content (Hex)                                                      |\n            // |-----------|----------|--------------------------------------------------------------------|\n            // |           |          |                                                           result ↓ |\n            // | 0x00:0x1F | selector | 0x0000000000000000000000000000000000000000000000000000000000000001 |\n            success := staticcall(gas(), target, add(encodedParams, 0x20), mload(encodedParams), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n\n    /**\n     * @dev Checks if the requested gas was correctly forwarded to the callee.\n     *\n     * As a consequence of https://eips.ethereum.org/EIPS/eip-150[EIP-150]:\n     * - At most `gasleft() - floor(gasleft() / 64)` is forwarded to the callee.\n     * - At least `floor(gasleft() / 64)` is kept in the caller.\n     *\n     * It reverts consuming all the available gas if the forwarded gas is not the requested gas.\n     *\n     * IMPORTANT: The `gasLeft` parameter should be measured exactly at the end of the forwarded call.\n     * Any gas consumed in between will make room for bypassing this check.\n     */\n    function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {\n        // To avoid insufficient gas griefing attacks, as referenced in https://ronan.eth.limo/blog/ethereum-gas-dangers/\n        //\n        // A malicious relayer can attempt to shrink the gas forwarded so that the underlying call reverts out-of-gas\n        // but the forwarding itself still succeeds. In order to make sure that the subcall received sufficient gas,\n        // we will inspect gasleft() after the forwarding.\n        //\n        // Let X be the gas available before the subcall, such that the subcall gets at most X * 63 / 64.\n        // We can't know X after CALL dynamic costs, but we want it to be such that X * 63 / 64 >= req.gas.\n        // Let Y be the gas used in the subcall. gasleft() measured immediately after the subcall will be gasleft() = X - Y.\n        // If the subcall ran out of gas, then Y = X * 63 / 64 and gasleft() = X - Y = X / 64.\n        // Under this assumption req.gas / 63 > gasleft() is true is true if and only if\n        // req.gas / 63 > X / 64, or equivalently req.gas > X * 63 / 64.\n        // This means that if the subcall runs out of gas we are able to detect that insufficient gas was passed.\n        //\n        // We will now also see that req.gas / 63 > gasleft() implies that req.gas >= X * 63 / 64.\n        // The contract guarantees Y <= req.gas, thus gasleft() = X - Y >= X - req.gas.\n        // -    req.gas / 63 > gasleft()\n        // -    req.gas / 63 >= X - req.gas\n        // -    req.gas >= X * 63 / 64\n        // In other words if req.gas < X * 63 / 64 then req.gas / 63 <= gasleft(), thus if the relayer behaves honestly\n        // the forwarding does not revert.\n        if (gasLeft < request.gas / 63) {\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\n            // neither revert or assert consume all gas since Solidity 0.8.20\n            // https://docs.soliditylang.org/en/v0.8.20/control-structures.html#panic-via-assert-and-error-via-require\n            /// @solidity memory-safe-assembly\n            assembly {\n                invalid()\n            }\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol": {
				"ERC2771Context": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "forwarder",
									"type": "address"
								}
							],
							"name": "isTrustedForwarder",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "trustedForwarder",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Context variant with ERC2771 support. WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771 specification adding the address size in bytes (20) to the calldata size. An example of an unexpected behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive` function only accessible if `msg.data.length == 0`.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"isTrustedForwarder(address)": {
								"details": "Indicates whether any particular address is the trusted forwarder."
							},
							"trustedForwarder()": {
								"details": "Returns the address of the trusted forwarder."
							}
						},
						"stateVariables": {
							"_trustedForwarder": {
								"custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"isTrustedForwarder(address)": "572b6c05",
							"trustedForwarder()": "7da0a877"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Context variant with ERC2771 support. WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771 specification adding the address size in bytes (20) to the calldata size. An example of an unexpected behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive` function only accessible if `msg.data.length == 0`.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"}},\"stateVariables\":{\"_trustedForwarder\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":\"ERC2771Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":{\"keccak256\":\"0x3cf982133d4c9c92e6cd0f3dd8399791b7858c09dfe6ab5c6073e7f24475aa78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb2e41b4db6b6020a4406b0bc1c3e959554321650a392c30ee506e464abe6f27\",\"dweb:/ipfs/QmerRLZmojENXg816AjVBwmjWpUFUHPTGFboirRCotZr3L\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol": {
				"ERC2771Forwarder": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint48",
									"name": "deadline",
									"type": "uint48"
								}
							],
							"name": "ERC2771ForwarderExpiredRequest",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								}
							],
							"name": "ERC2771ForwarderInvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestedValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "msgValue",
									"type": "uint256"
								}
							],
							"name": "ERC2771ForwarderMismatchedValue",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "forwarder",
									"type": "address"
								}
							],
							"name": "ERC2771UntrustfulTarget",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"name": "ExecutedForwardRequest",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData[]",
									"name": "requests",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "refundReceiver",
									"type": "address"
								}
							],
							"name": "executeBatch",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "verify",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "A forwarder compatible with ERC2771 contracts. See {ERC2771Context}. This forwarder operates on forward requests that include: * `from`: An address to operate on behalf of. It is required to be equal to the request signer. * `to`: The address that should be called. * `value`: The amount of native token to attach with the requested call. * `gas`: The amount of gas limit that will be forwarded with the requested call. * `nonce`: A unique transaction ordering identifier to avoid replayability and request invalidation. * `deadline`: A timestamp after which the request is not executable anymore. * `data`: Encoded `msg.data` to send with the requested call. Relayers are able to submit batches if they are processing a high volume of requests. With high throughput, relayers may run into limitations of the chain such as limits on the number of transactions in the mempool. In these cases the recommendation is to distribute the load among multiple accounts. NOTE: Batching requests includes an optional refund for unused `msg.value` that is achieved by performing a call with empty calldata. While this is within the bounds of ERC-2771 compliance, if the refund receiver happens to consider the forwarder a trusted forwarder, it MUST properly handle `msg.data.length == 0`. `ERC2771Context` in OpenZeppelin Contracts versions prior to 4.9.3 do not handle this properly. ==== Security Considerations If a relayer submits a forward request, it should be willing to pay up to 100% of the gas amount specified in the request. This contract does not implement any kind of retribution for this gas, and it is assumed that there is an out of band incentive for relayers to pay for execution on behalf of signers. Often, the relayer is operated by a project that will consider it a user acquisition cost. By offering to pay for gas, relayers are at risk of having that gas used by an attacker toward some other purpose that is not aligned with the expected out of band incentives. If you operate a relayer, consider whitelisting target contracts and function selectors. When relaying ERC-721 or ERC-1155 transfers specifically, consider rejecting the use of the `data` field, since it can be used to execute arbitrary code.",
						"errors": {
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC2771ForwarderExpiredRequest(uint48)": [
								{
									"details": "The request `deadline` has expired."
								}
							],
							"ERC2771ForwarderInvalidSigner(address,address)": [
								{
									"details": "The request `from` doesn't match with the recovered `signer`."
								}
							],
							"ERC2771ForwarderMismatchedValue(uint256,uint256)": [
								{
									"details": "The `requestedValue` doesn't match with the available `msgValue`."
								}
							],
							"ERC2771UntrustfulTarget(address,address)": [
								{
									"details": "The request target doesn't trust the `forwarder`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"ExecutedForwardRequest(address,uint256,bool)": {
								"details": "Emitted when a `ForwardRequest` is executed. NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline, or simply a revert in the requested call. The contract guarantees that the relayer is not able to force the requested call to run out of gas."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "See {EIP712-constructor}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"execute((address,address,uint256,uint256,uint48,bytes,bytes))": {
								"details": "Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas provided to the requested call may not be exactly the amount requested, but the call will not run out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed. Requirements: - The request value should be equal to the provided `msg.value`. - The request should be valid according to {verify}."
							},
							"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": {
								"details": "Batch version of {execute} with optional refunding and atomic execution. In case a batch contains at least one invalid request (see {verify}), the request will be skipped and the `refundReceiver` parameter will receive back the unused requested value at the end of the execution. This is done to prevent reverting the entire batch when a request is invalid or has already been submitted. If the `refundReceiver` is the `address(0)`, this function will revert when at least one of the requests was not valid instead of skipping it. This could be useful if a batch is required to get executed atomically (at least at the top-level). For example, refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids including reverted transactions. Requirements: - The sum of the requests' values should be equal to the provided `msg.value`. - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address. NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for the first-level forwarded calls. In case a forwarded request calls to a contract with another subcall, the second-level call may revert without the top-level call reverting."
							},
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							},
							"verify((address,address,uint256,uint256,uint48,bytes,bytes))": {
								"details": "Returns `true` if a request is valid for a provided `signature` at the current block timestamp. A transaction is considered valid when the target trusts this forwarder, the request hasn't expired (deadline is not met), and the signer matches the `from` parameter of the signed request. NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund receiver is provided."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  0x0160\n  0x40\n  swap1\n  dup1\n  dup3\n  mstore\n  jumpi(tag_17, callvalue)\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  swap2\n  tag_7\n  dup3\n  dup6\n  tag_1\n  jump\t// in\ntag_7:\n  dup4\n  codecopy\n  dup2\n  add\n  0x20\n  swap1\n  dup2\n  dup4\n  dup3\n  sub\n  slt\n  tag_17\n  jumpi\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  swap4\n  dup5\n  dup3\n  gt\n  tag_17\n  jumpi\n  add\n  swap2\n  dup2\n  0x1f\n  dup5\n  add\n  slt\n  iszero\n  tag_17\n  jumpi\n  dup3\n  mload\n  swap3\n  dup5\n  dup5\n  gt\n  tag_24\n  jumpi\n  dup6\n  mload\n  swap4\n  tag_16\n  0x1f\n  dup3\n  add\n  not(0x1f)\n  and\n  dup5\n  add\n  dup7\n  tag_1\n  jump\t// in\ntag_16:\n  dup1\n  dup6\n  mstore\n  dup3\n  dup6\n  add\n  swap4\n  dup4\n  dup3\n  dup5\n  add\n  add\n  gt\n  tag_17\n  jumpi\n  dup4\n  dup4\n  tag_19\n  swap4\n  add\n  tag_2\n  jump\t// in\ntag_19:\n  dup5\n  mload\n  swap1\n  dup6\n  dup3\n  add\n  dup3\n  dup2\n  lt\n  dup7\n  dup3\n  gt\n  or\n  tag_24\n  jumpi\n  dup7\n  mstore\n  0x01\n  dup3\n  mstore\n  dup1\n  dup3\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_22\n  dup6\n  tag_3\n  jump\t// in\ntag_22:\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  swap4\n  0x0120\n  swap5\n  dup6\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_23\n  dup5\n  tag_4\n  jump\t// in\ntag_23:\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  swap6\n  0x0140\n  swap7\n  dup8\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  swap3\n  dup4\n  0xe0\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  swap6\n  0x0100\n  swap7\n  dup1\n  dup9\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup2\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  swap3\n  dup4\n  add\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  swap4\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n  dup6\n  mstore\n  dup3\n  dup5\n  add\n  mstore\n  0x60\n  dup4\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n  dup4\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup4\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  dup3\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup3\n  add\n  swap6\n  dup3\n  dup8\n  lt\n  swap1\n  dup8\n  gt\n  or\n  tag_24\n  jumpi\n  dup6\n  swap1\n  mstore\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dataSize(sub_0)\n  swap4\n  dup5\n  dataOffset(sub_0)\n  dup6\n  codecopy\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x80\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n  dup5\n  assignImmutable(\"0x267a3e43955d5ac713043fd32df2bde19a025701ea343c4467194e9c98b8fb1f\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n  dup5\n  assignImmutable(\"0xa719e06aa69fe5611e041976601e5776ff743aefe35a016a2b5dfe8f33a5e5e9\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xc0\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n  dup5\n  assignImmutable(\"0x181e1e3a457d5cef39dddc6213a1adbc86226ab3d6c2e46b6b95ce30e1273fad\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mload\n  dup5\n  assignImmutable(\"0xd60579bb341d0b58542358d81fbcda6dc7dd39e7447d85d21541e19a3877254c\")\n  mload\n  dup4\n  assignImmutable(\"0x995833c2a2aeb937fbc4a128bd490bc0fc9957bdfd709bbb221dc0127b96401e\")\n  mload\n  dup3\n  assignImmutable(\"0xcb53285b0d93959fe2b39d776c53c3ac62f51d590c6169c94a63eeb4e0302d5e\")\n  mload\n  dup2\n  assignImmutable(\"0x4e5048aa6ab9ce5117b653ef20524273bce16c451ef1a9c6d4f6b8e5e9fe0ca4\")\n  return\ntag_24:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_17:\n  0x00\n  dup1\n  revert\ntag_1:\n  0x1f\n  swap1\n  swap2\n  add\n  not(0x1f)\n  and\n  dup2\n  add\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  swap1\n  dup3\n  lt\n  or\n  tag_24\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  0x00\ntag_28:\n  dup4\n  dup2\n  lt\n  tag_29\n  jumpi\n  pop\n  pop\n  0x00\n  swap2\n  add\n  mstore\n  jump\t// out\ntag_29:\n  dup2\n  dup2\n  add\n  mload\n  dup4\n  dup3\n  add\n  mstore\n  0x20\n  add\n  jump(tag_28)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_3:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup1\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n  swap2\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  dup3\n  dup2\n  lt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  iszero\n  tag_31\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  pop\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup3\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  tag_33\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_35\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\ntag_35:\n  dup3\n  not(0x00)\n  swap2\n  sub\n  0x03\n  shl\n  shl\n  and\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_33:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  0x44\n  swap1\n  tag_37\n  swap3\n  mload(0x40)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  swap4\n  dup5\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup5\n  mstore\n  dup1\n  0x04\n  dup6\n  add\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  mstore\n  dup3\n  mload\n  swap3\n  dup4\n  swap2\n  dup3\n  0x24\n  dup8\n  add\n  mstore\n  dup7\n  dup7\n  add\n  swap2\n  add\n  tag_2\n  jump\t// in\ntag_37:\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  add\n  not(0x1f)\n  and\n  dup2\n  add\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_31:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup2\n  gt\n  tag_24\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x00\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  swap3\n  dup4\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_40\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_41:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_42\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_44\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_45:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_46\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  dup7\n  swap5\n  tag_48\n  jumpi\ntag_49:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\ntag_48:\n  add\n  mload\n  swap3\n  pop\n  0x00\n  dup1\n  jump(tag_49)\ntag_46:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n  dup8\n  dup1\n  mstore\n  dup5\n  dup9\n  keccak256\n  swap5\n  dup9\n  swap1\ntag_51:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_52\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_54\n  jumpi\ntag_55:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\ntag_54:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  jump(tag_55)\ntag_52:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_51)\ntag_44:\n  dup6\n  dup1\n  mstore\n  dup5\n  0x1f\n  dup5\n  dup9\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  0x05\n  shr\n  add\ntag_56:\n  dup3\n  dup2\n  lt\n  tag_57\n  jumpi\n  pop\n  pop\n  jump(tag_45)\ntag_57:\n  dup8\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_56)\ntag_42:\n  shl(0xe0, 0x4e487b71)\n  dup7\n  mstore\n  mstore(0x04, 0x22)\n  0x24\n  dup7\n  revert\ntag_40:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_41)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_4:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup1\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  dup2\n  dup2\n  lt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  iszero\n  tag_59\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup3\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  tag_33\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_35\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_59:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  swap2\n  swap3\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_24\n  jumpi\n  0x01\n  swap2\n  dup3\n  sload\n  dup4\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_68\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_69:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  dup3\n  dup3\n  lt\n  eq\n  tag_70\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_72\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_73:\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n  pop\n  dup1\n  0x1f\n  dup4\n  gt\n  0x01\n  eq\n  tag_74\n  jumpi\n  pop\n  dup2\n  swap3\n  swap4\n  swap5\n  0x00\n  swap3\n  tag_76\n  jumpi\ntag_77:\n  pop\n  pop\n  not(0x00)\n  0x03\n  dup4\n  swap1\n  shl\n  shr\n  not\n  and\n  swap1\n  dup3\n  shl\n  or\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\ntag_76:\n  add\n  mload\n  swap1\n  pop\n  0x00\n  dup1\n  jump(tag_77)\ntag_74:\n  swap1\n  not(0x1f)\n  dup4\n  and\n  swap6\n  dup5\n  0x00\n  mstore\n  dup3\n  0x00\n  keccak256\n  swap3\n  0x00\n  swap1\ntag_79:\n  dup9\n  dup3\n  lt\n  tag_80\n  jumpi\n  pop\n  pop\n  dup4\n  dup6\n  swap7\n  swap8\n  lt\n  tag_54\n  jumpi\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\ntag_80:\n  dup1\n  dup8\n  dup6\n  swap7\n  dup3\n  swap5\n  swap7\n  dup7\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap6\n  add\n  swap4\n  add\n  swap1\n  jump(tag_79)\ntag_72:\n  dup4\n  0x00\n  mstore\n  dup4\n  0x1f\n  dup4\n  0x00\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup6\n  add\n  0x05\n  shr\n  add\ntag_84:\n  dup3\n  dup2\n  lt\n  tag_85\n  jumpi\n  pop\n  pop\n  jump(tag_73)\ntag_85:\n  0x00\n  dup2\n  sstore\n  add\n  dup5\n  swap1\n  jump(tag_84)\ntag_70:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_68:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_69)\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_46, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_46:\n      0x00\n      dup1\n      calldataload\n      0xe0\n      shr\n      swap1\n      dup2\n      0x19d8d38c\n      eq\n      tag_48\n      jumpi\n      dup2\n      0x7ecebe00\n      eq\n      tag_50\n      jumpi\n      pop\n      dup1\n      0x84b0196e\n      eq\n      tag_52\n      jumpi\n      dup1\n      0xccf96b4a\n      eq\n      tag_54\n      jumpi\n      0xdf905caf\n      eq\n      tag_56\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_56:\n      tag_9\n      jump\t// in\n    tag_54:\n      tag_8\n      jump\t// in\n    tag_52:\n      tag_7\n      jump\t// in\n    tag_50:\n      jumpi(tag_60, callvalue)\n      jumpi(tag_60, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      tag_62\n      calldataload(0x04)\n      tag_63\n      dup2\n      tag_4\n      jump\t// in\n    tag_63:\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_62:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_60:\n      dup1\n      revert\n    tag_48:\n      jumpi(tag_60, callvalue)\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5004:5022  _validate(request) */\n      tag_66\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      tag_67\n      calldatasize\n      tag_1\n      jump\t// in\n    tag_67:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5004:5022  _validate(request) */\n      tag_17\n      jump\t// in\n    tag_66:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5067  isTrustedForwarder && active */\n      pop\n      swap1\n      dup3\n      tag_68\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_69:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5082  isTrustedForwarder && active && signerMatch */\n      pop\n      dup2\n      tag_70\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_71:\n      pop\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5082  isTrustedForwarder && active && signerMatch */\n    tag_70:\n      swap1\n      pop\n      dup3\n      jump(tag_71)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5067  isTrustedForwarder && active */\n    tag_68:\n      swap2\n      pop\n      dup4\n      jump(tag_69)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_1:\n      not(0x03)\n      swap1\n      0x20\n      dup2\n      dup4\n      add\n      slt\n      tag_76\n      jumpi\n      calldataload(0x04)\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_76\n      jumpi\n      dup3\n      0xe0\n      swap3\n      sub\n      add\n      slt\n      tag_76\n      jumpi\n      0x04\n      add\n      swap1\n      jump\t// out\n    tag_76:\n      0x00\n      dup1\n      revert\n    tag_4:\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      sub\n      tag_76\n      jumpi\n      jump\t// out\n    tag_6:\n      swap2\n      swap1\n      dup3\n      mload\n      swap3\n      dup4\n      dup3\n      mstore\n      0x00\n    tag_80:\n      dup5\n      dup2\n      lt\n      tag_81\n      jumpi\n      pop\n      pop\n      dup3\n      0x00\n      0x20\n      dup1\n      swap5\n      swap6\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_81:\n      0x20\n      dup2\n      dup4\n      add\n      dup2\n      add\n      mload\n      dup5\n      dup4\n      add\n      dup3\n      add\n      mstore\n      add\n      jump(tag_80)\n    tag_7:\n      jumpi(tag_76, callvalue)\n      0x00\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_60\n      jumpi\n      tag_87\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_88\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0xcb53285b0d93959fe2b39d776c53c3ac62f51d590c6169c94a63eeb4e0302d5e\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_43\n      jump\t// in\n    tag_88:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_89\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0x4e5048aa6ab9ce5117b653ef20524273bce16c451ef1a9c6d4f6b8e5e9fe0ca4\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_44\n      jump\t// in\n    tag_89:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap2\n      tag_90\n      dup4\n      tag_20\n      jump\t// in\n    tag_90:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      dup4\n      mstore\n      mload(0x40)\n      swap5\n      dup6\n      swap5\n      shl(0xf8, 0x0f)\n      dup7\n      mstore\n      tag_91\n      0x20\n      swap4\n      0xe0\n      dup6\n      dup10\n      add\n      mstore\n      0xe0\n      dup9\n      add\n      swap1\n      tag_6\n      jump\t// in\n    tag_91:\n      swap1\n      dup7\n      dup3\n      sub\n      0x40\n      dup9\n      add\n      mstore\n      tag_6\n      jump\t// in\n    tag_87:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      swap1\n      chainid\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x60\n      dup7\n      add\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x80\n      dup7\n      add\n      mstore\n      dup3\n      0xa0\n      dup7\n      add\n      mstore\n      dup5\n      dup3\n      sub\n      0xc0\n      dup7\n      add\n      mstore\n      dup1\n      dup1\n      dup6\n      mload\n      swap4\n      dup5\n      dup2\n      mstore\n      add\n      swap5\n      add\n      swap3\n    tag_92:\n      dup3\n      dup2\n      lt\n      tag_93\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      sub\n      swap1\n      return\n    tag_93:\n      dup4\n      mload\n      dup6\n      mstore\n      dup7\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      swap3\n      dup2\n      add\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      add\n      jump(tag_92)\n    tag_8:\n      0x40\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_76\n      jumpi\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup1\n      dup3\n      gt\n      tag_76\n      jumpi\n      calldatasize\n      0x23\n      dup4\n      add\n      slt\n      iszero\n      tag_76\n      jumpi\n      dup2\n      0x04\n      add\n      calldataload\n      swap1\n      dup2\n      gt\n      tag_76\n      jumpi\n      0x24\n      dup3\n      add\n      swap2\n      0x24\n      calldatasize\n      swap2\n      dup4\n      0x05\n      shl\n      add\n      add\n      gt\n      tag_76\n      jumpi\n      swap1\n      calldataload(0x24)\n      swap3\n      tag_105\n      dup5\n      tag_4\n      jump\t// in\n    tag_105:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7708:7709  0 */\n      0x00\n      swap3\n      dup4\n      swap3\n      dup4\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup8\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7682:7710  refundReceiver == address(0) */\n      iszero\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7798:7817  i < requests.length */\n    tag_106:\n      dup2\n      dup5\n      lt\n      tag_107\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8186:8195  msg.value */\n      pop\n      pop\n      pop\n      pop\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8169:8195  requestsValue != msg.value */\n      dup3\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8165:8286  if (requestsValue != msg.value) {... */\n      tag_109\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8453:8469  refundValue != 0 */\n      pop\n      pop\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8449:8777  if (refundValue != 0) {... */\n      tag_111\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8449:8777  if (refundValue != 0) {... */\n    tag_111:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8754:8765  refundValue */\n      tag_113\n      swap2\n      tag_34\n      jump\t// in\n    tag_113:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8165:8286  if (requestsValue != msg.value) {... */\n    tag_109:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n      shl(0xe0, 0x70647f79)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x04\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      dup2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8186:8195  msg.value */\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n    tag_114:\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n    tag_107:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7866  requests[i] */\n      swap1\n      swap2\n      swap3\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7838:7872  requestsValue += requests[i].value */\n      tag_115\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7866  requests[i] */\n      swap1\n      dup6\n      tag_116\n      dup9\n      dup7\n      dup7\n      tag_13\n      jump\t// in\n    tag_116:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7872  requests[i].value */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7838:7872  requestsValue += requests[i].value */\n      swap1\n      tag_14\n      jump\t// in\n    tag_115:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7910:7921  requests[i] */\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n      tag_117\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7901:7930  _execute(requests[i], atomic) */\n      tag_118\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7910:7921  requests[i] */\n      dup6\n      tag_119\n      dup5\n      dup8\n      dup8\n      tag_13\n      jump\t// in\n    tag_119:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7901:7930  _execute(requests[i], atomic) */\n      tag_31\n      jump\t// in\n    tag_118:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n      iszero\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n    tag_117:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n      tag_120\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n    tag_121:\n      tag_122\n      swap1\n      tag_12\n      jump\t// in\n    tag_122:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7787:7796  uint256 i */\n      swap3\n      swap2\n      swap1\n      jump(tag_106)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n    tag_120:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7991:8002  requests[i] */\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7976:8008  refundValue += requests[i].value */\n      tag_123\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n      tag_122\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7991:8002  requests[i] */\n      swap2\n      dup7\n      tag_116\n      dup11\n      dup8\n      dup8\n      tag_13\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7976:8008  refundValue += requests[i].value */\n    tag_123:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n      swap7\n      swap1\n      pop\n      jump(tag_121)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_9:\n      tag_125\n      calldatasize\n      tag_1\n      jump\t// in\n    tag_125:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5911:5924  request.value */\n      0x40\n      swap1\n      dup2\n      dup2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5907  msg.value */\n      dup1\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5924  msg.value != request.value */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5894:6015  if (msg.value != request.value) {... */\n      tag_126\n      jumpi\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11237:11255  _validate(request) */\n      swap2\n      tag_128\n      dup2\n      tag_17\n      jump\t// in\n    tag_128:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11492:11511  !isTrustedForwarder */\n      swap3\n      swap2\n      swap1\n      dup3\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n      tag_129\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11621:11628  !active */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n      tag_131\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11736:11748  !signerMatch */\n      dup1\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n      tag_133\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n      dup3\n      tag_135\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_136:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n      pop\n      dup2\n      tag_137\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_138:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      pop\n      tag_139\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_140:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6029:6053  !_execute(request, true) */\n      pop\n      pop\n      pop\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6025:6112  if (!_execute(request, true)) {... */\n      tag_141\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6025:6112  if (!_execute(request, true)) {... */\n    tag_141:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n      shl(0xe1, 0x0a12f521)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6076:6101  Address.FailedInnerCall() */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x04\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6076:6101  Address.FailedInnerCall() */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_143\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      0x842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12105:12122  _useNonce(signer) */\n      swap3\n      swap2\n      dup2\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_145\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      tag_146\n      0x20\n      dup8\n      add\n      tag_15\n      jump\t// in\n    tag_146:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12296:12308  request.data */\n      swap2\n      dup11\n      tag_147\n      0xa0\n      dup10\n      add\n      dup10\n      tag_18\n      jump\t// in\n    tag_147:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_148\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12310:12322  request.from */\n      tag_149\n      dup12\n      swap7\n      swap4\n      swap7\n      tag_15\n      jump\t// in\n    tag_149:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap4\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      swap4\n      dup5\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup5\n      add\n      swap8\n      dup9\n      tag_29\n      jump\t// in\n    tag_148:\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      not(0x1f)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup2\n      add\n      dup4\n      mstore\n      dup3\n      tag_22\n      jump\t// in\n    tag_145:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12154:12165  request.gas */\n      swap3\n      0x60\n      dup9\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      call\n      swap5\n      dup6\n      swap3\n      gas\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_33\n      jump\t// in\n    tag_143:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup6\n      mload\n      swap4\n      dup5\n      mstore\n      swap1\n      iszero\n      iszero\n      0x20\n      dup5\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n      0x40\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      log2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      0x00\n      dup1\n      dup1\n      jump(tag_140)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n    tag_137:\n      swap1\n      pop\n      0x00\n      jump(tag_138)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n    tag_135:\n      swap2\n      pop\n      0x00\n      jump(tag_136)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n    tag_133:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      dup8\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      tag_114\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      tag_152\n      dup9\n      tag_15\n      jump\t// in\n    tag_152:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap3\n      mload\n      shl(0xe1, 0x6422d02b)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap3\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      swap2\n      swap1\n      swap3\n      and\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n    tag_131:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      tag_114\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11686:11702  request.deadline */\n      dup9\n      tag_154\n      0x80\n      dup9\n      add\n      tag_16\n      jump\t// in\n    tag_154:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      mload\n      shl(0xe1, 0x4a777ac5)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0xffffffffffff\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      dup2\n      swap1\n      0x24\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n    tag_129:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      tag_114\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11562:11572  request.to */\n      dup9\n      tag_156\n      0x20\n      dup9\n      add\n      tag_15\n      jump\t// in\n    tag_156:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      mload\n      shl(0xe0, 0xd2650cd1)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11582:11586  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5894:6015  if (msg.value != request.value) {... */\n    tag_126:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup3\n      mload\n      shl(0xe0, 0x70647f79)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5947:6004  ERC2771ForwarderMismatchedValue(request.value, msg.value) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x04\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5947:6004  ERC2771ForwarderMismatchedValue(request.value, msg.value) */\n      dup2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5907  msg.value */\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_11:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_12:\n      not(0x00)\n      dup2\n      eq\n      tag_158\n      jumpi\n      0x01\n      add\n      swap1\n      jump\t// out\n    tag_158:\n      tag_11\n      jump\t// in\n    tag_13:\n      swap2\n      swap1\n      dup2\n      lt\n      iszero\n      tag_160\n      jumpi\n      0x05\n      shl\n      dup2\n      add\n      calldataload\n      swap1\n      not(0xde)\n      dup2\n      calldatasize\n      sub\n      add\n      dup3\n      slt\n      iszero\n      tag_76\n      jumpi\n      add\n      swap1\n      jump\t// out\n    tag_160:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_14:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_158\n      jumpi\n      jump\t// out\n    tag_15:\n      calldataload\n      tag_166\n      dup2\n      tag_4\n      jump\t// in\n    tag_166:\n      swap1\n      jump\t// out\n    tag_16:\n      calldataload\n      0xffffffffffff\n      dup2\n      and\n      dup2\n      sub\n      tag_76\n      jumpi\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n    tag_17:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9274:9284  request.to */\n      tag_169\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup3\n      calldataload\n      swap2\n      tag_170\n      dup4\n      tag_4\n      jump\t// in\n    tag_170:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n      dup5\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9315  request.deadline */\n      tag_171\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9255:9285  _isTrustedByTarget(request.to) */\n      tag_172\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10354  _hashTypedDataV4(... */\n      tag_173\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10324  _hashTypedDataV4(... */\n      tag_174\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup8\n      calldataload\n      tag_175\n      dup2\n      tag_4\n      jump\t// in\n    tag_175:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10186:10198  request.from */\n      dup10\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      tag_176\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10179:10199  nonces(request.from) */\n      tag_177\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10186:10198  request.from */\n      tag_63\n      dup4\n      tag_15\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10179:10199  nonces(request.from) */\n    tag_177:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10221:10237  request.deadline */\n      swap8\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      tag_148\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10221:10237  request.deadline */\n      0x80\n      dup5\n      add\n      swap10\n      tag_180\n      dup12\n      tag_16\n      jump\t// in\n    tag_180:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_181\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10269:10281  request.data */\n      tag_182\n      0xa0\n      dup9\n      add\n      dup9\n      tag_18\n      jump\t// in\n    tag_182:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      calldatasize\n      swap2\n      tag_24\n      jump\t// in\n    tag_181:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      mload\n      swap2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10259:10282  keccak256(request.data) */\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      swap7\n      dup8\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      dup8\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10146:10157  request.gas */\n      swap10\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10146:10157  request.gas */\n      0x60\n      dup5\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      swap4\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      swap2\n      dup12\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0xffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      0xe0\n      swap7\n      swap3\n      swap10\n      swap9\n      swap8\n      swap4\n      swap10\n      0x0100\n      dup8\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap11\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup9\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap3\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x20\n      dup10\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x40\n      dup8\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x60\n      dup7\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x80\n      dup6\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup5\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0xc0\n      dup3\n      add\n      mstore\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n    tag_176:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9939:10314  keccak256(... */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10324  _hashTypedDataV4(... */\n      tag_39\n      jump\t// in\n    tag_174:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_183\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10336:10353  request.signature */\n      tag_182\n      0xc0\n      dup12\n      add\n      dup12\n      tag_18\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n    tag_183:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10354  _hashTypedDataV4(... */\n      swap1\n      tag_37\n      jump\t// in\n    tag_173:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      pop\n      tag_185\n      dup2\n      swap8\n      swap3\n      swap8\n      tag_26\n      jump\t// in\n    tag_185:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10373:10406  err == ECDSA.RecoverError.NoError */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9274:9284  request.to */\n      swap7\n      tag_15\n      jump\t// in\n    tag_169:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9255:9285  _isTrustedByTarget(request.to) */\n      tag_32\n      jump\t// in\n    tag_172:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9315  request.deadline */\n      swap2\n      tag_16\n      jump\t// in\n    tag_171:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n      swap5\n      dup5\n      tag_186\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n    tag_187:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9234:9417  return (... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9319:9334  block.timestamp */\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0xffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9319:9334  block.timestamp */\n      timestamp\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9334  request.deadline >= block.timestamp */\n      lt\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9234:9417  return (... */\n      swap3\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n    tag_186:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n      tag_188\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9372:9384  request.from */\n      swap2\n      swap5\n      pop\n      tag_189\n      swap1\n      tag_15\n      jump\t// in\n    tag_189:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      and\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n    tag_188:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n      eq\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n      0x00\n      jump(tag_187)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n    tag_18:\n      swap1\n      calldataload\n      swap1\n      not(0x1e)\n      dup2\n      calldatasize\n      sub\n      add\n      dup3\n      slt\n      iszero\n      tag_76\n      jumpi\n      add\n      dup1\n      calldataload\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_76\n      jumpi\n      0x20\n      add\n      swap2\n      dup2\n      calldatasize\n      sub\n      dup4\n      sgt\n      tag_76\n      jumpi\n      jump\t// out\n    tag_19:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      shl(0xe0, 0x4e487b71)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x00\n      mstore\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_20:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_196\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_196:\n      tag_19\n      jump\t// in\n    tag_21:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0xc0\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_196\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_22:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_196\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_23:\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_196\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x1f\n      add\n      not(0x1f)\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_24:\n      swap3\n      swap2\n      swap3\n      tag_204\n      dup3\n      tag_23\n      jump\t// in\n    tag_204:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_205\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      dup5\n      tag_22\n      jump\t// in\n    tag_205:\n      dup3\n      swap5\n      dup2\n      dup5\n      mstore\n      dup2\n      dup4\n      add\n      gt\n      tag_76\n      jumpi\n      dup3\n      dup2\n      0x20\n      swap4\n      dup5\n      0x00\n      swap7\n      add\n      calldatacopy\n      add\n      add\n      mstore\n      jump\t// out\n    tag_26:\n      0x04\n      gt\n      iszero\n      tag_208\n      jumpi\n      jump\t// out\n    tag_208:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      shl(0xe0, 0x4e487b71)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x00\n      mstore\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_29:\n      dup3\n      0x14\n      swap5\n      swap4\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup3\n      calldatacopy\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      not(0xffffffffffffffffffffffff)\n      swap1\n      0x60\n      shl\n      and\n      dup2\n      mstore\n      add\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_31:\n      swap2\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11237:11255  _validate(request) */\n      swap3\n      tag_210\n      dup2\n      tag_17\n      jump\t// in\n    tag_210:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n      swap5\n      tag_211\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_212:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n      dup3\n      tag_213\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_214:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n      pop\n      dup2\n      tag_215\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_216:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      pop\n      tag_217\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n    tag_217:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_219\n      swap5\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      0x842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12105:12122  _useNonce(signer) */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      dup1\n      tag_221\n      0x20\n      dup6\n      add\n      tag_15\n      jump\t// in\n    tag_221:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12296:12308  request.data */\n      tag_222\n      0xa0\n      dup7\n      add\n      dup7\n      tag_18\n      jump\t// in\n    tag_222:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_223\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12310:12322  request.from */\n      tag_224\n      dup9\n      tag_15\n      jump\t// in\n    tag_224:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_148\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      swap4\n      dup5\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup5\n      add\n      swap7\n      dup8\n      tag_29\n      jump\t// in\n    tag_223:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      swap2\n      0x40\n      dup8\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12154:12165  request.gas */\n      swap1\n      0x60\n      dup9\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      call\n      swap6\n      dup7\n      swap3\n      gas\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_33\n      jump\t// in\n    tag_219:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup1\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      iszero\n      iszero\n      0x20\n      dup6\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      log2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n    tag_215:\n      swap1\n      pop\n      0x00\n      jump(tag_216)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n    tag_213:\n      swap2\n      pop\n      0x00\n      jump(tag_214)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n    tag_211:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11492:11511  !isTrustedForwarder */\n      dup3\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n      tag_227\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11621:11628  !active */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n      tag_229\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11736:11748  !signerMatch */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n      tag_212\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      dup5\n      tag_233\n      dup6\n      tag_15\n      jump\t// in\n    tag_233:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe1, 0x6422d02b)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap3\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      swap2\n      and\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n    tag_229:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      tag_114\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11686:11702  request.deadline */\n      tag_236\n      0x80\n      dup7\n      add\n      tag_16\n      jump\t// in\n    tag_236:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe1, 0x4a777ac5)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0xffffffffffff\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      dup2\n      swap1\n      0x24\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n    tag_227:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      tag_114\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11562:11572  request.to */\n      tag_238\n      0x20\n      dup7\n      add\n      tag_15\n      jump\t// in\n    tag_238:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe0, 0xd2650cd1)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11582:11586  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n    tag_32:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      swap1\n      0x20\n      dup3\n      add\n      swap1\n      shl(0xe0, 0x572b6c05)\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13045:13049  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x24\n      dup5\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x24\n      dup4\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup4\n      add\n      swap2\n      dup4\n      dup4\n      lt\n      0xffffffffffffffff\n      dup5\n      gt\n      or\n      tag_196\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      0x00\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13185:13907  assembly {... */\n      mload\n      swap2\n      gas\n      staticcall\n      mload(0x00)\n      returndatasize\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n      dup3\n      tag_241\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n    tag_242:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13972  success && returnSize >= 0x20 && returnValue > 0 */\n      pop\n      dup2\n      tag_243\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13917:13972  return success && returnSize >= 0x20 && returnValue > 0 */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13972  success && returnSize >= 0x20 && returnValue > 0 */\n    tag_243:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13957:13972  returnValue > 0 */\n      swap1\n      pop\n      iszero\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n    tag_241:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x20\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13935:13953  returnSize >= 0x20 */\n      iszero\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n      0x00\n      jump(tag_242)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n    tag_33:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16351:16362  request.gas */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16365:16367  63 */\n      0x3f\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16351:16362  request.gas */\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      calldataload\n      div\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16337:16791  if (gasLeft < request.gas / 63) {... */\n      tag_245\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16337:16791  if (gasLeft < request.gas / 63) {... */\n    tag_245:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16731:16781  assembly {... */\n      invalid\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1531:1862  function sendValue(address payable recipient, uint256 amount) internal {... */\n    tag_34:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1616:1637  address(this).balance */\n      dup2\n      selfbalance\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1616:1646  address(this).balance < amount */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1612:1721  if (address(this).balance < amount) {... */\n      tag_247\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      0x00\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      gas\n      call\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      jumpi(tag_249, iszero(returndatasize))\n      returndatasize\n      tag_251\n      dup2\n      tag_23\n      jump\t// in\n    tag_251:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_252\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap3\n      dup4\n      tag_22\n      jump\t// in\n    tag_252:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      returndatasize\n      swap3\n      add\n      returndatacopy\n    tag_253:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1797:1805  !success */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1793:1856  if (!success) {... */\n      tag_254\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1531:1862  function sendValue(address payable recipient, uint256 amount) internal {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1793:1856  if (!success) {... */\n    tag_254:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1828:1845  FailedInnerCall() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n    tag_249:\n      jump(tag_253)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1612:1721  if (address(this).balance < amount) {... */\n    tag_247:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe0, 0xcd786059)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1624:1628  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      0x24\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2129:2895  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {... */\n    tag_37:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      mload\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2129:2895  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2276:2278  65 */\n      0x41\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2256:2278  signature.length == 65 */\n      dup4\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2276:2278  65 */\n      tag_256\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2739:2764  tryRecover(hash, v, r, s) */\n      tag_258\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2539:2719  assembly {... */\n      swap3\n      pop\n      0x20\n      dup3\n      add\n      mload\n      swap1\n      0x60\n      0x40\n      dup5\n      add\n      mload\n      swap4\n      add\n      mload\n      0x00\n      byte\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2739:2764  tryRecover(hash, v, r, s) */\n      swap1\n      tag_38\n      jump\t// in\n    tag_258:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2732:2764  return tryRecover(hash, v, r, s) */\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2252:2889  if (signature.length == 65) {... */\n    tag_256:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2811:2812  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2815:2850  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_38:\n      swap2\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      tag_259\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap3\n      0x20\n      swap3\n      swap2\n      0xff\n      0x80\n      swap6\n      mload(0x40)\n      swap5\n      dup6\n      mstore\n      and\n      dup5\n      dup5\n      add\n      mstore\n      0x40\n      dup4\n      add\n      mstore\n      0x60\n      dup3\n      add\n      mstore\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      swap3\n      dup4\n      swap2\n      dup3\n      dup1\n      mstore\n      0x01\n      gas\n      staticcall\n      iszero\n      tag_261\n      jumpi\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_263\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6614:6663  return (signer, RecoverError.NoError, bytes32(0)) */\n      swap2\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_263:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      pop\n      dup1\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n    tag_261:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_259:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_39:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3515:3748  assembly {... */\n      0x42\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_265\n      tag_40\n      jump\t// in\n    tag_265:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3515:3748  assembly {... */\n      swap1\n      mload(0x40)\n      swap2\n      shl(0xf0, 0x1901)\n      dup4\n      mstore\n      0x02\n      dup4\n      add\n      mstore\n      0x22\n      dup3\n      add\n      mstore\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_40:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0x181e1e3a457d5cef39dddc6213a1adbc86226ab3d6c2e46b6b95ce30e1273fad\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      eq\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      tag_266\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_267:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_268\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x267a3e43955d5ac713043fd32df2bde19a025701ea343c4467194e9c98b8fb1f\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4000:4029  return _cachedDomainSeparator */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_268:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0xd60579bb341d0b58542358d81fbcda6dc7dd39e7447d85d21541e19a3877254c\")\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0x995833c2a2aeb937fbc4a128bd490bc0fc9957bdfd709bbb221dc0127b96401e\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x60\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x80\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mstore\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      dup2\n      mstore\n      tag_270\n      dup2\n      tag_21\n      jump\t// in\n    tag_270:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4060:4090  return _buildDomainSeparator() */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_266:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      pop\n      immutable(\"0xa719e06aa69fe5611e041976601e5776ff743aefe35a016a2b5dfe8f33a5e5e9\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      jump(tag_267)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_43:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_271\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_166\n      swap1\n      tag_45\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_271:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      pop\n      mload(0x40)\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      sload\n      swap1\n      0x01\n      dup3\n      dup2\n      shr\n      swap3\n      dup2\n      dup2\n      and\n      swap2\n      dup3\n      iszero\n      tag_274\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_275:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x20\n      swap2\n      dup3\n      dup7\n      lt\n      dup5\n      eq\n      tag_276\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup6\n      dup8\n      mstore\n      dup7\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      dup7\n      add\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap3\n      swap2\n      dup2\n      iszero\n      tag_279\n      jumpi\n      pop\n      0x01\n      eq\n      tag_281\n      jumpi\n    tag_282:\n      pop\n      pop\n      pop\n      tag_166\n      swap3\n      pop\n      sub\n      dup3\n      tag_22\n      jump\t// in\n    tag_281:\n      swap3\n      pop\n      swap4\n      tag_284\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      mstore\n      0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      swap1\n      jump\n    tag_284:\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n    tag_285:\n      dup3\n      dup6\n      lt\n      tag_286\n      jumpi\n      pop\n      pop\n      pop\n      tag_166\n      swap4\n      pop\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_282)\n    tag_286:\n      dup7\n      sload\n      dup6\n      dup6\n      add\n      mstore\n      swap6\n      dup7\n      add\n      swap6\n      dup8\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      jump(tag_285)\n    tag_279:\n      swap3\n      pop\n      pop\n      pop\n      tag_166\n      swap5\n      swap2\n      swap3\n      pop\n      not(0xff)\n      and\n      dup3\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_282)\n    tag_276:\n      shl(0xe0, 0x4e487b71)\n      dup6\n      mstore\n      mstore(0x04, 0x22)\n      0x24\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      revert\n    tag_274:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_275)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_44:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_288\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_166\n      swap1\n      tag_45\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_288:\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      sload\n      dup1\n      dup3\n      shr\n      swap2\n      0x00\n      swap2\n      dup1\n      dup3\n      and\n      swap2\n      dup3\n      iszero\n      tag_291\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_292:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x20\n      swap2\n      dup3\n      dup7\n      lt\n      dup5\n      eq\n      tag_276\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup6\n      dup8\n      mstore\n      dup7\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      0x20\n      dup7\n      add\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap3\n      swap2\n      dup2\n      iszero\n      tag_279\n      jumpi\n      pop\n      0x01\n      eq\n      tag_298\n      jumpi\n      pop\n      pop\n      pop\n      tag_166\n      swap3\n      pop\n      sub\n      dup3\n      tag_22\n      jump\t// in\n    tag_298:\n      swap3\n      pop\n      swap4\n      tag_301\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x00\n      mstore\n      0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\n      swap1\n      jump\n    tag_301:\n      swap5\n      0x00\n      swap4\n    tag_302:\n      dup3\n      dup6\n      lt\n      tag_303\n      jumpi\n      pop\n      pop\n      pop\n      tag_166\n      swap4\n      pop\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_282)\n    tag_303:\n      dup7\n      sload\n      dup6\n      dup6\n      add\n      mstore\n      swap6\n      dup7\n      add\n      swap6\n      dup8\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      jump(tag_302)\n    tag_291:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_292)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_45:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      dup3\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      tag_305\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap2\n      0x40\n      dup4\n      add\n      dup4\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_196\n      jumpi\n      0x40\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2367:2457  assembly {... */\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2367:2457  assembly {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n    tag_305:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":2733:16799  contract ERC2771Forwarder is EIP712, Nonces {... */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n\n    auxdata: 0xa2646970667358221220a316033b61efa6bd03f3fe6cf15880a080f91a50dba397dad5bbd1a0ac827bd664736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 471,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 435,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_toShortStringWithFallback": {
									"entryPoint": 938,
									"id": 1137,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toShortStringWithFallback_2455": {
									"entryPoint": 506,
									"id": 1137,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "61016060409080825234620001af57620014958038038091620000238285620001b3565b833981016020908183820312620001af5782516001600160401b0393848211620001af57019181601f84011215620001af578251928484116200019b5785519362000078601f8201601f1916840186620001b3565b80855282850193838284010111620001af578383620000989301620001d7565b845190858201828110868211176200019b57865260018252808201603160f81b8152620000c585620001fa565b93610120948552620000d784620003aa565b95610140968752519020928360e05251902095610100968088524660a0528151928301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85528284015260608301524660808301523060a083015260a0825260c0820195828710908711176200019b578590525190206080523060c052610fa89384620004ed853960805184610c83015260a05184610d3e015260c05184610c4d015260e05184610cd201525183610cf80152518261018a015251816101b30152f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b601f909101601f19168101906001600160401b038211908210176200019b57604052565b5f5b838110620001e95750505f910152565b8181015183820152602001620001d9565b8051602091908281101562000279575090601f8251116200023757808251920151908083106200022957501790565b825f19910360031b1b161790565b6044906200026b9260405193849263305a27a960e01b845280600485015282519283918260248701528686019101620001d7565b601f01601f19168101030190fd5b6001600160401b0381116200019b575f928354926001938481811c911680156200039f575b838210146200038b57601f811162000355575b5081601f8411600114620002ef57509282939183928694620002e3575b50501b915f199060031b1c191617905560ff90565b015192505f80620002ce565b919083601f1981168780528488209488905b888383106200033a575050501062000321575b505050811b01905560ff90565b01515f1960f88460031b161c191690555f808062000314565b85870151885590960195948501948793509081019062000301565b85805284601f848820920160051c820191601f860160051c015b8281106200037f575050620002b1565b8781550185906200036f565b634e487b7160e01b86526022600452602486fd5b90607f16906200029e565b805160209081811015620003d75750601f8251116200023757808251920151908083106200022957501790565b9192916001600160401b0381116200019b5760019182548381811c91168015620004e1575b82821014620004cd57601f811162000497575b5080601f83116001146200044d5750819293945f9262000441575b50505f19600383901b1c191690821b17905560ff90565b015190505f806200042a565b90601f19831695845f52825f20925f905b8882106200047f57505083859697106200032157505050811b01905560ff90565b8087859682949686015181550195019301906200045e565b835f5283601f835f20920160051c820191601f850160051c015b828110620004c15750506200040f565b5f8155018490620004b1565b634e487b7160e01b5f52602260045260245ffd5b90607f1690620003fc56fe60806040526004361015610011575f80fd5b5f803560e01c90816319d8d38c146100a95781637ecebe00146100625750806384b0196e1461005d578063ccf96b4a146100585763df905caf14610053575f80fd5b610386565b610267565b610170565b346100a65760203660031901126100a657602061009e60043561008481610121565b6001600160a01b03165f9081526002602052604090205490565b604051908152f35b80fd5b346100a65760206100c16100bc366100eb565b61061b565b5090826100e3575b50816100db575b506040519015158152f35b9050826100d0565b9150836100c9565b6003199060208183011261011d576004359167ffffffffffffffff831161011d578260e09203011261011d5760040190565b5f80fd5b6001600160a01b0381160361011d57565b91908251928382525f5b84811061015c575050825f602080949584010152601f8019910116010190565b60208183018101518483018201520161013c565b3461011d575f806003193601126100a657610219906101ae7f0000000000000000000000000000000000000000000000000000000000000000610d64565b6101d77f0000000000000000000000000000000000000000000000000000000000000000610e61565b91604051916101e5836107d3565b818352604051948594600f60f81b865261020b60209360e08589015260e0880190610132565b908682036040880152610132565b904660608601523060808601528260a086015284820360c08601528080855193848152019401925b82811061025057505050500390f35b835185528695509381019392810192600101610241565b60408060031936011261011d5760043567ffffffffffffffff80821161011d573660238301121561011d57816004013590811161011d576024820191602436918360051b01011161011d5790602435926102c084610121565b5f92839283916001600160a01b03871615915b81841061031c57505050503482036102f9575050806102ee57005b6102f791610ae4565b005b516370647f7960e01b8152600481019190915234602482015260449150fd5b0390fd5b9091929461033890856103308886866105b8565b0135906105ee565b946103546103508561034b8487876105b8565b6108c5565b1590565b61036a575b610362906105a5565b9291906102d3565b9561037e61036291866103308a87876105b8565b969050610359565b61038f366100eb565b60409081810135803403610572575f916103a88161061b565b92919082156105365781156105015780156104c457826104bc575b50816104b4575b506103ea575b505050156103da57005b51630a12f52160e11b8152600490fd5b6001600160a01b0381165f908152600260205260409020805460018101909155610491947f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c939291819095610480610444602087016105fb565b918a61045360a089018961078c565b6104726104628b9693966105fb565b93519384926020840197886108a2565b03601f198101835282610810565b51926060880135f19485925a610ad2565b855193845290151560208401526001600160a01b031691604090a25f80806103d0565b90505f6103ca565b91505f6103c3565b87846103186104d2886105fb565b9251636422d02b60e11b81526001600160a01b0392831660048201529190921660248201529081906044820190565b6103188861051160808801610608565b9051634a777ac560e11b815265ffffffffffff90911660048201529081906024820190565b61031888610546602088016105fb565b905163d2650cd160e01b81526001600160a01b0390911660048201523060248201529081906044820190565b82516370647f7960e01b81526004810191909152346024820152604490fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981146105b35760010190565b610591565b91908110156105da5760051b8101359060de198136030182121561011d570190565b634e487b7160e01b5f52603260045260245ffd5b919082018092116105b357565b3561060581610121565b90565b3565ffffffffffff8116810361011d5790565b9061073a82359161062b83610121565b602084019261074561073f610726610710873561064781610121565b89610708610657610084836105fb565b9761047260808401996106698b610608565b61068061067960a088018861078c565b369161084e565b6020815191012091604051968795602087019960406060840135930135918b9365ffffffffffff9360e09692999897939961010087019a7f7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac885260018060a01b0380921660208901521660408701526060860152608085015260a08401521660c08201520152565b519020610c24565b61072061067960c08b018b61078c565b90610b5c565b5061073381979297610884565b15966105fb565b610a6b565b91610608565b948461075f575b509365ffffffffffff4291161015929190565b61077a91945061076e906105fb565b6001600160a01b031690565b6001600160a01b03831614925f61074c565b903590601e198136030182121561011d570180359067ffffffffffffffff821161011d5760200191813603831361011d57565b634e487b7160e01b5f52604160045260245ffd5b6020810190811067ffffffffffffffff8211176107ef57604052565b6107bf565b60c0810190811067ffffffffffffffff8211176107ef57604052565b90601f8019910116810190811067ffffffffffffffff8211176107ef57604052565b67ffffffffffffffff81116107ef57601f01601f191660200190565b92919261085a82610832565b916108686040519384610810565b82948184528183011161011d578281602093845f960137010152565b6004111561088e57565b634e487b7160e01b5f52602160045260245ffd5b826014949392823701906bffffffffffffffffffffffff199060601b1681520190565b91905f926108d28161061b565b946109b6575b826109ae575b50816109a6575b506108ee575050565b6001600160a01b0382165f90815260026020526040902080546001810190915561098a94507f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c9190925f80610945602085016105fb565b61095260a086018661078c565b61097361095e886105fb565b916104726040519384926020840196876108a2565b51916040870135906060880135f19586925a610ad2565b6040805194855291151560208501526001600160a01b031692a2565b90505f6108e5565b91505f6108de565b8215610a2f5781156109fa57806108d857846109d1856105fb565b604051636422d02b60e11b81526001600160a01b03928316600482015291166024820152604490fd5b610318610a0960808601610608565b604051634a777ac560e11b815265ffffffffffff90911660048201529081906024820190565b610318610a3e602086016105fb565b60405163d2650cd160e01b81526001600160a01b0390911660048201523060248201529081906044820190565b60405190602082019063572b6c0560e01b825230602484015260248352606083019183831067ffffffffffffffff8411176107ef576020935f9360405251915afa5f513d82610ac6575b5081610abf575090565b9050151590565b6020111591505f610ab5565b906060603f9101350411610ae257565bfe5b814710610b44575f918291829182916001600160a01b03165af13d15610b3f573d610b0e81610832565b90610b1c6040519283610810565b81525f60203d92013e5b15610b2d57565b604051630a12f52160e11b8152600490fd5b610b26565b60405163cd78605960e01b8152306004820152602490fd5b8151919060418303610b8c57610b859250602082015190606060408401519301515f1a90610b96565b9192909190565b50505f9160029190565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411610c1957926020929160ff6080956040519485521684840152604083015260608201525f92839182805260015afa15610c0d5780516001600160a01b03811615610c0457918190565b50809160019190565b604051903d90823e3d90fd5b5050505f9160039190565b604290610c2f610c4a565b906040519161190160f01b8352600283015260228201522090565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610d3b575b15610ca5577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152610d35816107f4565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614610c7c565b60ff8114610d755761060590610f2b565b506040515f805490600182811c92818116918215610e57575b6020918286108414610e4357858752869493602086019392918115610e245750600114610dc5575b50505061060592500382610810565b925093610df25f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b945f935b828510610e0e575050506106059350015f8080610db6565b8654858501529586019587955093810193610df6565b925050506106059491925060ff19168252151560051b015f8080610db6565b634e487b7160e01b85526022600452602485fd5b93607f1693610d8e565b60ff8114610e725761060590610f2b565b506040516001805480821c915f91808216918215610f21575b6020918286108414610e4357858752869493602086019392918115610e245750600114610ec15750505061060592500382610810565b925093610eef60015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b945f935b828510610f0b575050506106059350015f8080610db6565b8654858501529586019587955093810193610ef3565b93607f1693610e8b565b60ff811690601f8211610f6057604051916040830183811067ffffffffffffffff8211176107ef576040528252602082015290565b604051632cd44ac360e21b8152600490fdfea2646970667358221220a316033b61efa6bd03f3fe6cf15880a080f91a50dba397dad5bbd1a0ac827bd664736f6c63430008140033",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE CALLVALUE PUSH3 0x1AF JUMPI PUSH3 0x1495 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x23 DUP3 DUP6 PUSH3 0x1B3 JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD PUSH1 0x20 SWAP1 DUP2 DUP4 DUP3 SUB SLT PUSH3 0x1AF JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 DUP5 DUP3 GT PUSH3 0x1AF JUMPI ADD SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x1AF JUMPI DUP3 MLOAD SWAP3 DUP5 DUP5 GT PUSH3 0x19B JUMPI DUP6 MLOAD SWAP4 PUSH3 0x78 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP5 ADD DUP7 PUSH3 0x1B3 JUMP JUMPDEST DUP1 DUP6 MSTORE DUP3 DUP6 ADD SWAP4 DUP4 DUP3 DUP5 ADD ADD GT PUSH3 0x1AF JUMPI DUP4 DUP4 PUSH3 0x98 SWAP4 ADD PUSH3 0x1D7 JUMP JUMPDEST DUP5 MLOAD SWAP1 DUP6 DUP3 ADD DUP3 DUP2 LT DUP7 DUP3 GT OR PUSH3 0x19B JUMPI DUP7 MSTORE PUSH1 0x1 DUP3 MSTORE DUP1 DUP3 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE PUSH3 0xC5 DUP6 PUSH3 0x1FA JUMP JUMPDEST SWAP4 PUSH2 0x120 SWAP5 DUP6 MSTORE PUSH3 0xD7 DUP5 PUSH3 0x3AA JUMP JUMPDEST SWAP6 PUSH2 0x140 SWAP7 DUP8 MSTORE MLOAD SWAP1 KECCAK256 SWAP3 DUP4 PUSH1 0xE0 MSTORE MLOAD SWAP1 KECCAK256 SWAP6 PUSH2 0x100 SWAP7 DUP1 DUP9 MSTORE CHAINID PUSH1 0xA0 MSTORE DUP2 MLOAD SWAP3 DUP4 ADD SWAP4 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP6 MSTORE DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 MSTORE PUSH1 0xC0 DUP3 ADD SWAP6 DUP3 DUP8 LT SWAP1 DUP8 GT OR PUSH3 0x19B JUMPI DUP6 SWAP1 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0x80 MSTORE ADDRESS PUSH1 0xC0 MSTORE PUSH2 0xFA8 SWAP4 DUP5 PUSH3 0x4ED DUP6 CODECOPY PUSH1 0x80 MLOAD DUP5 PUSH2 0xC83 ADD MSTORE PUSH1 0xA0 MLOAD DUP5 PUSH2 0xD3E ADD MSTORE PUSH1 0xC0 MLOAD DUP5 PUSH2 0xC4D ADD MSTORE PUSH1 0xE0 MLOAD DUP5 PUSH2 0xCD2 ADD MSTORE MLOAD DUP4 PUSH2 0xCF8 ADD MSTORE MLOAD DUP3 PUSH2 0x18A ADD MSTORE MLOAD DUP2 PUSH2 0x1B3 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x19B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT PUSH3 0x1E9 JUMPI POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x1D9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 DUP3 DUP2 LT ISZERO PUSH3 0x279 JUMPI POP SWAP1 PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x237 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x229 JUMPI POP OR SWAP1 JUMP JUMPDEST DUP3 PUSH0 NOT SWAP2 SUB PUSH1 0x3 SHL SHL AND OR SWAP1 JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH3 0x26B SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP5 MSTORE DUP1 PUSH1 0x4 DUP6 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 DUP3 PUSH1 0x24 DUP8 ADD MSTORE DUP7 DUP7 ADD SWAP2 ADD PUSH3 0x1D7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x19B JUMPI PUSH0 SWAP3 DUP4 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x39F JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x38B JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x355 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x2EF JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP7 SWAP5 PUSH3 0x2E3 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP PUSH0 DUP1 PUSH3 0x2CE JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP1 MSTORE DUP5 DUP9 KECCAK256 SWAP5 DUP9 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x33A JUMPI POP POP POP LT PUSH3 0x321 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH3 0x314 JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x301 JUMP JUMPDEST DUP6 DUP1 MSTORE DUP5 PUSH1 0x1F DUP5 DUP9 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x37F JUMPI POP POP PUSH3 0x2B1 JUMP JUMPDEST DUP8 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x36F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x29E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x3D7 JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x237 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x229 JUMPI POP OR SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x19B JUMPI PUSH1 0x1 SWAP2 DUP3 SLOAD DUP4 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x4E1 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x4CD JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x497 JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x44D JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH0 SWAP3 PUSH3 0x441 JUMPI JUMPDEST POP POP PUSH0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH3 0x42A JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 DUP5 PUSH0 MSTORE DUP3 PUSH0 KECCAK256 SWAP3 PUSH0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH3 0x47F JUMPI POP POP DUP4 DUP6 SWAP7 SWAP8 LT PUSH3 0x321 JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x45E JUMP JUMPDEST DUP4 PUSH0 MSTORE DUP4 PUSH1 0x1F DUP4 PUSH0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x4C1 JUMPI POP POP PUSH3 0x40F JUMP JUMPDEST PUSH0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH3 0x4B1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x3FC JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x19D8D38C EQ PUSH2 0xA9 JUMPI DUP2 PUSH4 0x7ECEBE00 EQ PUSH2 0x62 JUMPI POP DUP1 PUSH4 0x84B0196E EQ PUSH2 0x5D JUMPI DUP1 PUSH4 0xCCF96B4A EQ PUSH2 0x58 JUMPI PUSH4 0xDF905CAF EQ PUSH2 0x53 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x386 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST PUSH2 0x170 JUMP JUMPDEST CALLVALUE PUSH2 0xA6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA6 JUMPI PUSH1 0x20 PUSH2 0x9E PUSH1 0x4 CALLDATALOAD PUSH2 0x84 DUP2 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA6 JUMPI PUSH1 0x20 PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH2 0xEB JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST POP SWAP1 DUP3 PUSH2 0xE3 JUMPI JUMPDEST POP DUP2 PUSH2 0xDB JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 PUSH2 0xD0 JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0xC9 JUMP JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x11D JUMPI DUP3 PUSH1 0xE0 SWAP3 SUB ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x11D JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x15C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x13C JUMP JUMPDEST CALLVALUE PUSH2 0x11D JUMPI PUSH0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA6 JUMPI PUSH2 0x219 SWAP1 PUSH2 0x1AE PUSH32 0x0 PUSH2 0xD64 JUMP JUMPDEST PUSH2 0x1D7 PUSH32 0x0 PUSH2 0xE61 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1E5 DUP4 PUSH2 0x7D3 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0xF PUSH1 0xF8 SHL DUP7 MSTORE PUSH2 0x20B PUSH1 0x20 SWAP4 PUSH1 0xE0 DUP6 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD SWAP1 PUSH2 0x132 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x132 JUMP JUMPDEST SWAP1 CHAINID PUSH1 0x60 DUP7 ADD MSTORE ADDRESS PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP7 ADD MSTORE DUP5 DUP3 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP1 DUP1 DUP6 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP5 ADD SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x250 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0x11D JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x11D JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x11D JUMPI PUSH1 0x24 DUP3 ADD SWAP2 PUSH1 0x24 CALLDATASIZE SWAP2 DUP4 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x11D JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH2 0x2C0 DUP5 PUSH2 0x121 JUMP JUMPDEST PUSH0 SWAP3 DUP4 SWAP3 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO SWAP2 JUMPDEST DUP2 DUP5 LT PUSH2 0x31C JUMPI POP POP POP POP CALLVALUE DUP3 SUB PUSH2 0x2F9 JUMPI POP POP DUP1 PUSH2 0x2EE JUMPI STOP JUMPDEST PUSH2 0x2F7 SWAP2 PUSH2 0xAE4 JUMP JUMPDEST STOP JUMPDEST MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP2 POP REVERT JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP5 PUSH2 0x338 SWAP1 DUP6 PUSH2 0x330 DUP9 DUP7 DUP7 PUSH2 0x5B8 JUMP JUMPDEST ADD CALLDATALOAD SWAP1 PUSH2 0x5EE JUMP JUMPDEST SWAP5 PUSH2 0x354 PUSH2 0x350 DUP6 PUSH2 0x34B DUP5 DUP8 DUP8 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x36A JUMPI JUMPDEST PUSH2 0x362 SWAP1 PUSH2 0x5A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2D3 JUMP JUMPDEST SWAP6 PUSH2 0x37E PUSH2 0x362 SWAP2 DUP7 PUSH2 0x330 DUP11 DUP8 DUP8 PUSH2 0x5B8 JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x359 JUMP JUMPDEST PUSH2 0x38F CALLDATASIZE PUSH2 0xEB JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 DUP2 ADD CALLDATALOAD DUP1 CALLVALUE SUB PUSH2 0x572 JUMPI PUSH0 SWAP2 PUSH2 0x3A8 DUP2 PUSH2 0x61B JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x536 JUMPI DUP2 ISZERO PUSH2 0x501 JUMPI DUP1 ISZERO PUSH2 0x4C4 JUMPI DUP3 PUSH2 0x4BC JUMPI JUMPDEST POP DUP2 PUSH2 0x4B4 JUMPI JUMPDEST POP PUSH2 0x3EA JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x3DA JUMPI STOP JUMPDEST MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x491 SWAP5 PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP4 SWAP3 SWAP2 DUP2 SWAP1 SWAP6 PUSH2 0x480 PUSH2 0x444 PUSH1 0x20 DUP8 ADD PUSH2 0x5FB JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x453 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0x78C JUMP JUMPDEST PUSH2 0x472 PUSH2 0x462 DUP12 SWAP7 SWAP4 SWAP7 PUSH2 0x5FB JUMP JUMPDEST SWAP4 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP8 DUP9 PUSH2 0x8A2 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x810 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP5 DUP6 SWAP3 GAS PUSH2 0xAD2 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x40 SWAP1 LOG2 PUSH0 DUP1 DUP1 PUSH2 0x3D0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x3CA JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x3C3 JUMP JUMPDEST DUP8 DUP5 PUSH2 0x318 PUSH2 0x4D2 DUP9 PUSH2 0x5FB JUMP JUMPDEST SWAP3 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 DUP9 PUSH2 0x511 PUSH1 0x80 DUP9 ADD PUSH2 0x608 JUMP JUMPDEST SWAP1 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 DUP9 PUSH2 0x546 PUSH1 0x20 DUP9 ADD PUSH2 0x5FB JUMP JUMPDEST SWAP1 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x5B3 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xDE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x11D JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x5B3 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x605 DUP2 PUSH2 0x121 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x11D JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x73A DUP3 CALLDATALOAD SWAP2 PUSH2 0x62B DUP4 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP3 PUSH2 0x745 PUSH2 0x73F PUSH2 0x726 PUSH2 0x710 DUP8 CALLDATALOAD PUSH2 0x647 DUP2 PUSH2 0x121 JUMP JUMPDEST DUP10 PUSH2 0x708 PUSH2 0x657 PUSH2 0x84 DUP4 PUSH2 0x5FB JUMP JUMPDEST SWAP8 PUSH2 0x472 PUSH1 0x80 DUP5 ADD SWAP10 PUSH2 0x669 DUP12 PUSH2 0x608 JUMP JUMPDEST PUSH2 0x680 PUSH2 0x679 PUSH1 0xA0 DUP9 ADD DUP9 PUSH2 0x78C JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x84E JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP10 PUSH1 0x40 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD SWAP2 DUP12 SWAP4 PUSH6 0xFFFFFFFFFFFF SWAP4 PUSH1 0xE0 SWAP7 SWAP3 SWAP10 SWAP9 SWAP8 SWAP4 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 PUSH32 0x7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC DUP9 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x20 DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xC24 JUMP JUMPDEST PUSH2 0x720 PUSH2 0x679 PUSH1 0xC0 DUP12 ADD DUP12 PUSH2 0x78C JUMP JUMPDEST SWAP1 PUSH2 0xB5C JUMP JUMPDEST POP PUSH2 0x733 DUP2 SWAP8 SWAP3 SWAP8 PUSH2 0x884 JUMP JUMPDEST ISZERO SWAP7 PUSH2 0x5FB JUMP JUMPDEST PUSH2 0xA6B JUMP JUMPDEST SWAP2 PUSH2 0x608 JUMP JUMPDEST SWAP5 DUP5 PUSH2 0x75F JUMPI JUMPDEST POP SWAP4 PUSH6 0xFFFFFFFFFFFF TIMESTAMP SWAP2 AND LT ISZERO SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x77A SWAP2 SWAP5 POP PUSH2 0x76E SWAP1 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ SWAP3 PUSH0 PUSH2 0x74C JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x11D JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x11D JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x11D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7EF JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x85A DUP3 PUSH2 0x832 JUMP JUMPDEST SWAP2 PUSH2 0x868 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x810 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x11D JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x4 GT ISZERO PUSH2 0x88E JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x14 SWAP5 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH0 SWAP3 PUSH2 0x8D2 DUP2 PUSH2 0x61B JUMP JUMPDEST SWAP5 PUSH2 0x9B6 JUMPI JUMPDEST DUP3 PUSH2 0x9AE JUMPI JUMPDEST POP DUP2 PUSH2 0x9A6 JUMPI JUMPDEST POP PUSH2 0x8EE JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x98A SWAP5 POP PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP2 SWAP1 SWAP3 PUSH0 DUP1 PUSH2 0x945 PUSH1 0x20 DUP6 ADD PUSH2 0x5FB JUMP JUMPDEST PUSH2 0x952 PUSH1 0xA0 DUP7 ADD DUP7 PUSH2 0x78C JUMP JUMPDEST PUSH2 0x973 PUSH2 0x95E DUP9 PUSH2 0x5FB JUMP JUMPDEST SWAP2 PUSH2 0x472 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 PUSH2 0x8A2 JUMP JUMPDEST MLOAD SWAP2 PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP6 DUP7 SWAP3 GAS PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x8E5 JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x8DE JUMP JUMPDEST DUP3 ISZERO PUSH2 0xA2F JUMPI DUP2 ISZERO PUSH2 0x9FA JUMPI DUP1 PUSH2 0x8D8 JUMPI DUP5 PUSH2 0x9D1 DUP6 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH2 0x318 PUSH2 0xA09 PUSH1 0x80 DUP7 ADD PUSH2 0x608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 PUSH2 0xA3E PUSH1 0x20 DUP7 ADD PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 PUSH4 0x572B6C05 PUSH1 0xE0 SHL DUP3 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x24 DUP4 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP4 DUP4 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x7EF JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MSTORE MLOAD SWAP2 GAS STATICCALL PUSH0 MLOAD RETURNDATASIZE DUP3 PUSH2 0xAC6 JUMPI JUMPDEST POP DUP2 PUSH2 0xABF JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP PUSH0 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3F SWAP2 ADD CALLDATALOAD DIV GT PUSH2 0xAE2 JUMPI JUMP JUMPDEST INVALID JUMPDEST DUP2 SELFBALANCE LT PUSH2 0xB44 JUMPI PUSH0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL RETURNDATASIZE ISZERO PUSH2 0xB3F JUMPI RETURNDATASIZE PUSH2 0xB0E DUP2 PUSH2 0x832 JUMP JUMPDEST SWAP1 PUSH2 0xB1C PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x810 JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xB2D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP2 MLOAD SWAP2 SWAP1 PUSH1 0x41 DUP4 SUB PUSH2 0xB8C JUMPI PUSH2 0xB85 SWAP3 POP PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0xB96 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP2 PUSH1 0x2 SWAP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0xC19 JUMPI SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP6 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH0 SWAP3 DUP4 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xC0D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xC04 JUMPI SWAP2 DUP2 SWAP1 JUMP JUMPDEST POP DUP1 SWAP2 PUSH1 0x1 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP PUSH0 SWAP2 PUSH1 0x3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0xC2F PUSH2 0xC4A JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xD3B JUMPI JUMPDEST ISZERO PUSH2 0xCA5 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0xD35 DUP2 PUSH2 0x7F4 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0xC7C JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xD75 JUMPI PUSH2 0x605 SWAP1 PUSH2 0xF2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xE57 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xE43 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xE24 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDC5 JUMPI JUMPDEST POP POP POP PUSH2 0x605 SWAP3 POP SUB DUP3 PUSH2 0x810 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xDF2 PUSH0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xE0E JUMPI POP POP POP PUSH2 0x605 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xDF6 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x605 SWAP5 SWAP2 SWAP3 POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xD8E JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xE72 JUMPI PUSH2 0x605 SWAP1 PUSH2 0xF2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 SHR SWAP2 PUSH0 SWAP2 DUP1 DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0xF21 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xE43 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xE24 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEC1 JUMPI POP POP POP PUSH2 0x605 SWAP3 POP SUB DUP3 PUSH2 0x810 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xEEF PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xF0B JUMPI POP POP POP PUSH2 0x605 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xEF3 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xE8B JUMP JUMPDEST PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0xF60 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 AND SUB EXTCODESIZE PUSH2 0xEFA6 0xBD SUB RETURN INVALID PUSH13 0xF15880A080F91A50DBA397DAD5 0xBB 0xD1 LOG0 0xAC DUP3 PUSH28 0xD664736F6C6343000814003300000000000000000000000000000000 ",
							"sourceMap": "2733:14066:2:-:0;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2733:14066:2;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2733:14066:2;;3401:45:10;;;:::i;:::-;3393:53;;;;;3467:51;;;:::i;:::-;3456:62;;;;;2733:14066:2;3542:22:10;;3528:36;;;;2733:14066:2;3591:25:10;;3574:42;;;;;;3644:13;3627:30;;2733:14066:2;;4204:80:10;;;2079:95;;;;;;;;;;;;3644:13;2079:95;;;;4278:4;3627:30;2079:95;;;3627:30;4204:80;;2079:95;2733:14066:2;;;;;;;;;;;;;;;;4194:91:10;;2079:95;3667:48;4278:4;2079:95;3725:27;2733:14066:2;;;;;;2079:95:10;2733:14066:2;;;;;3627:30:10;2733:14066:2;;;;;2079:95:10;2733:14066:2;;;;;3528:36:10;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;-1:-1:-1;;2733:14066:2;;;;-1:-1:-1;;;;;2733:14066:2;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;2733:14066:2;;;;:::o;:::-;;;;;;;;;;;;;2914:340:6;2733:14066:2;;3059:2:6;;2733:14066:2;3037:24:6;;;3059:2;;;2733:14066:2;;1854:2:6;2733:14066:2;;1840:16:6;1836:72;;2733:14066:2;;;;;;;;;;;;1949:36:6;;3077:27;:::o;2733:14066:2:-;;;;;;;;;;1949:36:6;3077:27;:::o;1836:72::-;2733:14066:2;;;;;;1879:18:6;;;;;;;;;;;;2733:14066:2;;;;;;;;;;;;;;;;;:::i;:::-;1854:2:6;2733:14066:2;-1:-1:-1;;2733:14066:2;;;1879:18:6;;;;3033:215;-1:-1:-1;;;;;2733:14066:2;;;;3432:13:10;2733:14066:2;;;;;;;;;;;;;;;;3033:215:6;2733:14066:2;;;;;;;;;;;3033:215:6;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;2733:14066:2:-;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;2733:14066:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2733:14066:2;;;;;;;;;;;;;;;2914:340:6;2733:14066:2;;3059:2:6;;3037:24;;;3059:2;;;2733:14066:2;1854:2:6;2733:14066:2;;1840:16:6;1836:72;;2733:14066:2;;;;;;;;;;;;1949:36:6;;3077:27;:::o;3033:215::-;2733:14066:2;;;-1:-1:-1;;;;;2733:14066:2;;;;;;;;;;;;;;;;;;3033:215:6;2733:14066:2;;;;;;;;;;;3033:215:6;2733:14066:2;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;-1:-1:-1;;;;2733:14066:2;;;;;;;;;;;;;1390:66:6;;3195:42::o;2733:14066:2:-;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;-1:-1:-1;2733:14066:2;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;2733:14066:2:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;-1:-1:-1;2733:14066:2;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_available_length_bytes": {
									"entryPoint": 2126,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_struct_ForwardRequestData_calldata": {
									"entryPoint": 235,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_address_address": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_bytes32_address_address_uint256_uint256_uint256_uint48_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_packed_bytes_calldata_address": {
									"entryPoint": 2210,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 306,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_uint256_bool": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_uint256_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_uint48": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"access_calldata_tail_bytes_calldata": {
									"entryPoint": 1932,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"array_allocation_size_bytes": {
									"entryPoint": 2098,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_string_storage_ptr": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_string_storage_ptr_7276": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_string": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"calldata_array_index_access_struct_ForwardRequestData_calldata_dyn_calldata": {
									"entryPoint": 1464,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 1518,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_address": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_bool": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"external_fun_eip712Domain": {
									"entryPoint": 368,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_execute": {
									"entryPoint": 902,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_executeBatch": {
									"entryPoint": 615,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 2064,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_7272": {
									"entryPoint": 2003,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_7274": {
									"entryPoint": 2036,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_checkForwardedGas": {
									"entryPoint": 2770,
									"id": 635,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_domainSeparatorV4": {
									"entryPoint": 3146,
									"id": 2032,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_execute": {
									"entryPoint": 2245,
									"id": 574,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_hashTypedDataV4": {
									"entryPoint": 3108,
									"id": 2069,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_isTrustedByTarget": {
									"entryPoint": 2667,
									"id": 616,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_nonces": {
									"entryPoint": null,
									"id": 938,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_sendValue": {
									"entryPoint": 2788,
									"id": 693,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_toString": {
									"entryPoint": 3883,
									"id": 1065,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback": {
									"entryPoint": 3428,
									"id": 1164,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback_4007": {
									"entryPoint": 3681,
									"id": 1164,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_tryRecover": {
									"entryPoint": 2966,
									"id": 1823,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"fun_tryRecover_1635": {
									"entryPoint": 2908,
									"id": 1635,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"fun_useNonce": {
									"entryPoint": null,
									"id": 953,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_validate": {
									"entryPoint": 1563,
									"id": 406,
									"parameterSlots": 1,
									"returnSlots": 4
								},
								"increment_uint256": {
									"entryPoint": 1445,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1425,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1983,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"read_from_calldatat_address": {
									"entryPoint": 1531,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"read_from_calldatat_uint48": {
									"entryPoint": 1544,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_assert_enum_RecoverError": {
									"entryPoint": 2180,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 289,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"1930": [
									{
										"length": 32,
										"start": 3203
									}
								],
								"1932": [
									{
										"length": 32,
										"start": 3390
									}
								],
								"1934": [
									{
										"length": 32,
										"start": 3149
									}
								],
								"1936": [
									{
										"length": 32,
										"start": 3282
									}
								],
								"1938": [
									{
										"length": 32,
										"start": 3320
									}
								],
								"1941": [
									{
										"length": 32,
										"start": 394
									}
								],
								"1944": [
									{
										"length": 32,
										"start": 435
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x19D8D38C EQ PUSH2 0xA9 JUMPI DUP2 PUSH4 0x7ECEBE00 EQ PUSH2 0x62 JUMPI POP DUP1 PUSH4 0x84B0196E EQ PUSH2 0x5D JUMPI DUP1 PUSH4 0xCCF96B4A EQ PUSH2 0x58 JUMPI PUSH4 0xDF905CAF EQ PUSH2 0x53 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x386 JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST PUSH2 0x170 JUMP JUMPDEST CALLVALUE PUSH2 0xA6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA6 JUMPI PUSH1 0x20 PUSH2 0x9E PUSH1 0x4 CALLDATALOAD PUSH2 0x84 DUP2 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA6 JUMPI PUSH1 0x20 PUSH2 0xC1 PUSH2 0xBC CALLDATASIZE PUSH2 0xEB JUMP JUMPDEST PUSH2 0x61B JUMP JUMPDEST POP SWAP1 DUP3 PUSH2 0xE3 JUMPI JUMPDEST POP DUP2 PUSH2 0xDB JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 PUSH2 0xD0 JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0xC9 JUMP JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0x11D JUMPI DUP3 PUSH1 0xE0 SWAP3 SUB ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x11D JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x15C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x13C JUMP JUMPDEST CALLVALUE PUSH2 0x11D JUMPI PUSH0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA6 JUMPI PUSH2 0x219 SWAP1 PUSH2 0x1AE PUSH32 0x0 PUSH2 0xD64 JUMP JUMPDEST PUSH2 0x1D7 PUSH32 0x0 PUSH2 0xE61 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1E5 DUP4 PUSH2 0x7D3 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0xF PUSH1 0xF8 SHL DUP7 MSTORE PUSH2 0x20B PUSH1 0x20 SWAP4 PUSH1 0xE0 DUP6 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD SWAP1 PUSH2 0x132 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x132 JUMP JUMPDEST SWAP1 CHAINID PUSH1 0x60 DUP7 ADD MSTORE ADDRESS PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP7 ADD MSTORE DUP5 DUP3 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP1 DUP1 DUP6 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP5 ADD SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x250 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x241 JUMP JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x11D JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0x11D JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x11D JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x11D JUMPI PUSH1 0x24 DUP3 ADD SWAP2 PUSH1 0x24 CALLDATASIZE SWAP2 DUP4 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x11D JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH2 0x2C0 DUP5 PUSH2 0x121 JUMP JUMPDEST PUSH0 SWAP3 DUP4 SWAP3 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO SWAP2 JUMPDEST DUP2 DUP5 LT PUSH2 0x31C JUMPI POP POP POP POP CALLVALUE DUP3 SUB PUSH2 0x2F9 JUMPI POP POP DUP1 PUSH2 0x2EE JUMPI STOP JUMPDEST PUSH2 0x2F7 SWAP2 PUSH2 0xAE4 JUMP JUMPDEST STOP JUMPDEST MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP2 POP REVERT JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP5 PUSH2 0x338 SWAP1 DUP6 PUSH2 0x330 DUP9 DUP7 DUP7 PUSH2 0x5B8 JUMP JUMPDEST ADD CALLDATALOAD SWAP1 PUSH2 0x5EE JUMP JUMPDEST SWAP5 PUSH2 0x354 PUSH2 0x350 DUP6 PUSH2 0x34B DUP5 DUP8 DUP8 PUSH2 0x5B8 JUMP JUMPDEST PUSH2 0x8C5 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x36A JUMPI JUMPDEST PUSH2 0x362 SWAP1 PUSH2 0x5A5 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x2D3 JUMP JUMPDEST SWAP6 PUSH2 0x37E PUSH2 0x362 SWAP2 DUP7 PUSH2 0x330 DUP11 DUP8 DUP8 PUSH2 0x5B8 JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x359 JUMP JUMPDEST PUSH2 0x38F CALLDATASIZE PUSH2 0xEB JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 DUP2 ADD CALLDATALOAD DUP1 CALLVALUE SUB PUSH2 0x572 JUMPI PUSH0 SWAP2 PUSH2 0x3A8 DUP2 PUSH2 0x61B JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x536 JUMPI DUP2 ISZERO PUSH2 0x501 JUMPI DUP1 ISZERO PUSH2 0x4C4 JUMPI DUP3 PUSH2 0x4BC JUMPI JUMPDEST POP DUP2 PUSH2 0x4B4 JUMPI JUMPDEST POP PUSH2 0x3EA JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x3DA JUMPI STOP JUMPDEST MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x491 SWAP5 PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP4 SWAP3 SWAP2 DUP2 SWAP1 SWAP6 PUSH2 0x480 PUSH2 0x444 PUSH1 0x20 DUP8 ADD PUSH2 0x5FB JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x453 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0x78C JUMP JUMPDEST PUSH2 0x472 PUSH2 0x462 DUP12 SWAP7 SWAP4 SWAP7 PUSH2 0x5FB JUMP JUMPDEST SWAP4 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP8 DUP9 PUSH2 0x8A2 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x810 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP5 DUP6 SWAP3 GAS PUSH2 0xAD2 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x40 SWAP1 LOG2 PUSH0 DUP1 DUP1 PUSH2 0x3D0 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x3CA JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x3C3 JUMP JUMPDEST DUP8 DUP5 PUSH2 0x318 PUSH2 0x4D2 DUP9 PUSH2 0x5FB JUMP JUMPDEST SWAP3 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 DUP9 PUSH2 0x511 PUSH1 0x80 DUP9 ADD PUSH2 0x608 JUMP JUMPDEST SWAP1 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 DUP9 PUSH2 0x546 PUSH1 0x20 DUP9 ADD PUSH2 0x5FB JUMP JUMPDEST SWAP1 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x5B3 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x5DA JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xDE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x11D JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x5B3 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x605 DUP2 PUSH2 0x121 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0x11D JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x73A DUP3 CALLDATALOAD SWAP2 PUSH2 0x62B DUP4 PUSH2 0x121 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP3 PUSH2 0x745 PUSH2 0x73F PUSH2 0x726 PUSH2 0x710 DUP8 CALLDATALOAD PUSH2 0x647 DUP2 PUSH2 0x121 JUMP JUMPDEST DUP10 PUSH2 0x708 PUSH2 0x657 PUSH2 0x84 DUP4 PUSH2 0x5FB JUMP JUMPDEST SWAP8 PUSH2 0x472 PUSH1 0x80 DUP5 ADD SWAP10 PUSH2 0x669 DUP12 PUSH2 0x608 JUMP JUMPDEST PUSH2 0x680 PUSH2 0x679 PUSH1 0xA0 DUP9 ADD DUP9 PUSH2 0x78C JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x84E JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP10 PUSH1 0x40 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD SWAP2 DUP12 SWAP4 PUSH6 0xFFFFFFFFFFFF SWAP4 PUSH1 0xE0 SWAP7 SWAP3 SWAP10 SWAP9 SWAP8 SWAP4 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 PUSH32 0x7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC DUP9 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x20 DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xC24 JUMP JUMPDEST PUSH2 0x720 PUSH2 0x679 PUSH1 0xC0 DUP12 ADD DUP12 PUSH2 0x78C JUMP JUMPDEST SWAP1 PUSH2 0xB5C JUMP JUMPDEST POP PUSH2 0x733 DUP2 SWAP8 SWAP3 SWAP8 PUSH2 0x884 JUMP JUMPDEST ISZERO SWAP7 PUSH2 0x5FB JUMP JUMPDEST PUSH2 0xA6B JUMP JUMPDEST SWAP2 PUSH2 0x608 JUMP JUMPDEST SWAP5 DUP5 PUSH2 0x75F JUMPI JUMPDEST POP SWAP4 PUSH6 0xFFFFFFFFFFFF TIMESTAMP SWAP2 AND LT ISZERO SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x77A SWAP2 SWAP5 POP PUSH2 0x76E SWAP1 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ SWAP3 PUSH0 PUSH2 0x74C JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x11D JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x11D JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0x11D JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x7BF JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x7EF JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x85A DUP3 PUSH2 0x832 JUMP JUMPDEST SWAP2 PUSH2 0x868 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x810 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x11D JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x4 GT ISZERO PUSH2 0x88E JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x14 SWAP5 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH0 SWAP3 PUSH2 0x8D2 DUP2 PUSH2 0x61B JUMP JUMPDEST SWAP5 PUSH2 0x9B6 JUMPI JUMPDEST DUP3 PUSH2 0x9AE JUMPI JUMPDEST POP DUP2 PUSH2 0x9A6 JUMPI JUMPDEST POP PUSH2 0x8EE JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x98A SWAP5 POP PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP2 SWAP1 SWAP3 PUSH0 DUP1 PUSH2 0x945 PUSH1 0x20 DUP6 ADD PUSH2 0x5FB JUMP JUMPDEST PUSH2 0x952 PUSH1 0xA0 DUP7 ADD DUP7 PUSH2 0x78C JUMP JUMPDEST PUSH2 0x973 PUSH2 0x95E DUP9 PUSH2 0x5FB JUMP JUMPDEST SWAP2 PUSH2 0x472 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 PUSH2 0x8A2 JUMP JUMPDEST MLOAD SWAP2 PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP6 DUP7 SWAP3 GAS PUSH2 0xAD2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x8E5 JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x8DE JUMP JUMPDEST DUP3 ISZERO PUSH2 0xA2F JUMPI DUP2 ISZERO PUSH2 0x9FA JUMPI DUP1 PUSH2 0x8D8 JUMPI DUP5 PUSH2 0x9D1 DUP6 PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH2 0x318 PUSH2 0xA09 PUSH1 0x80 DUP7 ADD PUSH2 0x608 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x318 PUSH2 0xA3E PUSH1 0x20 DUP7 ADD PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 PUSH4 0x572B6C05 PUSH1 0xE0 SHL DUP3 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x24 DUP4 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP4 DUP4 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x7EF JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MSTORE MLOAD SWAP2 GAS STATICCALL PUSH0 MLOAD RETURNDATASIZE DUP3 PUSH2 0xAC6 JUMPI JUMPDEST POP DUP2 PUSH2 0xABF JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP PUSH0 PUSH2 0xAB5 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3F SWAP2 ADD CALLDATALOAD DIV GT PUSH2 0xAE2 JUMPI JUMP JUMPDEST INVALID JUMPDEST DUP2 SELFBALANCE LT PUSH2 0xB44 JUMPI PUSH0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL RETURNDATASIZE ISZERO PUSH2 0xB3F JUMPI RETURNDATASIZE PUSH2 0xB0E DUP2 PUSH2 0x832 JUMP JUMPDEST SWAP1 PUSH2 0xB1C PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x810 JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xB2D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP2 MLOAD SWAP2 SWAP1 PUSH1 0x41 DUP4 SUB PUSH2 0xB8C JUMPI PUSH2 0xB85 SWAP3 POP PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0xB96 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP2 PUSH1 0x2 SWAP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0xC19 JUMPI SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP6 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH0 SWAP3 DUP4 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xC0D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xC04 JUMPI SWAP2 DUP2 SWAP1 JUMP JUMPDEST POP DUP1 SWAP2 PUSH1 0x1 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP PUSH0 SWAP2 PUSH1 0x3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0xC2F PUSH2 0xC4A JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xD3B JUMPI JUMPDEST ISZERO PUSH2 0xCA5 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0xD35 DUP2 PUSH2 0x7F4 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0xC7C JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xD75 JUMPI PUSH2 0x605 SWAP1 PUSH2 0xF2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xE57 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xE43 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xE24 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDC5 JUMPI JUMPDEST POP POP POP PUSH2 0x605 SWAP3 POP SUB DUP3 PUSH2 0x810 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xDF2 PUSH0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xE0E JUMPI POP POP POP PUSH2 0x605 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xDF6 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x605 SWAP5 SWAP2 SWAP3 POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xD8E JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xE72 JUMPI PUSH2 0x605 SWAP1 PUSH2 0xF2B JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 SHR SWAP2 PUSH0 SWAP2 DUP1 DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0xF21 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xE43 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xE24 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEC1 JUMPI POP POP POP PUSH2 0x605 SWAP3 POP SUB DUP3 PUSH2 0x810 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xEEF PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xF0B JUMPI POP POP POP PUSH2 0x605 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xDB6 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xEF3 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xE8B JUMP JUMPDEST PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0xF60 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x7EF JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 AND SUB EXTCODESIZE PUSH2 0xEFA6 0xBD SUB RETURN INVALID PUSH13 0xF15880A080F91A50DBA397DAD5 0xBB 0xD1 LOG0 0xAC DUP3 PUSH28 0xD664736F6C6343000814003300000000000000000000000000000000 ",
							"sourceMap": "2733:14066:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;-1:-1:-1;;2733:14066:2;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;2733:14066:2;-1:-1:-1;2733:14066:2;;;624:7:5;2733:14066:2;;;;;;;538:107:5;2733:14066:2;;;;;;;;;;;;;;;5004:18;2733:14066;;;:::i;:::-;5004:18;:::i;:::-;5039:28;;;;;2733:14066;5039:43;;;;2733:14066;;;;;;;;;;5039:43;;;;;;:28;;-1:-1:-1;5039:28:2;;;2733:14066;-1:-1:-1;;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;2733:14066:2;;;-1:-1:-1;;;;;2733:14066:2;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6099:5:10;:41;:5;:41;:::i;:::-;6554:47;:8;:47;:::i;:::-;2733:14066:2;;;3070:141;;;;:::i;:::-;2733:14066;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5590:13:10;;2733:14066:2;;;;5625:4:10;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:14066:2;;;;;;;;6584:16:10;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7708:1;;;;;;-1:-1:-1;;;;;2733:14066:2;;7682:28;;7798:19;;;;;;8186:9;;;;;8169:26;;8165:121;;8453:16;;;8449:328;;2733:14066;8449:328;8754:11;;;:::i;:::-;2733:14066;8165:121;2733:14066;-1:-1:-1;;;8218:57:2;;2733:14066;8218:57;;2733:14066;;;;8186:9;2733:14066;;;;;;-1:-1:-1;8218:57:2;;;;;7819:3;7855:11;;;;7838:34;7855:11;;;;;;;:::i;:::-;:17;2733:14066;7838:34;;:::i;:::-;7910:11;7948:8;7901:29;7910:11;;;;;;:::i;:::-;7901:29;:::i;:::-;7948:8;;2733:14066;7948:8;7944:79;;7819:3;;;;:::i;:::-;7787:9;;;;;7944:79;7991:11;7976:32;7819:3;7991:11;;;;;;;:::i;7976:32::-;7944:79;;;;;2733:14066;;;;:::i;:::-;5911:13;;;;;2733:14066;5898:9;;:26;5894:121;;-1:-1:-1;11237:18:2;;;;:::i;:::-;11492:19;;;;;11488:115;;11621:7;;11617:101;;11736:12;;11732:109;;11938:33;;;2733:14066;11938:43;;;;2733:14066;11934:712;;;2733:14066;6029:24;;;;6025:87;;2733:14066;6025:87;2733:14066;-1:-1:-1;;;6076:25:2;;2733:14066;;6076:25;11934:712;-1:-1:-1;;;;;2733:14066:2;;-1:-1:-1;2733:14066:2;;;1121:7:5;2733:14066:2;;;;;;;;;;;;;12554:7;;12582:53;;12105:17;;;;12192:10;12279:44;12192:10;;;;;:::i;:::-;12296:12;;;;;;;;:::i;:::-;12279:44;12310:12;;;;;;:::i;:::-;2733:14066;;12279:44;;;12192:10;12279:44;;;;;:::i;:::-;;2733:14066;;12279:44;;;;;;:::i;:::-;12368:144;12154:11;;;;2733:14066;12368:144;;;;;12554:7;:::i;:::-;2733:14066;;;;;;;;;;;;-1:-1:-1;;;;;2733:14066:2;;;;12582:53;11934:712;;;;;11938:43;;;;;;:33;;-1:-1:-1;11938:33:2;;;11732:109;11813:12;;11775:51;11813:12;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11775:51:2;;-1:-1:-1;;;;;2733:14066:2;;;11775:51;;;2733:14066;;;;;;;;;;;;;;;;;11617:101;11655:48;11686:16;;;;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11655:48:2;;2733:14066;;;;11655:48;;;3070:141;2733:14066;;;;;;;;11488:115;11538:50;11562:10;;;;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11538:50:2;;-1:-1:-1;;;;;2733:14066:2;;;11538:50;;;2733:14066;11582:4;2733:14066;;;;;;;;;;;;5894:121;2733:14066;;-1:-1:-1;;;5947:57:2;;2733:14066;5947:57;;2733:14066;;;;5898:9;2733:14066;;;;;;8218:57;2733:14066;;;;;;;;;;;;;-1:-1:-1;;2733:14066:2;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;8967:457::-;;9274:10;2733:14066;;;;;;:::i;:::-;10079:10;;;2733:14066;9299:16;9255:30;9909:445;:415;2733:14066;;;;;:::i;:::-;10186:12;9966:334;10179:20;10186:12;;;:::i;10179:20::-;10221:16;9966:334;10221:16;;;;;;;:::i;:::-;3070:141;10269:12;;;;;;:::i;:::-;3070:141;;;:::i;:::-;10079:10;2733:14066;;;;10259:23;2733:14066;10111:13;2733:14066;9966:334;;;10079:10;9966:334;;10146:11;10111:13;10146:11;;;2733:14066;10111:13;;2733:14066;9966:334;;3070:141;2733:14066;3070:141;;;;;;;;;;;;2733:14066;3070:141;2733:14066;;;;;;;;;;3070:141;;;2733:14066;;3070:141;;;2733:14066;3070:141;;;2733:14066;3070:141;;;2733:14066;;3070:141;;2733:14066;;3070:141;;;;;2733:14066;3070:141;9966:334;2733:14066;9939:375;;9909:415;:::i;:::-;3070:141;10336:17;;;;;;:::i;3070:141::-;9909:445;;:::i;:::-;3070:141;;;;;;;:::i;:::-;10373:33;9274:10;;:::i;:::-;9255:30;:::i;:::-;9299:16;;:::i;:::-;9348:36;;;;8967:457;9234:183;9319:15;2733:14066;9319:15;2733:14066;;9299:35;;9234:183;;8967:457;:::o;9348:36::-;9359:25;9372:12;;;;;;:::i;:::-;-1:-1:-1;;;;;2733:14066:2;;;9359:25;-1:-1:-1;;;;;2733:14066:2;;9359:25;;9348:36;;;3070:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;2733:14066;;;3070:141;;;;;;;;;2733:14066;3070:141;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;2079:95:10;3070:141:2;;;;;;;;;;;;;:::o;:::-;;2733:14066;;;;;;3070:141;;;;;;;;;;;;;:::o;:::-;;;;;;2733:14066;;-1:-1:-1;;2733:14066:2;3070:141;;;:::o;:::-;;;;;;;:::i;:::-;2733:14066;3070:141;2733:14066;;3070:141;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;3070:141:2;;;;;;:::o;:::-;;-1:-1:-1;3070:141:2;;;:::o;:::-;2733:14066;;;3070:141;;;;;;;;2733:14066;;;;;;3070:141;;;2733:14066;;;;;;;;;;;:::o;11009:1643::-;;;2733:14066;11237:18;;;;:::i;:::-;11449:402;;;11009:1643;11938:33;;;11009:1643;11938:43;;;;11009:1643;11934:712;;;11009:1643;;:::o;11934:712::-;-1:-1:-1;;;;;2733:14066:2;;-1:-1:-1;2733:14066:2;;;1121:7:5;2733:14066:2;;;;;;;;;;;;;12554:7;;-1:-1:-1;12582:53:2;;12105:17;12192:10;2733:14066;12192:10;;;;;;:::i;:::-;12296:12;;;;;;:::i;:::-;12279:44;12310:12;;;:::i;:::-;2733:14066;12279:44;12232:13;2733:14066;12279:44;;;12192:10;12279:44;;;;;:::i;:::-;12368:144;12232:13;;;;2733:14066;12154:11;;;;2733:14066;12368:144;;;;;12554:7;:::i;:::-;12232:13;2733:14066;;;;;;;;;;;;-1:-1:-1;;;;;2733:14066:2;;12582:53;11009:1643::o;11938:43::-;;;;;;:33;;-1:-1:-1;11938:33:2;;;11449:402;11492:19;;11488:115;;11621:7;;11617:101;;11736:12;11449:402;11732:109;11813:12;;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11775:51:2;;-1:-1:-1;;;;;2733:14066:2;;;11775:51;;;2733:14066;;;;;;;;;8218:57;11617:101;11655:48;11686:16;;;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11655:48:2;;2733:14066;;;;11655:48;;;3070:141;2733:14066;;;;;;;;11488:115;11538:50;11562:10;;;;;:::i;:::-;2733:14066;;-1:-1:-1;;;11538:50:2;;-1:-1:-1;;;;;2733:14066:2;;;11538:50;;;2733:14066;11582:4;2733:14066;;;;;;;;;;;;12875:1104;2733:14066;;12986:66;;;;;;;;;;13045:4;12986:66;;;2733:14066;12986:66;;;2733:14066;3070:141;;;;;;;;;;;;12986:66;3070:141;-1:-1:-1;3070:141:2;2733:14066;3070:141;13185:722;;;;-1:-1:-1;13185:722:2;;13924:29;;;12875:1104;13924:48;;;;13917:55;12875:1104;:::o;13924:48::-;13957:15;;;;12875:1104;:::o;13924:29::-;12986:66;-1:-1:-1;13935:18:2;;-1:-1:-1;13924:29:2;;;14599:2198;;16351:11;16365:2;14599:2198;16351:11;2733:14066;;-1:-1:-1;16337:454:2;;14599:2198::o;16337:454::-;16731:50;1531:331:3;1616:21;;:30;1612:109;;1750:33;;;;;;;;-1:-1:-1;;;;;2733:14066:2;1750:33:3;;2733:14066:2;;;;;;;;:::i;:::-;;3070:141;2733:14066;;3070:141;;;:::i;:::-;2733:14066;;1750:33:3;2733:14066:2;;;;;;1797:8:3;1793:63;;1531:331::o;1793:63::-;2733:14066:2;;-1:-1:-1;;;1828:17:3;;;;;2733:14066:2;;;1612:109:3;2733:14066:2;;-1:-1:-1;;;1669:41:3;;1624:4;1669:41;;;2733:14066:2;;;1669:41:3;2129:766:9;2733:14066:2;;;2129:766:9;2276:2;2256:22;;2276:2;;2739:25;2539:180;;;;;;;;;;;;;;;-1:-1:-1;2539:180:9;2739:25;;:::i;:::-;2732:32;;;;;:::o;2252:637::-;2795:83;;2811:1;2795:83;2815:35;2795:83;;:::o;5140:1530::-;;;6199:66;6186:79;;6182:164;;2733:14066:2;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6457:24:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2733:14066:2;;6495:20:9;6491:113;;6614:49;;5140:1530;:::o;6491:113::-;6531:62;;;6457:24;6531:62;;:::o;6457:24::-;2733:14066:2;;;;;;;;;;6182:164:9;6281:54;;;6297:1;6281:54;6301:30;6281:54;;:::o;4917:176:10:-;3515:233:11;4917:176:10;5053:20;;:::i;:::-;3515:233:11;;;;-1:-1:-1;;;3515:233:11;;;;;;;;;;;4917:176:10;:::o;3845:262::-;3929:4;3938:11;-1:-1:-1;;;;;2733:14066:2;3921:28:10;;:63;;3845:262;3917:184;;;4007:22;4000:29;:::o;3917:184::-;2733:14066:2;;4204:80:10;;;2733:14066:2;2079:95:10;2733:14066:2;;4226:11:10;2733:14066:2;2079:95:10;;2733:14066:2;4239:14:10;2079:95;;;2733:14066:2;4255:13:10;2079:95;;;2733:14066:2;3929:4:10;2733:14066:2;2079:95:10;;2733:14066:2;;4204:80:10;;;;;:::i;:::-;2733:14066:2;4194:91:10;;4060:30;:::o;3921:63::-;3970:14;;3953:13;:31;3921:63;;3385:267:6;1390:66;3508:46;;1390:66;;3577:15;;;:::i;3504:142::-;2733:14066:2;;;;1390:66:6;;;;;;;;;;;;;;;;3504:142;1390:66;;;;;;;;;2733:14066:2;;;;;1390:66:6;2733:14066:2;;;;1390:66:6;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;2733:14066:2;1390:66:6;;;;;;;2733:14066:2;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1390:66:6;;;;;;2733:14066:2;1390:66:6;;;;;;;;3385:267;1390:66;3508:46;;1390:66;;3577:15;;;:::i;3504:142::-;-1:-1:-1;2733:14066:2;;6584:16:10;1390:66:6;;;;;;-1:-1:-1;;1390:66:6;;;;;;;;3504:142;1390:66;;;;;;;;;2733:14066:2;;;;;1390:66:6;2733:14066:2;;;;1390:66:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;6584:16:10;1390:66:6;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;2078:405;2688:4;2652:40;;2706:11;2715:2;2706:11;;2702:69;;3070:141:2;2733:14066;3070:141;;;;;;;;;;;;;;;2367:90:6;;2311:2;2733:14066:2;;2367:90:6;2078:405;:::o;2702:69::-;2733:14066:2;;-1:-1:-1;;;2740:20:6;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "801600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"eip712Domain()": "infinite",
								"execute((address,address,uint256,uint256,uint48,bytes,bytes))": "infinite",
								"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": "infinite",
								"nonces(address)": "2445",
								"verify((address,address,uint256,uint256,uint48,bytes,bytes))": "infinite"
							},
							"internal": {
								"_checkForwardedGas(uint256,struct ERC2771Forwarder.ForwardRequestData calldata)": "48",
								"_execute(struct ERC2771Forwarder.ForwardRequestData calldata,bool)": "infinite",
								"_isTrustedByTarget(address)": "infinite",
								"_recoverForwardRequestSigner(struct ERC2771Forwarder.ForwardRequestData calldata)": "infinite",
								"_validate(struct ERC2771Forwarder.ForwardRequestData calldata)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "160"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SLT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 10,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 10,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP9",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 10
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1930"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1932"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1934"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1936"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1938"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1941"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ASSIGNIMMUTABLE",
									"source": 2,
									"value": "1944"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "RETURN",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "29"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "28"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "31"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "35"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "35"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "37"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP4",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "305A27A9"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "E0"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SHL",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 2733,
									"end": 16799,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "37"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "31"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "41"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "42"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "45"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "46"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "48"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "49"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "48"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "49"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "46"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "51"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "52"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "F8"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "55"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "52"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "51"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "44"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "45"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "57"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "56"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "42"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "7F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "41"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "33"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "35"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "59"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "24"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "68"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "69"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "72"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "EQ",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "74"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "76"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "77"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "76"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "77"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "74"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "79"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP9",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "54"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP8",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP7",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "79"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "72"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHR",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "84"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "85"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "73"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "85"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "84"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "70"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "4E487B71"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "E0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SHL",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "22"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "tag",
									"source": 2,
									"value": "68"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH",
									"source": 2,
									"value": "7F"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "69"
								},
								{
									"begin": 2733,
									"end": 16799,
									"name": "JUMP",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a316033b61efa6bd03f3fe6cf15880a080f91a50dba397dad5bbd1a0ac827bd664736f6c63430008140033",
									".code": [
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "46"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "19D8D38C"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "7ECEBE00"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "84B0196E"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "CCF96B4A"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "DF905CAF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 5004,
											"end": 5022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1941"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1944"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "F8"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "93"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7682,
											"end": 7710,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7682,
											"end": 7710,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "tag",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 8169,
											"end": 8195,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8169,
											"end": 8195,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "tag",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 8754,
											"end": 8765,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70647F79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "tag",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "107"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 7855,
											"end": 7866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "tag",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7872,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 7838,
											"end": 7872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 7910,
											"end": 7921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 7901,
											"end": 7930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "tag",
											"source": 2,
											"value": "118"
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 7819,
											"end": 7822,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "106"
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "tag",
											"source": 2,
											"value": "120"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "116"
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 7991,
											"end": 8002,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5924,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 11237,
											"end": 11255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "tag",
											"source": 2,
											"value": "128"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "PUSH",
											"source": 2,
											"value": "842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C"
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12192,
											"end": 12202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 12296,
											"end": 12308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "tag",
											"source": 2,
											"value": "147"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12310,
											"end": 12322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 12554,
											"end": 12561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "tag",
											"source": 2,
											"value": "133"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 11813,
											"end": 11825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6422D02B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "tag",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 11686,
											"end": 11702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A777AC5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 11562,
											"end": 11572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2650CD1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11586,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "tag",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70647F79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "DE"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 10186,
											"end": 10198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 10221,
											"end": 10237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "tag",
											"source": 2,
											"value": "180"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 10269,
											"end": 10281,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "tag",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "181"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10259,
											"end": 10282,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP11",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "tag",
											"source": 2,
											"value": "176"
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9939,
											"end": 10314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9939,
											"end": 10314,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 9909,
											"end": 10324,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "tag",
											"source": 2,
											"value": "174"
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "182"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 10336,
											"end": 10353,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "183"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 9909,
											"end": 10354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "185"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10373,
											"end": 10406,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 9274,
											"end": 9284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 9255,
											"end": 9285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 9299,
											"end": 9315,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "tag",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9319,
											"end": 9334,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9319,
											"end": 9334,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9334,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9334,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 9372,
											"end": 9384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "189"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "188"
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "1E"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B71"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 11237,
											"end": 11255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "tag",
											"source": 2,
											"value": "217"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "PUSH",
											"source": 2,
											"value": "842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C"
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12192,
											"end": 12202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "tag",
											"source": 2,
											"value": "221"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 12296,
											"end": 12308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "tag",
											"source": 2,
											"value": "222"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 12310,
											"end": 12322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "tag",
											"source": 2,
											"value": "224"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "148"
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "223"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 12554,
											"end": 12561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "tag",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "tag",
											"source": 2,
											"value": "215"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "216"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "tag",
											"source": 2,
											"value": "213"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "214"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 11813,
											"end": 11825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6422D02B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "tag",
											"source": 2,
											"value": "229"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 11686,
											"end": 11702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A777AC5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "tag",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 11562,
											"end": 11572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2650CD1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11582,
											"end": 11586,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "572B6C05"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13045,
											"end": 13049,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "tag",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13917,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "tag",
											"source": 2,
											"value": "243"
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "tag",
											"source": 2,
											"value": "241"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 13935,
											"end": 13953,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13935,
											"end": 13953,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16351,
											"end": 16362,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 16365,
											"end": 16367,
											"name": "PUSH",
											"source": 2,
											"value": "3F"
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16351,
											"end": 16362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16731,
											"end": 16781,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 1531,
											"end": 1862,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 1531,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1637,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1637,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1646,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 2733,
											"end": 16799,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "251"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1797,
											"end": 1805,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1531,
											"end": 1862,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "tag",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "tag",
											"source": 2,
											"value": "249"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "253"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "tag",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CD786059"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1624,
											"end": 1628,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2256,
											"end": 2278,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2256,
											"end": 2278,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "BYTE",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 2739,
											"end": 2764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "tag",
											"source": 9,
											"value": "258"
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2252,
											"end": 2889,
											"name": "tag",
											"source": 9,
											"value": "256"
										},
										{
											"begin": 2252,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2811,
											"end": 2812,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2815,
											"end": 2850,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 9,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 9,
											"value": "263"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 9,
											"value": "261"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATACOPY",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 9,
											"value": "259"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 10,
											"value": "265"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4917,
											"end": 5093,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1934"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1930"
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4000,
											"end": 4029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1936"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1938"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 4204,
											"end": 4284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "tag",
											"source": 10,
											"value": "270"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4060,
											"end": 4090,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4060,
											"end": 4090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 10,
											"value": "266"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1932"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "271"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "279"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1390,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "281"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "285"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "286"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "286"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "285"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "279"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "274"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "7F"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "275"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "288"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "288"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "276"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "279"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1390,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "B10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "301"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "303"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "282"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "303"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "291"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "7F"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "292"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 6,
											"value": "45"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "tag",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2733,
											"end": 16799,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e",
							"execute((address,address,uint256,uint256,uint48,bytes,bytes))": "df905caf",
							"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": "ccf96b4a",
							"nonces(address)": "7ecebe00",
							"verify((address,address,uint256,uint256,uint48,bytes,bytes))": "19d8d38c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"name\":\"ERC2771ForwarderExpiredRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ERC2771ForwarderInvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ERC2771ForwarderMismatchedValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ERC2771UntrustfulTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecutedForwardRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A forwarder compatible with ERC2771 contracts. See {ERC2771Context}. This forwarder operates on forward requests that include: * `from`: An address to operate on behalf of. It is required to be equal to the request signer. * `to`: The address that should be called. * `value`: The amount of native token to attach with the requested call. * `gas`: The amount of gas limit that will be forwarded with the requested call. * `nonce`: A unique transaction ordering identifier to avoid replayability and request invalidation. * `deadline`: A timestamp after which the request is not executable anymore. * `data`: Encoded `msg.data` to send with the requested call. Relayers are able to submit batches if they are processing a high volume of requests. With high throughput, relayers may run into limitations of the chain such as limits on the number of transactions in the mempool. In these cases the recommendation is to distribute the load among multiple accounts. NOTE: Batching requests includes an optional refund for unused `msg.value` that is achieved by performing a call with empty calldata. While this is within the bounds of ERC-2771 compliance, if the refund receiver happens to consider the forwarder a trusted forwarder, it MUST properly handle `msg.data.length == 0`. `ERC2771Context` in OpenZeppelin Contracts versions prior to 4.9.3 do not handle this properly. ==== Security Considerations If a relayer submits a forward request, it should be willing to pay up to 100% of the gas amount specified in the request. This contract does not implement any kind of retribution for this gas, and it is assumed that there is an out of band incentive for relayers to pay for execution on behalf of signers. Often, the relayer is operated by a project that will consider it a user acquisition cost. By offering to pay for gas, relayers are at risk of having that gas used by an attacker toward some other purpose that is not aligned with the expected out of band incentives. If you operate a relayer, consider whitelisting target contracts and function selectors. When relaying ERC-721 or ERC-1155 transfers specifically, consider rejecting the use of the `data` field, since it can be used to execute arbitrary code.\",\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC2771ForwarderExpiredRequest(uint48)\":[{\"details\":\"The request `deadline` has expired.\"}],\"ERC2771ForwarderInvalidSigner(address,address)\":[{\"details\":\"The request `from` doesn't match with the recovered `signer`.\"}],\"ERC2771ForwarderMismatchedValue(uint256,uint256)\":[{\"details\":\"The `requestedValue` doesn't match with the available `msgValue`.\"}],\"ERC2771UntrustfulTarget(address,address)\":[{\"details\":\"The request target doesn't trust the `forwarder`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"ExecutedForwardRequest(address,uint256,bool)\":{\"details\":\"Emitted when a `ForwardRequest` is executed. NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline, or simply a revert in the requested call. The contract guarantees that the relayer is not able to force the requested call to run out of gas.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"See {EIP712-constructor}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"execute((address,address,uint256,uint256,uint48,bytes,bytes))\":{\"details\":\"Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas provided to the requested call may not be exactly the amount requested, but the call will not run out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed. Requirements: - The request value should be equal to the provided `msg.value`. - The request should be valid according to {verify}.\"},\"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)\":{\"details\":\"Batch version of {execute} with optional refunding and atomic execution. In case a batch contains at least one invalid request (see {verify}), the request will be skipped and the `refundReceiver` parameter will receive back the unused requested value at the end of the execution. This is done to prevent reverting the entire batch when a request is invalid or has already been submitted. If the `refundReceiver` is the `address(0)`, this function will revert when at least one of the requests was not valid instead of skipping it. This could be useful if a batch is required to get executed atomically (at least at the top-level). For example, refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids including reverted transactions. Requirements: - The sum of the requests' values should be equal to the provided `msg.value`. - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address. NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for the first-level forwarded calls. In case a forwarded request calls to a contract with another subcall, the second-level call may revert without the top-level call reverting.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"},\"verify((address,address,uint256,uint256,uint48,bytes,bytes))\":{\"details\":\"Returns `true` if a request is valid for a provided `signature` at the current block timestamp. A transaction is considered valid when the target trusts this forwarder, the request hasn't expired (deadline is not met), and the signer matches the `from` parameter of the signed request. NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund receiver is provided.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":\"ERC2771Forwarder\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":{\"keccak256\":\"0x3cf982133d4c9c92e6cd0f3dd8399791b7858c09dfe6ab5c6073e7f24475aa78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb2e41b4db6b6020a4406b0bc1c3e959554321650a392c30ee506e464abe6f27\",\"dweb:/ipfs/QmerRLZmojENXg816AjVBwmjWpUFUHPTGFboirRCotZr3L\"]},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":{\"keccak256\":\"0xd7efed2df83914cb6354b0ecddbabbf1cd0b7263bbec797a31e2251d3bf1c5e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7474f3651acee5c62a1c360f11c8718e5680a9f050fbec1ca82796402b528314\",\"dweb:/ipfs/QmW3vpvTcARQnbbQgJ8B7zrZeqRJ7xifKD5egivq2EBbBY\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1946,
								"contract": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol:ERC2771Forwarder",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 1948,
								"contract": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol:ERC2771Forwarder",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 925,
								"contract": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol:ERC2771Forwarder",
								"label": "_nonces",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":195:6261  library Address {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":195:6261  library Address {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200fc721649d91336432bd92f9a39b4424a68820c069d7d4d1802447708fe21a1064736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200fc721649d91336432bd92f9a39b4424a68820c069d7d4d1802447708fe21a1064736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xC7 0x21 PUSH5 0x9D91336432 0xBD SWAP3 0xF9 LOG3 SWAP12 PREVRANDAO 0x24 0xA6 DUP9 KECCAK256 0xC0 PUSH10 0xD7D4D1802447708FE21A LT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "195:6066:3:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212200fc721649d91336432bd92f9a39b4424a68820c069d7d4d1802447708fe21a1064736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xC7 0x21 PUSH5 0x9D91336432 0xBD SWAP3 0xF9 LOG3 SWAP12 PREVRANDAO 0x24 0xA6 DUP9 KECCAK256 0xC0 PUSH10 0xD7D4D1802447708FE21A LT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "195:6066:3:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ASSIGNIMMUTABLE",
									"source": 3,
									"value": "library_deploy_address"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200fc721649d91336432bd92f9a39b4424a68820c069d7d4d1802447708fe21a1064736f6c63430008140033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 925,
								"contract": "lib/openzeppelin-contracts/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122005ba95f2dbc55fcd75455d3f360b3c8e76aabe73b33560f010d0b52b0bce67b964736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122005ba95f2dbc55fcd75455d3f360b3c8e76aabe73b33560f010d0b52b0bce67b964736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV 0xBA SWAP6 CALLCODE 0xDB 0xC5 PUSH0 0xCD PUSH22 0x455D3F360B3C8E76AABE73B33560F010D0B52B0BCE67 0xB9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "1255:3053:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea264697066735822122005ba95f2dbc55fcd75455d3f360b3c8e76aabe73b33560f010d0b52b0bce67b964736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV 0xBA SWAP6 CALLCODE 0xDB 0xC5 PUSH0 0xCD PUSH22 0x455D3F360B3C8E76AABE73B33560F010D0B52B0BCE67 0xB9 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "1255:3053:6:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ASSIGNIMMUTABLE",
									"source": 6,
									"value": "library_deploy_address"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "RETURN",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "REVERT",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122005ba95f2dbc55fcd75455d3f360b3c8e76aabe73b33560f010d0b52b0bce67b964736f6c63430008140033",
									".code": [
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220718f03211aad123fa6091d8478a0cdf560d18eceebf9388c4c768b598a8ba88d64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220718f03211aad123fa6091d8478a0cdf560d18eceebf9388c4c768b598a8ba88d64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x8F03211AAD123FA6091D8478A0CDF560D18E 0xCE 0xEB 0xF9 CODESIZE DUP13 0x4C PUSH23 0x8B598A8BA88D64736F6C63430008140033000000000000 ",
							"sourceMap": "1245:2685:7:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220718f03211aad123fa6091d8478a0cdf560d18eceebf9388c4c768b598a8ba88d64736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH18 0x8F03211AAD123FA6091D8478A0CDF560D18E 0xCE 0xEB 0xF9 CODESIZE DUP13 0x4C PUSH23 0x8B598A8BA88D64736F6C63430008140033000000000000 ",
							"sourceMap": "1245:2685:7:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "library_deploy_address"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "RETURN",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "REVERT",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220718f03211aad123fa6091d8478a0cdf560d18eceebf9388c4c768b598a8ba88d64736f6c63430008140033",
									".code": [
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200fc890ee1f8f13154b01c602c66ffb0c80e79a135c23ab5e86923887474a02fd64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200fc890ee1f8f13154b01c602c66ffb0c80e79a135c23ab5e86923887474a02fd64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xC8 SWAP1 0xEE 0x1F DUP16 SGT ISZERO 0x4B ADD 0xC6 MUL 0xC6 PUSH16 0xFB0C80E79A135C23AB5E86923887474A MUL REVERT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "251:2847:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212200fc890ee1f8f13154b01c602c66ffb0c80e79a135c23ab5e86923887474a02fd64736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF 0xC8 SWAP1 0xEE 0x1F DUP16 SGT ISZERO 0x4B ADD 0xC6 MUL 0xC6 PUSH16 0xFB0C80E79A135C23AB5E86923887474A MUL REVERT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "251:2847:8:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "library_deploy_address"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200fc890ee1f8f13154b01c602c66ffb0c80e79a135c23ab5e86923887474a02fd64736f6c63430008140033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bcfef5dfdc07e996fe7e676f6313fa3a0b53585b9a7dd0b9dd89d5bfc815707564736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220bcfef5dfdc07e996fe7e676f6313fa3a0b53585b9a7dd0b9dd89d5bfc815707564736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC INVALID CREATE2 0xDF 0xDC SMOD 0xE9 SWAP7 INVALID PUSH31 0x676F6313FA3A0B53585B9A7DD0B9DD89D5BFC815707564736F6C6343000814 STOP CALLER ",
							"sourceMap": "344:7386:9:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220bcfef5dfdc07e996fe7e676f6313fa3a0b53585b9a7dd0b9dd89d5bfc815707564736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC INVALID CREATE2 0xDF 0xDC SMOD 0xE9 SWAP7 INVALID PUSH31 0x676F6313FA3A0B53585B9A7DD0B9DD89D5BFC815707564736F6C6343000814 STOP CALLER ",
							"sourceMap": "344:7386:9:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "library_deploy_address"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bcfef5dfdc07e996fe7e676f6313fa3a0b53585b9a7dd0b9dd89d5bfc815707564736f6c63430008140033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1946,
								"contract": "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 1948,
								"contract": "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209f2231fb511cb44574e93f1984c4c7316634f259046834ac359067df368d9fba64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209f2231fb511cb44574e93f1984c4c7316634f259046834ac359067df368d9fba64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 0x22 BALANCE 0xFB MLOAD SHR 0xB4 GASLIMIT PUSH21 0xE93F1984C4C7316634F259046834AC359067DF368D SWAP16 0xBA PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "521:3235:11:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212209f2231fb511cb44574e93f1984c4c7316634f259046834ac359067df368d9fba64736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP16 0x22 BALANCE 0xFB MLOAD SHR 0xB4 GASLIMIT PUSH21 0xE93F1984C4C7316634F259046834AC359067DF368D SWAP16 0xBA PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "521:3235:11:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "library_deploy_address"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209f2231fb511cb44574e93f1984c4c7316634f259046834ac359067df368d9fba64736f6c63430008140033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205ee69b08410936eacbef1a52fafa851d2b8725579be0ae35c3b2a4ef29da4fad64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212205ee69b08410936eacbef1a52fafa851d2b8725579be0ae35c3b2a4ef29da4fad64736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E 0xE6 SWAP12 ADDMOD COINBASE MULMOD CALLDATASIZE 0xEA 0xCB 0xEF BYTE MSTORE STATICCALL STATICCALL DUP6 SAR 0x2B DUP8 0x25 JUMPI SWAP12 0xE0 0xAE CALLDATALOAD 0xC3 0xB2 LOG4 0xEF 0x29 0xDA 0x4F 0xAD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "203:14914:12:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212205ee69b08410936eacbef1a52fafa851d2b8725579be0ae35c3b2a4ef29da4fad64736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5E 0xE6 SWAP12 ADDMOD COINBASE MULMOD CALLDATASIZE 0xEA 0xCB 0xEF BYTE MSTORE STATICCALL STATICCALL DUP6 SAR 0x2B DUP8 0x25 JUMPI SWAP12 0xE0 0xAE CALLDATALOAD 0xC3 0xB2 LOG4 0xEF 0x29 0xDA 0x4F 0xAD PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "203:14914:12:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ASSIGNIMMUTABLE",
									"source": 12,
									"value": "library_deploy_address"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205ee69b08410936eacbef1a52fafa851d2b8725579be0ae35c3b2a4ef29da4fad64736f6c63430008140033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209ccfeffe5ffb825c1ad4eafa39870ab758f5570cbadbfc0c05d8e177d7d906d564736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209ccfeffe5ffb825c1ad4eafa39870ab758f5570cbadbfc0c05d8e177d7d906d564736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xCF 0xEF INVALID PUSH0 0xFB DUP3 0x5C BYTE 0xD4 0xEA STATICCALL CODECOPY DUP8 EXP 0xB7 PC CREATE2 JUMPI 0xC 0xBA 0xDB 0xFC 0xC SDIV 0xD8 0xE1 PUSH24 0xD7D906D564736F6C63430008140033000000000000000000 ",
							"sourceMap": "216:1047:13:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212209ccfeffe5ffb825c1ad4eafa39870ab758f5570cbadbfc0c05d8e177d7d906d564736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xCF 0xEF INVALID PUSH0 0xFB DUP3 0x5C BYTE 0xD4 0xEA STATICCALL CODECOPY DUP8 EXP 0xB7 PC CREATE2 JUMPI 0xC 0xBA 0xDB 0xFC 0xC SDIV 0xD8 0xE1 PUSH24 0xD7D906D564736F6C63430008140033000000000000000000 ",
							"sourceMap": "216:1047:13:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "library_deploy_address"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209ccfeffe5ffb825c1ad4eafa39870ab758f5570cbadbfc0c05d8e177d7d906d564736f6c63430008140033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Dummy.sol": {
				"Dummy": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint48",
									"name": "deadline",
									"type": "uint48"
								}
							],
							"name": "ERC2771ForwarderExpiredRequest",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								}
							],
							"name": "ERC2771ForwarderInvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestedValue",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "msgValue",
									"type": "uint256"
								}
							],
							"name": "ERC2771ForwarderMismatchedValue",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "forwarder",
									"type": "address"
								}
							],
							"name": "ERC2771UntrustfulTarget",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "success",
									"type": "bool"
								}
							],
							"name": "ExecutedForwardRequest",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "execute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData[]",
									"name": "requests",
									"type": "tuple[]"
								},
								{
									"internalType": "address payable",
									"name": "refundReceiver",
									"type": "address"
								}
							],
							"name": "executeBatch",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "forwarder",
									"type": "address"
								}
							],
							"name": "isTrustedForwarder",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_number",
									"type": "uint256"
								}
							],
							"name": "setNumber",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "trustedForwarder",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "value",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "gas",
											"type": "uint256"
										},
										{
											"internalType": "uint48",
											"name": "deadline",
											"type": "uint48"
										},
										{
											"internalType": "bytes",
											"name": "data",
											"type": "bytes"
										},
										{
											"internalType": "bytes",
											"name": "signature",
											"type": "bytes"
										}
									],
									"internalType": "struct ERC2771Forwarder.ForwardRequestData",
									"name": "request",
									"type": "tuple"
								}
							],
							"name": "verify",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC2771ForwarderExpiredRequest(uint48)": [
								{
									"details": "The request `deadline` has expired."
								}
							],
							"ERC2771ForwarderInvalidSigner(address,address)": [
								{
									"details": "The request `from` doesn't match with the recovered `signer`."
								}
							],
							"ERC2771ForwarderMismatchedValue(uint256,uint256)": [
								{
									"details": "The `requestedValue` doesn't match with the available `msgValue`."
								}
							],
							"ERC2771UntrustfulTarget(address,address)": [
								{
									"details": "The request target doesn't trust the `forwarder`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"ExecutedForwardRequest(address,uint256,bool)": {
								"details": "Emitted when a `ForwardRequest` is executed. NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline, or simply a revert in the requested call. The contract guarantees that the relayer is not able to force the requested call to run out of gas."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"execute((address,address,uint256,uint256,uint48,bytes,bytes))": {
								"details": "Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas provided to the requested call may not be exactly the amount requested, but the call will not run out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed. Requirements: - The request value should be equal to the provided `msg.value`. - The request should be valid according to {verify}."
							},
							"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": {
								"details": "Batch version of {execute} with optional refunding and atomic execution. In case a batch contains at least one invalid request (see {verify}), the request will be skipped and the `refundReceiver` parameter will receive back the unused requested value at the end of the execution. This is done to prevent reverting the entire batch when a request is invalid or has already been submitted. If the `refundReceiver` is the `address(0)`, this function will revert when at least one of the requests was not valid instead of skipping it. This could be useful if a batch is required to get executed atomically (at least at the top-level). For example, refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids including reverted transactions. Requirements: - The sum of the requests' values should be equal to the provided `msg.value`. - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address. NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for the first-level forwarded calls. In case a forwarded request calls to a contract with another subcall, the second-level call may revert without the top-level call reverting."
							},
							"isTrustedForwarder(address)": {
								"details": "Indicates whether any particular address is the trusted forwarder."
							},
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							},
							"trustedForwarder()": {
								"details": "Returns the address of the trusted forwarder."
							},
							"verify((address,address,uint256,uint256,uint48,bytes,bytes))": {
								"details": "Returns `true` if a request is valid for a provided `signature` at the current block timestamp. A transaction is considered valid when the target trusts this forwarder, the request hasn't expired (deadline is not met), and the signer matches the `from` parameter of the signed request. NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund receiver is provided."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  0x0180\n  dup1\n  0x40\n  mstore\n  jumpi(tag_4, callvalue)\n  tag_6\n  dup2\n  tag_1\n  jump\t// in\ntag_6:\n  0x07\n  dup2\n  mstore\n  0x20\n  dup2\n  add\n  shl(0xc8, 0x466163746f7279)\n  dup2\n  mstore\n  mload(0x40)\n  swap2\n  tag_7\n  dup4\n  tag_1\n  jump\t// in\ntag_7:\n  0x01\n  dup4\n  mstore\n  0x20\n  dup4\n  add\n  swap2\n  shl(0xf8, 0x31)\n  dup4\n  mstore\n    /* \"src/Dummy.sol\":295:337  0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2 */\n  0xab8483f64d9c6d1ecf9b849ae677dd3315835cb2\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1255:1292  _trustedForwarder = trustedForwarder_ */\n  0x80\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_8\n  dup3\n  tag_2\n  jump\t// in\ntag_8:\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  swap1\n  0x0140\n  swap2\n  dup3\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_9\n  dup6\n  tag_3\n  jump\t// in\ntag_9:\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  swap3\n  0x0160\n  swap4\n  dup5\n  mstore\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  swap3\n  0x0100\n  swap5\n  dup5\n  dup7\n  mstore\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  swap3\n  0x0120\n  swap1\n  dup5\n  dup3\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xc0\n  mstore\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload(0x40)\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  swap5\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  0x20\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  dup7\n  add\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  swap2\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n  dup4\n  mstore\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  0x40\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup8\n  add\n  mstore\n  0x60\n  dup7\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1255:1292  _trustedForwarder = trustedForwarder_ */\n  0x80\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  dup7\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xa0\n  dup7\n  add\n  mstore\n  0xa0\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  dup6\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xc0\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup6\n  add\n  swap5\n  dup1\n  dup7\n  lt\n  0x01\n  dup1\n  0x40\n  shl\n  sub\n  dup8\n  gt\n  or\n  tag_10\n  jumpi\n  dup6\n  0x40\n  mstore\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  keccak256\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xa0\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xe0\n  mstore\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dataSize(sub_0)\n  swap5\n  dup6\n  dataOffset(sub_0)\n  dup7\n  codecopy\n    /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1255:1292  _trustedForwarder = trustedForwarder_ */\n  0x80\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n  dup6\n  assignImmutable(\"0x77c32b454bb61eb9df9e3848d0ded3e59753acda90ae58befe564733aec82e4c\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0xa0\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n  dup6\n  assignImmutable(\"0x267a3e43955d5ac713043fd32df2bde19a025701ea343c4467194e9c98b8fb1f\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xc0\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n  dup6\n  assignImmutable(\"0xa719e06aa69fe5611e041976601e5776ff743aefe35a016a2b5dfe8f33a5e5e9\")\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xe0\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mload\n  dup6\n  assignImmutable(\"0x181e1e3a457d5cef39dddc6213a1adbc86226ab3d6c2e46b6b95ce30e1273fad\")\n  mload\n  dup5\n  assignImmutable(\"0xd60579bb341d0b58542358d81fbcda6dc7dd39e7447d85d21541e19a3877254c\")\n  mload\n  dup4\n  assignImmutable(\"0x995833c2a2aeb937fbc4a128bd490bc0fc9957bdfd709bbb221dc0127b96401e\")\n  mload\n  dup3\n  assignImmutable(\"0xcb53285b0d93959fe2b39d776c53c3ac62f51d590c6169c94a63eeb4e0302d5e\")\n  mload\n  dup2\n  assignImmutable(\"0x4e5048aa6ab9ce5117b653ef20524273bce16c451ef1a9c6d4f6b8e5e9fe0ca4\")\n  return\ntag_10:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_4:\n  0x00\n  dup1\n  revert\ntag_1:\n  0x40\n  dup2\n  add\n  swap1\n  dup2\n  lt\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  or\n  tag_10\n  jumpi\n  0x40\n  mstore\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_2:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n  swap2\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  dup3\n  dup2\n  lt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  iszero\n  tag_14\n  jumpi\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  pop\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup3\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  tag_16\n  jumpi\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_18\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_18:\n  dup3\n  not(0x00)\n  swap2\n  sub\n  0x03\n  shl\n  shl\n  and\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_16:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap1\n  mload(0x40)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x00\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap4\ntag_20:\n  dup3\n  dup6\n  lt\n  tag_21\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x00\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_21:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_20)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_14:\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup2\n  gt\n  tag_10\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x00\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap3\n  dup4\n  sload\n  swap3\n  0x01\n  swap4\n  dup5\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_25\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_26:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup4\n  dup3\n  lt\n  eq\n  tag_27\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_29\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_30:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  pop\n  dup2\n  0x1f\n  dup5\n  gt\n  0x01\n  eq\n  tag_31\n  jumpi\n  pop\n  swap3\n  dup3\n  swap4\n  swap2\n  dup4\n  swap3\n  dup7\n  swap5\n  tag_33\n  jumpi\ntag_34:\n  pop\n  pop\n  shl\n  swap2\n  not(0x00)\n  swap1\n  0x03\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_33:\n  add\n  mload\n  swap3\n  pop\n  0x00\n  dup1\n  jump(tag_34)\ntag_31:\n  swap2\n  swap1\n  dup4\n  not(0x1f)\n  dup2\n  and\n  dup8\n  dup1\n  mstore\n  dup5\n  dup9\n  keccak256\n  swap5\n  dup9\n  swap1\ntag_36:\n  dup9\n  dup4\n  dup4\n  lt\n  tag_37\n  jumpi\n  pop\n  pop\n  pop\n  lt\n  tag_39\n  jumpi\ntag_40:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_39:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n  0x03\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  jump(tag_40)\ntag_37:\n  dup6\n  dup8\n  add\n  mload\n  dup9\n  sstore\n  swap1\n  swap7\n  add\n  swap6\n  swap5\n  dup6\n  add\n  swap5\n  dup8\n  swap4\n  pop\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_36)\ntag_29:\n  dup6\n  dup1\n  mstore\n  dup5\n  0x1f\n  dup5\n  dup9\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup7\n  add\n  0x05\n  shr\n  add\ntag_41:\n  dup3\n  dup2\n  lt\n  tag_42\n  jumpi\n  pop\n  pop\n  jump(tag_30)\ntag_42:\n  dup8\n  dup2\n  sstore\n  add\n  dup6\n  swap1\n  jump(tag_41)\ntag_27:\n  shl(0xe0, 0x4e487b71)\n  dup7\n  mstore\n  mstore(0x04, 0x22)\n  0x24\n  dup7\n  revert\ntag_25:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_26)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_3:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  dup2\n  dup2\n  lt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  iszero\n  tag_44\n  jumpi\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  pop\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup3\n  mload\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  tag_46\n  jumpi\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  dup3\n  mload\n  swap3\n  add\n  mload\n  swap1\n  dup1\n  dup4\n  lt\n  tag_18\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  pop\n  or\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  jump\t// out\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_46:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap1\n  mload(0x40)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  dup1\n  swap3\n  shl(0xe0, 0x305a27a9)\n  dup3\n  mstore\n  dup1\n  0x04\n  dup4\n  add\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  mstore\n  dup3\n  mload\n  swap1\n  dup2\n  0x24\n  dup5\n  add\n  mstore\n  0x00\n  swap4\ntag_50:\n  dup3\n  dup6\n  lt\n  tag_51\n  jumpi\n  pop\n  pop\n  0x44\n  swap3\n  pop\n  0x00\n  dup4\n  dup3\n  dup5\n  add\n  add\n  mstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup1\n  not\n  swap2\n  add\n  and\n  dup2\n  add\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  sub\n  add\n  swap1\n  revert\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_51:\n  dup5\n  dup2\n  add\n  dup3\n  add\n  mload\n  dup7\n  dup7\n  add\n  0x44\n  add\n  mstore\n  swap4\n  dup2\n  add\n  swap4\n  dup6\n  swap4\n  pop\n  jump(tag_50)\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_44:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  swap2\n  swap3\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_10\n  jumpi\n  0x01\n  swap2\n  dup3\n  sload\n  dup4\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_55\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_56:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  dup3\n  dup3\n  lt\n  eq\n  tag_57\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_59\n  jumpi\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_60:\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n  pop\n  dup1\n  0x1f\n  dup4\n  gt\n  0x01\n  eq\n  tag_61\n  jumpi\n  pop\n  dup2\n  swap3\n  swap4\n  swap5\n  0x00\n  swap3\n  tag_63\n  jumpi\ntag_64:\n  pop\n  pop\n  not(0x00)\n  0x03\n  dup4\n  swap1\n  shl\n  shr\n  not\n  and\n  swap1\n  dup3\n  shl\n  or\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  jump\t// out\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_63:\n  add\n  mload\n  swap1\n  pop\n  0x00\n  dup1\n  jump(tag_64)\ntag_61:\n  swap1\n  not(0x1f)\n  dup4\n  and\n  swap6\n  dup5\n  0x00\n  mstore\n  dup3\n  0x00\n  keccak256\n  swap3\n  0x00\n  swap1\ntag_66:\n  dup9\n  dup3\n  lt\n  tag_67\n  jumpi\n  pop\n  pop\n  dup4\n  dup6\n  swap7\n  swap8\n  lt\n  tag_39\n  jumpi\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  jump\t// out\n    /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\ntag_67:\n  dup1\n  dup8\n  dup6\n  swap7\n  dup3\n  swap5\n  swap7\n  dup7\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap6\n  add\n  swap4\n  add\n  swap1\n  jump(tag_66)\ntag_59:\n  dup4\n  0x00\n  mstore\n  dup4\n  0x1f\n  dup4\n  0x00\n  keccak256\n  swap3\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap2\n  0x1f\n  dup6\n  add\n  0x05\n  shr\n  add\ntag_71:\n  dup3\n  dup2\n  lt\n  tag_72\n  jumpi\n  pop\n  pop\n  jump(tag_60)\ntag_72:\n  0x00\n  dup2\n  sstore\n  add\n  dup5\n  swap1\n  jump(tag_71)\ntag_57:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_55:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_56)\nstop\n\nsub_0: assembly {\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_50, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_50:\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x19d8d38c\n      eq\n      tag_52\n      jumpi\n      dup1\n      0x3fb5c1cb\n      eq\n      tag_54\n      jumpi\n      dup1\n      0x572b6c05\n      eq\n      tag_56\n      jumpi\n      dup1\n      0x7da0a877\n      eq\n      tag_58\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_60\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_62\n      jumpi\n      dup1\n      0xccf96b4a\n      eq\n      tag_64\n      jumpi\n      0xdf905caf\n      eq\n      tag_66\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_66:\n      tag_13\n      jump\t// in\n    tag_64:\n      tag_12\n      jump\t// in\n    tag_62:\n      tag_11\n      jump\t// in\n    tag_60:\n      tag_8\n      jump\t// in\n    tag_58:\n      tag_7\n      jump\t// in\n    tag_56:\n      tag_6\n      jump\t// in\n    tag_54:\n      tag_3\n      jump\t// in\n    tag_52:\n      jumpi(tag_68, callvalue)\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5004:5022  _validate(request) */\n      tag_70\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      tag_71\n      calldatasize\n      tag_1\n      jump\t// in\n    tag_71:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5004:5022  _validate(request) */\n      tag_21\n      jump\t// in\n    tag_70:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5067  isTrustedForwarder && active */\n      pop\n      swap1\n      dup3\n      tag_72\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_73:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5082  isTrustedForwarder && active && signerMatch */\n      pop\n      dup2\n      tag_74\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_75:\n      pop\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5082  isTrustedForwarder && active && signerMatch */\n    tag_74:\n      swap1\n      pop\n      dup3\n      jump(tag_75)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5039:5067  isTrustedForwarder && active */\n    tag_72:\n      swap2\n      pop\n      dup4\n      jump(tag_73)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_68:\n      0x00\n      dup1\n      revert\n    tag_1:\n      not(0x03)\n      swap1\n      0x20\n      dup2\n      dup4\n      add\n      slt\n      tag_68\n      jumpi\n      calldataload(0x04)\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_68\n      jumpi\n      dup3\n      0xe0\n      swap3\n      sub\n      add\n      slt\n      tag_68\n      jumpi\n      0x04\n      add\n      swap1\n      jump\t// out\n    tag_3:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      sstore(0x03, calldataload(0x04))\n      stop\n    tag_5:\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      sub\n      tag_68\n      jumpi\n      jump\t// out\n    tag_6:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      calldataload(0x04)\n      tag_92\n      dup2\n      tag_5\n      jump\t// in\n    tag_92:\n      mload(0x40)\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1462:1479  _trustedForwarder */\n      dup1\n      immutable(\"0x77c32b454bb61eb9df9e3848d0ded3e59753acda90ae58befe564733aec82e4c\")\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      and\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1686:1717  forwarder == trustedForwarder() */\n      eq\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      mstore\n      return\n    tag_7:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":1462:1479  _trustedForwarder */\n      immutable(\"0x77c32b454bb61eb9df9e3848d0ded3e59753acda90ae58befe564733aec82e4c\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_8:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      tag_101\n      calldataload(0x04)\n      tag_102\n      dup2\n      tag_5\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x02\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_101:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_10:\n      swap2\n      swap1\n      dup3\n      mload\n      swap3\n      dup4\n      dup3\n      mstore\n      0x00\n    tag_103:\n      dup5\n      dup2\n      lt\n      tag_104\n      jumpi\n      pop\n      pop\n      dup3\n      0x00\n      0x20\n      dup1\n      swap5\n      swap6\n      dup5\n      add\n      add\n      mstore\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_104:\n      0x20\n      dup2\n      dup4\n      add\n      dup2\n      add\n      mload\n      dup5\n      dup4\n      add\n      dup3\n      add\n      mstore\n      add\n      jump(tag_103)\n    tag_11:\n      jumpi(tag_68, callvalue)\n      0x00\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_108\n      jumpi\n      tag_110\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_111\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0xcb53285b0d93959fe2b39d776c53c3ac62f51d590c6169c94a63eeb4e0302d5e\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_47\n      jump\t// in\n    tag_111:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_112\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0x4e5048aa6ab9ce5117b653ef20524273bce16c451ef1a9c6d4f6b8e5e9fe0ca4\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_48\n      jump\t// in\n    tag_112:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap2\n      tag_113\n      dup4\n      tag_24\n      jump\t// in\n    tag_113:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      dup4\n      mstore\n      mload(0x40)\n      swap5\n      dup6\n      swap5\n      shl(0xf8, 0x0f)\n      dup7\n      mstore\n      tag_114\n      0x20\n      swap4\n      0xe0\n      dup6\n      dup10\n      add\n      mstore\n      0xe0\n      dup9\n      add\n      swap1\n      tag_10\n      jump\t// in\n    tag_114:\n      swap1\n      dup7\n      dup3\n      sub\n      0x40\n      dup9\n      add\n      mstore\n      tag_10\n      jump\t// in\n    tag_110:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      swap1\n      chainid\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x60\n      dup7\n      add\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x80\n      dup7\n      add\n      mstore\n      dup3\n      0xa0\n      dup7\n      add\n      mstore\n      dup5\n      dup3\n      sub\n      0xc0\n      dup7\n      add\n      mstore\n      dup1\n      dup1\n      dup6\n      mload\n      swap4\n      dup5\n      dup2\n      mstore\n      add\n      swap5\n      add\n      swap3\n    tag_115:\n      dup3\n      dup2\n      lt\n      tag_116\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      sub\n      swap1\n      return\n    tag_116:\n      dup4\n      mload\n      dup6\n      mstore\n      dup7\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      swap3\n      dup2\n      add\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      add\n      jump(tag_115)\n    tag_108:\n      dup1\n      revert\n    tag_12:\n      0x40\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_68\n      jumpi\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup1\n      dup3\n      gt\n      tag_68\n      jumpi\n      calldatasize\n      0x23\n      dup4\n      add\n      slt\n      iszero\n      tag_68\n      jumpi\n      dup2\n      0x04\n      add\n      calldataload\n      swap1\n      dup2\n      gt\n      tag_68\n      jumpi\n      0x24\n      dup3\n      add\n      swap2\n      0x24\n      calldatasize\n      swap2\n      dup4\n      0x05\n      shl\n      add\n      add\n      gt\n      tag_68\n      jumpi\n      swap1\n      calldataload(0x24)\n      swap3\n      tag_128\n      dup5\n      tag_5\n      jump\t// in\n    tag_128:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7708:7709  0 */\n      0x00\n      swap3\n      dup4\n      swap3\n      dup4\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup8\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7682:7710  refundReceiver == address(0) */\n      iszero\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7798:7817  i < requests.length */\n    tag_129:\n      dup2\n      dup5\n      lt\n      tag_130\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8186:8195  msg.value */\n      pop\n      pop\n      pop\n      pop\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8169:8195  requestsValue != msg.value */\n      dup3\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8165:8286  if (requestsValue != msg.value) {... */\n      tag_132\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8453:8469  refundValue != 0 */\n      pop\n      pop\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8449:8777  if (refundValue != 0) {... */\n      tag_134\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8449:8777  if (refundValue != 0) {... */\n    tag_134:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8754:8765  refundValue */\n      tag_136\n      swap2\n      tag_38\n      jump\t// in\n    tag_136:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8165:8286  if (requestsValue != msg.value) {... */\n    tag_132:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n      shl(0xe0, 0x70647f79)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      dup2\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x04\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      dup2\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8186:8195  msg.value */\n      callvalue\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n    tag_137:\n      sub\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n    tag_130:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7866  requests[i] */\n      swap1\n      swap2\n      swap3\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7838:7872  requestsValue += requests[i].value */\n      tag_138\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7866  requests[i] */\n      swap1\n      dup6\n      tag_139\n      dup9\n      dup7\n      dup7\n      tag_17\n      jump\t// in\n    tag_139:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7855:7872  requests[i].value */\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7838:7872  requestsValue += requests[i].value */\n      swap1\n      tag_18\n      jump\t// in\n    tag_138:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7910:7921  requests[i] */\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n      tag_140\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7901:7930  _execute(requests[i], atomic) */\n      tag_141\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7910:7921  requests[i] */\n      dup6\n      tag_142\n      dup5\n      dup8\n      dup8\n      tag_17\n      jump\t// in\n    tag_142:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7901:7930  _execute(requests[i], atomic) */\n      tag_35\n      jump\t// in\n    tag_141:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n      iszero\n      swap1\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7948:7956  !success */\n    tag_140:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n      tag_143\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n    tag_144:\n      tag_145\n      swap1\n      tag_16\n      jump\t// in\n    tag_145:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7787:7796  uint256 i */\n      swap3\n      swap2\n      swap1\n      jump(tag_129)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n    tag_143:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7991:8002  requests[i] */\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7976:8008  refundValue += requests[i].value */\n      tag_146\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7819:7822  ++i */\n      tag_145\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7991:8002  requests[i] */\n      swap2\n      dup7\n      tag_139\n      dup11\n      dup8\n      dup8\n      tag_17\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7976:8008  refundValue += requests[i].value */\n    tag_146:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":7944:8023  if (!success) {... */\n      swap7\n      swap1\n      pop\n      jump(tag_144)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_13:\n      tag_148\n      calldatasize\n      tag_1\n      jump\t// in\n    tag_148:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5911:5924  request.value */\n      0x40\n      swap1\n      dup2\n      dup2\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5907  msg.value */\n      dup1\n      callvalue\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5924  msg.value != request.value */\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5894:6015  if (msg.value != request.value) {... */\n      tag_149\n      jumpi\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11237:11255  _validate(request) */\n      swap2\n      tag_151\n      dup2\n      tag_21\n      jump\t// in\n    tag_151:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11492:11511  !isTrustedForwarder */\n      swap3\n      swap2\n      swap1\n      dup3\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n      tag_152\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11621:11628  !active */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n      tag_154\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11736:11748  !signerMatch */\n      dup1\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n      tag_156\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n      dup3\n      tag_158\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_159:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n      pop\n      dup2\n      tag_160\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_161:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      pop\n      tag_162\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_163:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6029:6053  !_execute(request, true) */\n      pop\n      pop\n      pop\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6025:6112  if (!_execute(request, true)) {... */\n      tag_164\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      stop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6025:6112  if (!_execute(request, true)) {... */\n    tag_164:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n      shl(0xe1, 0x0a12f521)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6076:6101  Address.FailedInnerCall() */\n      dup2\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x04\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":6076:6101  Address.FailedInnerCall() */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n    tag_162:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x02\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_166\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      0x842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12105:12122  _useNonce(signer) */\n      swap3\n      swap2\n      dup2\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_168\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      tag_169\n      0x20\n      dup8\n      add\n      tag_19\n      jump\t// in\n    tag_169:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12296:12308  request.data */\n      swap2\n      dup11\n      tag_170\n      0xa0\n      dup10\n      add\n      dup10\n      tag_22\n      jump\t// in\n    tag_170:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_171\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12310:12322  request.from */\n      tag_172\n      dup12\n      swap7\n      swap4\n      swap7\n      tag_19\n      jump\t// in\n    tag_172:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap4\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      swap4\n      dup5\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup5\n      add\n      swap8\n      dup9\n      tag_33\n      jump\t// in\n    tag_171:\n      sub\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      not(0x1f)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup2\n      add\n      dup4\n      mstore\n      dup3\n      tag_26\n      jump\t// in\n    tag_168:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12154:12165  request.gas */\n      swap3\n      0x60\n      dup9\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      call\n      swap5\n      dup6\n      swap3\n      gas\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_37\n      jump\t// in\n    tag_166:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup6\n      mload\n      swap4\n      dup5\n      mstore\n      swap1\n      iszero\n      iszero\n      0x20\n      dup5\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap2\n      0x40\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      log2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      0x00\n      dup1\n      dup1\n      jump(tag_163)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n    tag_160:\n      swap1\n      pop\n      0x00\n      jump(tag_161)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n    tag_158:\n      swap2\n      pop\n      0x00\n      jump(tag_159)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n    tag_156:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      dup8\n      dup5\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      tag_137\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      tag_175\n      dup9\n      tag_19\n      jump\t// in\n    tag_175:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap3\n      mload\n      shl(0xe1, 0x6422d02b)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap3\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      0x04\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      swap2\n      swap1\n      swap3\n      and\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n    tag_154:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      tag_137\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11686:11702  request.deadline */\n      dup9\n      tag_177\n      0x80\n      dup9\n      add\n      tag_20\n      jump\t// in\n    tag_177:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      mload\n      shl(0xe1, 0x4a777ac5)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      dup2\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0xffffffffffff\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      dup2\n      swap1\n      0x24\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n    tag_152:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      tag_137\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11562:11572  request.to */\n      dup9\n      tag_179\n      0x20\n      dup9\n      add\n      tag_19\n      jump\t// in\n    tag_179:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      mload\n      shl(0xe0, 0xd2650cd1)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      0x04\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11582:11586  this */\n      address\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5894:6015  if (msg.value != request.value) {... */\n    tag_149:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup3\n      mload\n      shl(0xe0, 0x70647f79)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5947:6004  ERC2771ForwarderMismatchedValue(request.value, msg.value) */\n      dup2\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x04\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5947:6004  ERC2771ForwarderMismatchedValue(request.value, msg.value) */\n      dup2\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":5898:5907  msg.value */\n      callvalue\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_15:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_16:\n      not(0x00)\n      dup2\n      eq\n      tag_181\n      jumpi\n      0x01\n      add\n      swap1\n      jump\t// out\n    tag_181:\n      tag_15\n      jump\t// in\n    tag_17:\n      swap2\n      swap1\n      dup2\n      lt\n      iszero\n      tag_183\n      jumpi\n      0x05\n      shl\n      dup2\n      add\n      calldataload\n      swap1\n      not(0xde)\n      dup2\n      calldatasize\n      sub\n      add\n      dup3\n      slt\n      iszero\n      tag_68\n      jumpi\n      add\n      swap1\n      jump\t// out\n    tag_183:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_18:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_181\n      jumpi\n      jump\t// out\n    tag_19:\n      calldataload\n      tag_189\n      dup2\n      tag_5\n      jump\t// in\n    tag_189:\n      swap1\n      jump\t// out\n    tag_20:\n      calldataload\n      0xffffffffffff\n      dup2\n      and\n      dup2\n      sub\n      tag_68\n      jumpi\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n    tag_21:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9274:9284  request.to */\n      tag_192\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup3\n      calldataload\n      swap2\n      tag_193\n      dup4\n      tag_5\n      jump\t// in\n    tag_193:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n      dup5\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9315  request.deadline */\n      tag_194\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9255:9285  _isTrustedByTarget(request.to) */\n      tag_195\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10354  _hashTypedDataV4(... */\n      tag_196\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10324  _hashTypedDataV4(... */\n      tag_197\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup8\n      calldataload\n      tag_198\n      dup2\n      tag_5\n      jump\t// in\n    tag_198:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10186:10198  request.from */\n      dup10\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      tag_199\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10179:10199  nonces(request.from) */\n      tag_200\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10186:10198  request.from */\n      tag_102\n      dup4\n      tag_19\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10179:10199  nonces(request.from) */\n    tag_200:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10221:10237  request.deadline */\n      swap8\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      tag_171\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10221:10237  request.deadline */\n      0x80\n      dup5\n      add\n      swap10\n      tag_203\n      dup12\n      tag_20\n      jump\t// in\n    tag_203:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_204\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10269:10281  request.data */\n      tag_205\n      0xa0\n      dup9\n      add\n      dup9\n      tag_22\n      jump\t// in\n    tag_205:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      calldatasize\n      swap2\n      tag_28\n      jump\t// in\n    tag_204:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      mload\n      swap2\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10259:10282  keccak256(request.data) */\n      keccak256\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      0x40\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      swap7\n      dup8\n      swap6\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10079:10089  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      dup8\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10146:10157  request.gas */\n      swap10\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10146:10157  request.gas */\n      0x60\n      dup5\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10111:10124  request.value */\n      swap4\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n      swap2\n      dup12\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0xffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      0xe0\n      swap7\n      swap3\n      swap10\n      swap9\n      swap8\n      swap4\n      swap10\n      0x0100\n      dup8\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap11\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup9\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap3\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x20\n      dup10\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x40\n      dup8\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x60\n      dup7\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x80\n      dup6\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup5\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0xc0\n      dup3\n      add\n      mstore\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9966:10300  abi.encode(... */\n    tag_199:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9939:10314  keccak256(... */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10324  _hashTypedDataV4(... */\n      tag_43\n      jump\t// in\n    tag_197:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_206\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10336:10353  request.signature */\n      tag_205\n      0xc0\n      dup12\n      add\n      dup12\n      tag_22\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n    tag_206:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9909:10354  _hashTypedDataV4(... */\n      swap1\n      tag_41\n      jump\t// in\n    tag_196:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      pop\n      tag_208\n      dup2\n      swap8\n      swap3\n      swap8\n      tag_30\n      jump\t// in\n    tag_208:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":10373:10406  err == ECDSA.RecoverError.NoError */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9274:9284  request.to */\n      swap7\n      tag_19\n      jump\t// in\n    tag_192:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9255:9285  _isTrustedByTarget(request.to) */\n      tag_36\n      jump\t// in\n    tag_195:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9315  request.deadline */\n      swap2\n      tag_20\n      jump\t// in\n    tag_194:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n      swap5\n      dup5\n      tag_209\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n    tag_210:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9234:9417  return (... */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9319:9334  block.timestamp */\n      swap4\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0xffffffffffff\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9319:9334  block.timestamp */\n      timestamp\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9299:9334  request.deadline >= block.timestamp */\n      lt\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9234:9417  return (... */\n      swap3\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8967:9424  function _validate(... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n    tag_209:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n      tag_211\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9372:9384  request.from */\n      swap2\n      swap5\n      pop\n      tag_212\n      swap1\n      tag_19\n      jump\t// in\n    tag_212:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      and\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n    tag_211:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9359:9384  recovered == request.from */\n      eq\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":9348:9384  isValid && recovered == request.from */\n      0x00\n      jump(tag_210)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n    tag_22:\n      swap1\n      calldataload\n      swap1\n      not(0x1e)\n      dup2\n      calldatasize\n      sub\n      add\n      dup3\n      slt\n      iszero\n      tag_68\n      jumpi\n      add\n      dup1\n      calldataload\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_68\n      jumpi\n      0x20\n      add\n      swap2\n      dup2\n      calldatasize\n      sub\n      dup4\n      sgt\n      tag_68\n      jumpi\n      jump\t// out\n    tag_23:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      shl(0xe0, 0x4e487b71)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x00\n      mstore\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_24:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_219\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_219:\n      tag_23\n      jump\t// in\n    tag_25:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0xc0\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_219\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_26:\n      swap1\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_219\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_27:\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_219\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x1f\n      add\n      not(0x1f)\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_28:\n      swap3\n      swap2\n      swap3\n      tag_227\n      dup3\n      tag_27\n      jump\t// in\n    tag_227:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_228\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      dup5\n      tag_26\n      jump\t// in\n    tag_228:\n      dup3\n      swap5\n      dup2\n      dup5\n      mstore\n      dup2\n      dup4\n      add\n      gt\n      tag_68\n      jumpi\n      dup3\n      dup2\n      0x20\n      swap4\n      dup5\n      0x00\n      swap7\n      add\n      calldatacopy\n      add\n      add\n      mstore\n      jump\t// out\n    tag_30:\n      0x04\n      gt\n      iszero\n      tag_231\n      jumpi\n      jump\t// out\n    tag_231:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      shl(0xe0, 0x4e487b71)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x00\n      mstore\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_33:\n      dup3\n      0x14\n      swap5\n      swap4\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup3\n      calldatacopy\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      not(0xffffffffffffffffffffffff)\n      swap1\n      0x60\n      shl\n      and\n      dup2\n      mstore\n      add\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_35:\n      swap2\n      swap1\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11237:11255  _validate(request) */\n      swap3\n      tag_233\n      dup2\n      tag_21\n      jump\t// in\n    tag_233:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n      swap5\n      tag_234\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_235:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n      dup3\n      tag_236\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_237:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n      pop\n      dup2\n      tag_238\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n    tag_239:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n      pop\n      tag_240\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n      pop\n      pop\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11934:12646  if (isTrustedForwarder && signerMatch && active) {... */\n    tag_240:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x02\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_242\n      swap5\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      0x842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12105:12122  _useNonce(signer) */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      swap3\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      dup1\n      tag_244\n      0x20\n      dup6\n      add\n      tag_19\n      jump\t// in\n    tag_244:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12296:12308  request.data */\n      tag_245\n      0xa0\n      dup7\n      add\n      dup7\n      tag_22\n      jump\t// in\n    tag_245:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_246\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12310:12322  request.from */\n      tag_247\n      dup9\n      tag_19\n      jump\t// in\n    tag_247:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      tag_171\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      0x40\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      swap4\n      dup5\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12192:12202  request.to */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12279:12323  abi.encodePacked(request.data, request.from) */\n      dup5\n      add\n      swap7\n      dup8\n      tag_33\n      jump\t// in\n    tag_246:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      swap2\n      0x40\n      dup8\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12154:12165  request.gas */\n      swap1\n      0x60\n      dup9\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12368:12512  assembly {... */\n      call\n      swap6\n      dup7\n      swap3\n      gas\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12554:12561  request */\n      tag_37\n      jump\t// in\n    tag_242:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12232:12245  request.value */\n      0x40\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup1\n      mload\n      swap5\n      dup6\n      mstore\n      swap2\n      iszero\n      iszero\n      0x20\n      dup6\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap3\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12582:12635  ExecutedForwardRequest(signer, currentNonce, success) */\n      log2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11009:12652  function _execute(... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11981  isTrustedForwarder && signerMatch && active */\n    tag_238:\n      swap1\n      pop\n      0x00\n      jump(tag_239)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11938:11971  isTrustedForwarder && signerMatch */\n    tag_236:\n      swap2\n      pop\n      0x00\n      jump(tag_237)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n    tag_234:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11492:11511  !isTrustedForwarder */\n      dup3\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n      tag_250\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11621:11628  !active */\n      dup2\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n      tag_252\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11736:11748  !signerMatch */\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11449:11851  if (requireValidRequest) {... */\n      tag_235\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11732:11841  if (!signerMatch) {... */\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11813:11825  request.from */\n      dup5\n      tag_256\n      dup6\n      tag_19\n      jump\t// in\n    tag_256:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe1, 0x6422d02b)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap3\n      dup4\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11775:11826  ERC2771ForwarderInvalidSigner(signer, request.from) */\n      0x04\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      swap2\n      and\n      0x24\n      dup3\n      add\n      mstore\n      0x44\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":8218:8275  ERC2771ForwarderMismatchedValue(requestsValue, msg.value) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11617:11718  if (!active) {... */\n    tag_252:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      tag_137\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11686:11702  request.deadline */\n      tag_259\n      0x80\n      dup7\n      add\n      tag_20\n      jump\t// in\n    tag_259:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe1, 0x4a777ac5)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      dup2\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0xffffffffffff\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11655:11703  ERC2771ForwarderExpiredRequest(request.deadline) */\n      0x04\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      dup2\n      swap1\n      0x24\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11488:11603  if (!isTrustedForwarder) {... */\n    tag_250:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      tag_137\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11562:11572  request.to */\n      tag_261\n      0x20\n      dup7\n      add\n      tag_19\n      jump\t// in\n    tag_261:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe0, 0xd2650cd1)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n      swap2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11538:11588  ERC2771UntrustfulTarget(request.to, address(this)) */\n      0x04\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":11582:11586  this */\n      address\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x24\n      dup3\n      add\n      mstore\n      swap1\n      dup2\n      swap1\n      0x44\n      dup3\n      add\n      swap1\n      jump\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n    tag_36:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      swap1\n      0x20\n      dup3\n      add\n      swap1\n      shl(0xe0, 0x572b6c05)\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13045:13049  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x24\n      dup5\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x24\n      dup4\n      mstore\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      dup4\n      add\n      swap2\n      dup4\n      dup4\n      lt\n      0xffffffffffffffff\n      dup5\n      gt\n      or\n      tag_219\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x20\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap4\n      0x00\n      swap4\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13185:13907  assembly {... */\n      mload\n      swap2\n      gas\n      staticcall\n      mload(0x00)\n      returndatasize\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n      dup3\n      tag_264\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n    tag_265:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13972  success && returnSize >= 0x20 && returnValue > 0 */\n      pop\n      dup2\n      tag_266\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13917:13972  return success && returnSize >= 0x20 && returnValue > 0 */\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13972  success && returnSize >= 0x20 && returnValue > 0 */\n    tag_266:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13957:13972  returnValue > 0 */\n      swap1\n      pop\n      iszero\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12875:13979  function _isTrustedByTarget(address target) private view returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n    tag_264:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":12986:13052  abi.encodeCall(ERC2771Context.isTrustedForwarder, (address(this))) */\n      0x20\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13935:13953  returnSize >= 0x20 */\n      iszero\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":13924:13953  success && returnSize >= 0x20 */\n      0x00\n      jump(tag_265)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n    tag_37:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16351:16362  request.gas */\n      0x60\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16365:16367  63 */\n      0x3f\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16351:16362  request.gas */\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      calldataload\n      div\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16337:16791  if (gasLeft < request.gas / 63) {... */\n      tag_268\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":14599:16797  function _checkForwardedGas(uint256 gasLeft, ForwardRequestData calldata request) private pure {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16337:16791  if (gasLeft < request.gas / 63) {... */\n    tag_268:\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":16731:16781  assembly {... */\n      invalid\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1531:1862  function sendValue(address payable recipient, uint256 amount) internal {... */\n    tag_38:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1616:1637  address(this).balance */\n      dup2\n      selfbalance\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1616:1646  address(this).balance < amount */\n      lt\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1612:1721  if (address(this).balance < amount) {... */\n      tag_270\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      0x00\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      dup3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      gas\n      call\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      jumpi(tag_272, iszero(returndatasize))\n      returndatasize\n      tag_274\n      dup2\n      tag_27\n      jump\t// in\n    tag_274:\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      tag_275\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap3\n      dup4\n      tag_26\n      jump\t// in\n    tag_275:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1750:1783  recipient.call{value: amount}(\"\") */\n      0x00\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      returndatasize\n      swap3\n      add\n      returndatacopy\n    tag_276:\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1797:1805  !success */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1793:1856  if (!success) {... */\n      tag_277\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1531:1862  function sendValue(address payable recipient, uint256 amount) internal {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1793:1856  if (!success) {... */\n    tag_277:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1828:1845  FailedInnerCall() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n    tag_272:\n      jump(tag_276)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1612:1721  if (address(this).balance < amount) {... */\n    tag_270:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe0, 0xcd786059)\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1624:1628  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      0x24\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/Address.sol\":1669:1710  AddressInsufficientBalance(address(this)) */\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2129:2895  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {... */\n    tag_41:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      mload\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2129:2895  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2276:2278  65 */\n      0x41\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2256:2278  signature.length == 65 */\n      dup4\n      sub\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2276:2278  65 */\n      tag_279\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2739:2764  tryRecover(hash, v, r, s) */\n      tag_281\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2539:2719  assembly {... */\n      swap3\n      pop\n      0x20\n      dup3\n      add\n      mload\n      swap1\n      0x60\n      0x40\n      dup5\n      add\n      mload\n      swap4\n      add\n      mload\n      0x00\n      byte\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2739:2764  tryRecover(hash, v, r, s) */\n      swap1\n      tag_42\n      jump\t// in\n    tag_281:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2732:2764  return tryRecover(hash, v, r, s) */\n      swap2\n      swap3\n      swap1\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2252:2889  if (signature.length == 65) {... */\n    tag_279:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2811:2812  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2815:2850  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":2795:2878  return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length)) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_42:\n      swap2\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      tag_282\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap3\n      0x20\n      swap3\n      swap2\n      0xff\n      0x80\n      swap6\n      mload(0x40)\n      swap5\n      dup6\n      mstore\n      and\n      dup5\n      dup5\n      add\n      mstore\n      0x40\n      dup4\n      add\n      mstore\n      0x60\n      dup3\n      add\n      mstore\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      swap3\n      dup4\n      swap2\n      dup3\n      dup1\n      mstore\n      0x01\n      gas\n      staticcall\n      iszero\n      tag_284\n      jumpi\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      iszero\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_286\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6614:6663  return (signer, RecoverError.NoError, bytes32(0)) */\n      swap2\n      dup2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_286:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      pop\n      dup1\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n    tag_284:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_282:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      pop\n      pop\n      pop\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap2\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap2\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_43:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3515:3748  assembly {... */\n      0x42\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_288\n      tag_44\n      jump\t// in\n    tag_288:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":3515:3748  assembly {... */\n      swap1\n      mload(0x40)\n      swap2\n      shl(0xf0, 0x1901)\n      dup4\n      mstore\n      0x02\n      dup4\n      add\n      mstore\n      0x22\n      dup3\n      add\n      mstore\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_44:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0x181e1e3a457d5cef39dddc6213a1adbc86226ab3d6c2e46b6b95ce30e1273fad\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      eq\n      dup1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      tag_289\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_290:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_291\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x267a3e43955d5ac713043fd32df2bde19a025701ea343c4467194e9c98b8fb1f\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4000:4029  return _cachedDomainSeparator */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_291:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup2\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0xd60579bb341d0b58542358d81fbcda6dc7dd39e7447d85d21541e19a3877254c\")\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x40\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0x995833c2a2aeb937fbc4a128bd490bc0fc9957bdfd709bbb221dc0127b96401e\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x60\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x80\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      dup3\n      add\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mstore\n      0xa0\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      dup2\n      mstore\n      tag_293\n      dup2\n      tag_25\n      jump\t// in\n    tag_293:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":4060:4090  return _buildDomainSeparator() */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_289:\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      pop\n      immutable(\"0xa719e06aa69fe5611e041976601e5776ff743aefe35a016a2b5dfe8f33a5e5e9\")\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      jump(tag_290)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_47:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_294\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_189\n      swap1\n      tag_49\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_294:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      pop\n      mload(0x40)\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      sload\n      swap1\n      0x01\n      dup3\n      dup2\n      shr\n      swap3\n      dup2\n      dup2\n      and\n      swap2\n      dup3\n      iszero\n      tag_297\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_298:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x20\n      swap2\n      dup3\n      dup7\n      lt\n      dup5\n      eq\n      tag_299\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup6\n      dup8\n      mstore\n      dup7\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      dup7\n      add\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap3\n      swap2\n      dup2\n      iszero\n      tag_302\n      jumpi\n      pop\n      0x01\n      eq\n      tag_304\n      jumpi\n    tag_305:\n      pop\n      pop\n      pop\n      tag_189\n      swap3\n      pop\n      sub\n      dup3\n      tag_26\n      jump\t// in\n    tag_304:\n      swap3\n      pop\n      swap4\n      tag_307\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      mstore\n      0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      swap1\n      jump\n    tag_307:\n      swap5\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x00\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n    tag_308:\n      dup3\n      dup6\n      lt\n      tag_309\n      jumpi\n      pop\n      pop\n      pop\n      tag_189\n      swap4\n      pop\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_305)\n    tag_309:\n      dup7\n      sload\n      dup6\n      dup6\n      add\n      mstore\n      swap6\n      dup7\n      add\n      swap6\n      dup8\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      jump(tag_308)\n    tag_302:\n      swap3\n      pop\n      pop\n      pop\n      tag_189\n      swap5\n      swap2\n      swap3\n      pop\n      not(0xff)\n      and\n      dup3\n      mstore\n      iszero\n      iszero\n      0x05\n      shl\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_305)\n    tag_299:\n      shl(0xe0, 0x4e487b71)\n      dup6\n      mstore\n      mstore(0x04, 0x22)\n      0x24\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup6\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      revert\n    tag_297:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_298)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_48:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup2\n      eq\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      tag_311\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_189\n      swap1\n      tag_49\n      jump\t// in\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_311:\n      pop\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      dup1\n      sload\n      dup1\n      dup3\n      shr\n      swap2\n      0x00\n      swap2\n      dup1\n      dup3\n      and\n      swap2\n      dup3\n      iszero\n      tag_314\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_315:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x20\n      swap2\n      dup3\n      dup7\n      lt\n      dup5\n      eq\n      tag_299\n      jumpi\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup6\n      dup8\n      mstore\n      dup7\n      swap5\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap4\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      0x20\n      dup7\n      add\n      swap4\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      swap3\n      swap2\n      dup2\n      iszero\n      tag_302\n      jumpi\n      pop\n      0x01\n      eq\n      tag_321\n      jumpi\n      pop\n      pop\n      pop\n      tag_189\n      swap3\n      pop\n      sub\n      dup3\n      tag_26\n      jump\t// in\n    tag_321:\n      swap3\n      pop\n      swap4\n      tag_324\n        /* \"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x01\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0x00\n      mstore\n      0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\n      swap1\n      jump\n    tag_324:\n      swap5\n      0x00\n      swap4\n    tag_325:\n      dup3\n      dup6\n      lt\n      tag_326\n      jumpi\n      pop\n      pop\n      pop\n      tag_189\n      swap4\n      pop\n      add\n      0x00\n      dup1\n      dup1\n      jump(tag_305)\n    tag_326:\n      dup7\n      sload\n      dup6\n      dup6\n      add\n      mstore\n      swap6\n      dup7\n      add\n      swap6\n      dup8\n      swap6\n      pop\n      swap4\n      dup2\n      add\n      swap4\n      jump(tag_325)\n    tag_314:\n      swap4\n      0x7f\n      and\n      swap4\n      jump(tag_315)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_49:\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup2\n      and\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      swap1\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      dup3\n      gt\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      tag_328\n      jumpi\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      0x40\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload\n        /* \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":3070:3211  keccak256(... */\n      swap2\n      0x40\n      dup4\n      add\n      dup4\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_219\n      jumpi\n      0x40\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2367:2457  assembly {... */\n      dup3\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      dup3\n      add\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2367:2457  assembly {... */\n      mstore\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n    tag_328:\n        /* \"src/Dummy.sol\":158:439  contract Dummy is ERC2771Context, ERC2771Forwarder {... */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n        /* \"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n\n    auxdata: 0xa264697066735822122064425c091b21815b87b307f33522e3103f64892154db6d5a467389234a8ed18564736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"finalize_allocation": {
									"entryPoint": 376,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_toShortStringWithFallback": {
									"entryPoint": 404,
									"id": 1137,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toShortStringWithFallback_2468": {
									"entryPoint": 865,
									"id": 1137,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "61018080604052346200017457620000178162000178565b600781526020810166466163746f727960c81b8152604051916200003b8362000178565b600183526020830191603160f81b835273ab8483f64d9c6d1ecf9b849ae677dd3315835cb26080526200006e8262000194565b90610140918252620000808562000361565b92610160938452519020926101009484865251902092610120908482524660c0526040519460208601917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8352604087015260608601524660808601523060a086015260a0855260c085019480861060018060401b0387111762000160578560405251902060a0523060e05261108b9485620005038639608051858181610163015261019f015260a05185610d66015260c05185610e21015260e05185610d3001525184610db501525183610ddb0152518261026a015251816102930152f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b604081019081106001600160401b038211176200016057604052565b8051602091908281101562000230575090601f825111620001d15780825192015190808310620001c357501790565b825f19910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b82851062000216575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620001f3565b6001600160401b03811162000160575f928354926001938481811c9116801562000356575b838210146200034257601f81116200030c575b5081601f8411600114620002a6575092829391839286946200029a575b50501b915f199060031b1c191617905560ff90565b015192505f8062000285565b919083601f1981168780528488209488905b88838310620002f15750505010620002d8575b505050811b01905560ff90565b01515f1960f88460031b161c191690555f8080620002cb565b858701518855909601959485019487935090810190620002b8565b85805284601f848820920160051c820191601f860160051c015b8281106200033657505062000268565b87815501859062000326565b634e487b7160e01b86526022600452602486fd5b90607f169062000255565b805160209081811015620003ed5750601f8251116200038e5780825192015190808310620001c357501790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b828510620003d3575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620003b0565b9192916001600160401b038111620001605760019182548381811c91168015620004f7575b82821014620004e357601f8111620004ad575b5080601f8311600114620004635750819293945f9262000457575b50505f19600383901b1c191690821b17905560ff90565b015190505f8062000440565b90601f19831695845f52825f20925f905b888210620004955750508385969710620002d857505050811b01905560ff90565b80878596829496860151815501950193019062000474565b835f5283601f835f20920160051c820191601f850160051c015b828110620004d757505062000425565b5f8155018490620004c7565b634e487b7160e01b5f52602260045260245ffd5b90607f16906200041256fe60806040526004361015610011575f80fd5b5f3560e01c806319d8d38c146100945780633fb5c1cb1461008f578063572b6c051461008a5780637da0a877146100855780637ecebe001461008057806384b0196e1461007b578063ccf96b4a146100765763df905caf14610071575f80fd5b610469565b61034a565b610250565b6101ce565b61018a565b610136565b61010c565b346100d65760206100ac6100a7366100da565b6106fe565b5090826100ce575b50816100c6575b506040519015158152f35b9050826100bb565b9150836100b4565b5f80fd5b600319906020818301126100d6576004359167ffffffffffffffff83116100d6578260e0920301126100d65760040190565b346100d65760203660031901126100d657600435600355005b6001600160a01b038116036100d657565b346100d65760203660031901126100d657602060043561015581610125565b6040519060018060a01b03807f0000000000000000000000000000000000000000000000000000000000000000169116148152f35b346100d6575f3660031901126100d6576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100d65760203660031901126100d657602061020a6004356101f081610125565b6001600160a01b03165f9081526002602052604090205490565b604051908152f35b91908251928382525f5b84811061023c575050825f602080949584010152601f8019910116010190565b60208183018101518483018201520161021c565b346100d6575f80600319360112610347576102f99061028e7f0000000000000000000000000000000000000000000000000000000000000000610e47565b6102b77f0000000000000000000000000000000000000000000000000000000000000000610f44565b91604051916102c5836108b6565b818352604051948594600f60f81b86526102eb60209360e08589015260e0880190610212565b908682036040880152610212565b904660608601523060808601528260a086015284820360c08601528080855193848152019401925b82811061033057505050500390f35b835185528695509381019392810192600101610321565b80fd5b6040806003193601126100d65760043567ffffffffffffffff8082116100d657366023830112156100d65781600401359081116100d6576024820191602436918360051b0101116100d65790602435926103a384610125565b5f92839283916001600160a01b03871615915b8184106103ff57505050503482036103dc575050806103d157005b6103da91610bc7565b005b516370647f7960e01b8152600481019190915234602482015260449150fd5b0390fd5b9091929461041b908561041388868661069b565b0135906106d1565b946104376104338561042e84878761069b565b6109a8565b1590565b61044d575b61044590610688565b9291906103b6565b9561046161044591866104138a878761069b565b96905061043c565b610472366100da565b60409081810135803403610655575f9161048b816106fe565b92919082156106195781156105e45780156105a7578261059f575b5081610597575b506104cd575b505050156104bd57005b51630a12f52160e11b8152600490fd5b6001600160a01b0381165f908152600260205260409020805460018101909155610574947f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c939291819095610563610527602087016106de565b918a61053660a089018961086f565b6105556105458b9693966106de565b9351938492602084019788610985565b03601f1981018352826108f3565b51926060880135f19485925a610bb5565b855193845290151560208401526001600160a01b031691604090a25f80806104b3565b90505f6104ad565b91505f6104a6565b87846103fb6105b5886106de565b9251636422d02b60e11b81526001600160a01b0392831660048201529190921660248201529081906044820190565b6103fb886105f4608088016106eb565b9051634a777ac560e11b815265ffffffffffff90911660048201529081906024820190565b6103fb88610629602088016106de565b905163d2650cd160e01b81526001600160a01b0390911660048201523060248201529081906044820190565b82516370647f7960e01b81526004810191909152346024820152604490fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981146106965760010190565b610674565b91908110156106bd5760051b8101359060de19813603018212156100d6570190565b634e487b7160e01b5f52603260045260245ffd5b9190820180921161069657565b356106e881610125565b90565b3565ffffffffffff811681036100d65790565b9061081d82359161070e83610125565b60208401926108286108226108096107f3873561072a81610125565b896107eb61073a6101f0836106de565b97610555608084019961074c8b6106eb565b61076361075c60a088018861086f565b3691610931565b6020815191012091604051968795602087019960406060840135930135918b9365ffffffffffff9360e09692999897939961010087019a7f7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac885260018060a01b0380921660208901521660408701526060860152608085015260a08401521660c08201520152565b519020610d07565b61080361075c60c08b018b61086f565b90610c3f565b5061081681979297610967565b15966106de565b610b4e565b916106eb565b9484610842575b509365ffffffffffff4291161015929190565b61085d919450610851906106de565b6001600160a01b031690565b6001600160a01b03831614925f61082f565b903590601e19813603018212156100d6570180359067ffffffffffffffff82116100d6576020019181360383136100d657565b634e487b7160e01b5f52604160045260245ffd5b6020810190811067ffffffffffffffff8211176108d257604052565b6108a2565b60c0810190811067ffffffffffffffff8211176108d257604052565b90601f8019910116810190811067ffffffffffffffff8211176108d257604052565b67ffffffffffffffff81116108d257601f01601f191660200190565b92919261093d82610915565b9161094b60405193846108f3565b8294818452818301116100d6578281602093845f960137010152565b6004111561097157565b634e487b7160e01b5f52602160045260245ffd5b826014949392823701906bffffffffffffffffffffffff199060601b1681520190565b91905f926109b5816106fe565b94610a99575b82610a91575b5081610a89575b506109d1575050565b6001600160a01b0382165f908152600260205260409020805460018101909155610a6d94507f842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c9190925f80610a28602085016106de565b610a3560a086018661086f565b610a56610a41886106de565b91610555604051938492602084019687610985565b51916040870135906060880135f19586925a610bb5565b6040805194855291151560208501526001600160a01b031692a2565b90505f6109c8565b91505f6109c1565b8215610b12578115610add57806109bb5784610ab4856106de565b604051636422d02b60e11b81526001600160a01b03928316600482015291166024820152604490fd5b6103fb610aec608086016106eb565b604051634a777ac560e11b815265ffffffffffff90911660048201529081906024820190565b6103fb610b21602086016106de565b60405163d2650cd160e01b81526001600160a01b0390911660048201523060248201529081906044820190565b60405190602082019063572b6c0560e01b825230602484015260248352606083019183831067ffffffffffffffff8411176108d2576020935f9360405251915afa5f513d82610ba9575b5081610ba2575090565b9050151590565b6020111591505f610b98565b906060603f9101350411610bc557565bfe5b814710610c27575f918291829182916001600160a01b03165af13d15610c22573d610bf181610915565b90610bff60405192836108f3565b81525f60203d92013e5b15610c1057565b604051630a12f52160e11b8152600490fd5b610c09565b60405163cd78605960e01b8152306004820152602490fd5b8151919060418303610c6f57610c689250602082015190606060408401519301515f1a90610c79565b9192909190565b50505f9160029190565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411610cfc57926020929160ff6080956040519485521684840152604083015260608201525f92839182805260015afa15610cf05780516001600160a01b03811615610ce757918190565b50809160019190565b604051903d90823e3d90fd5b5050505f9160039190565b604290610d12610d2d565b906040519161190160f01b8352600283015260228201522090565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480610e1e575b15610d88577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152610e18816108d7565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614610d5f565b60ff8114610e58576106e89061100e565b506040515f805490600182811c92818116918215610f3a575b6020918286108414610f2657858752869493602086019392918115610f075750600114610ea8575b5050506106e8925003826108f3565b925093610ed55f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b945f935b828510610ef1575050506106e89350015f8080610e99565b8654858501529586019587955093810193610ed9565b925050506106e89491925060ff19168252151560051b015f8080610e99565b634e487b7160e01b85526022600452602485fd5b93607f1693610e71565b60ff8114610f55576106e89061100e565b506040516001805480821c915f91808216918215611004575b6020918286108414610f2657858752869493602086019392918115610f075750600114610fa4575050506106e8925003826108f3565b925093610fd260015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b945f935b828510610fee575050506106e89350015f8080610e99565b8654858501529586019587955093810193610fd6565b93607f1693610f6e565b60ff811690601f821161104357604051916040830183811067ffffffffffffffff8211176108d2576040528252602082015290565b604051632cd44ac360e21b8152600490fdfea264697066735822122064425c091b21815b87b307f33522e3103f64892154db6d5a467389234a8ed18564736f6c63430008140033",
							"opcodes": "PUSH2 0x180 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x174 JUMPI PUSH3 0x17 DUP2 PUSH3 0x178 JUMP JUMPDEST PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH7 0x466163746F7279 PUSH1 0xC8 SHL DUP2 MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH3 0x3B DUP4 PUSH3 0x178 JUMP JUMPDEST PUSH1 0x1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 PUSH1 0x31 PUSH1 0xF8 SHL DUP4 MSTORE PUSH20 0xAB8483F64D9C6D1ECF9B849AE677DD3315835CB2 PUSH1 0x80 MSTORE PUSH3 0x6E DUP3 PUSH3 0x194 JUMP JUMPDEST SWAP1 PUSH2 0x140 SWAP2 DUP3 MSTORE PUSH3 0x80 DUP6 PUSH3 0x361 JUMP JUMPDEST SWAP3 PUSH2 0x160 SWAP4 DUP5 MSTORE MLOAD SWAP1 KECCAK256 SWAP3 PUSH2 0x100 SWAP5 DUP5 DUP7 MSTORE MLOAD SWAP1 KECCAK256 SWAP3 PUSH2 0x120 SWAP1 DUP5 DUP3 MSTORE CHAINID PUSH1 0xC0 MSTORE PUSH1 0x40 MLOAD SWAP5 PUSH1 0x20 DUP7 ADD SWAP2 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP4 MSTORE PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE CHAINID PUSH1 0x80 DUP7 ADD MSTORE ADDRESS PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 MSTORE PUSH1 0xC0 DUP6 ADD SWAP5 DUP1 DUP7 LT PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP8 GT OR PUSH3 0x160 JUMPI DUP6 PUSH1 0x40 MSTORE MLOAD SWAP1 KECCAK256 PUSH1 0xA0 MSTORE ADDRESS PUSH1 0xE0 MSTORE PUSH2 0x108B SWAP5 DUP6 PUSH3 0x503 DUP7 CODECOPY PUSH1 0x80 MLOAD DUP6 DUP2 DUP2 PUSH2 0x163 ADD MSTORE PUSH2 0x19F ADD MSTORE PUSH1 0xA0 MLOAD DUP6 PUSH2 0xD66 ADD MSTORE PUSH1 0xC0 MLOAD DUP6 PUSH2 0xE21 ADD MSTORE PUSH1 0xE0 MLOAD DUP6 PUSH2 0xD30 ADD MSTORE MLOAD DUP5 PUSH2 0xDB5 ADD MSTORE MLOAD DUP4 PUSH2 0xDDB ADD MSTORE MLOAD DUP3 PUSH2 0x26A ADD MSTORE MLOAD DUP2 PUSH2 0x293 ADD MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP2 SWAP1 DUP3 DUP2 LT ISZERO PUSH3 0x230 JUMPI POP SWAP1 PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x1D1 JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x1C3 JUMPI POP OR SWAP1 JUMP JUMPDEST DUP3 PUSH0 NOT SWAP2 SUB PUSH1 0x3 SHL SHL AND OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x216 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x1F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x160 JUMPI PUSH0 SWAP3 DUP4 SLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x356 JUMPI JUMPDEST DUP4 DUP3 LT EQ PUSH3 0x342 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x30C JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x2A6 JUMPI POP SWAP3 DUP3 SWAP4 SWAP2 DUP4 SWAP3 DUP7 SWAP5 PUSH3 0x29A JUMPI JUMPDEST POP POP SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP3 POP PUSH0 DUP1 PUSH3 0x285 JUMP JUMPDEST SWAP2 SWAP1 DUP4 PUSH1 0x1F NOT DUP2 AND DUP8 DUP1 MSTORE DUP5 DUP9 KECCAK256 SWAP5 DUP9 SWAP1 JUMPDEST DUP9 DUP4 DUP4 LT PUSH3 0x2F1 JUMPI POP POP POP LT PUSH3 0x2D8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH3 0x2CB JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP9 SSTORE SWAP1 SWAP7 ADD SWAP6 SWAP5 DUP6 ADD SWAP5 DUP8 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x2B8 JUMP JUMPDEST DUP6 DUP1 MSTORE DUP5 PUSH1 0x1F DUP5 DUP9 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP7 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x336 JUMPI POP POP PUSH3 0x268 JUMP JUMPDEST DUP8 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x326 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x255 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 DUP2 DUP2 LT ISZERO PUSH3 0x3ED JUMPI POP PUSH1 0x1F DUP3 MLOAD GT PUSH3 0x38E JUMPI DUP1 DUP3 MLOAD SWAP3 ADD MLOAD SWAP1 DUP1 DUP4 LT PUSH3 0x1C3 JUMPI POP OR SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH3 0x3D3 JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH3 0x3B0 JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x160 JUMPI PUSH1 0x1 SWAP2 DUP3 SLOAD DUP4 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x4F7 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x4E3 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x4AD JUMPI JUMPDEST POP DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x463 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH0 SWAP3 PUSH3 0x457 JUMPI JUMPDEST POP POP PUSH0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP3 SHL OR SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH3 0x440 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 DUP5 PUSH0 MSTORE DUP3 PUSH0 KECCAK256 SWAP3 PUSH0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH3 0x495 JUMPI POP POP DUP4 DUP6 SWAP7 SWAP8 LT PUSH3 0x2D8 JUMPI POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH1 0xFF SWAP1 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH3 0x474 JUMP JUMPDEST DUP4 PUSH0 MSTORE DUP4 PUSH1 0x1F DUP4 PUSH0 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR ADD JUMPDEST DUP3 DUP2 LT PUSH3 0x4D7 JUMPI POP POP PUSH3 0x425 JUMP JUMPDEST PUSH0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH3 0x4C7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x412 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x19D8D38C EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x3FB5C1CB EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x7DA0A877 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xCCF96B4A EQ PUSH2 0x76 JUMPI PUSH4 0xDF905CAF EQ PUSH2 0x71 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x250 JUMP JUMPDEST PUSH2 0x1CE JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH2 0xAC PUSH2 0xA7 CALLDATASIZE PUSH2 0xDA JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST POP SWAP1 DUP3 PUSH2 0xCE JUMPI JUMPDEST POP DUP2 PUSH2 0xC6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 PUSH2 0xBB JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0xB4 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xD6 JUMPI DUP3 PUSH1 0xE0 SWAP3 SUB ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 SSTORE STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0xD6 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x155 DUP2 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP2 AND EQ DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH2 0x20A PUSH1 0x4 CALLDATALOAD PUSH2 0x1F0 DUP2 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x23C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x21C JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x347 JUMPI PUSH2 0x2F9 SWAP1 PUSH2 0x28E PUSH32 0x0 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x2B7 PUSH32 0x0 PUSH2 0xF44 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2C5 DUP4 PUSH2 0x8B6 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0xF PUSH1 0xF8 SHL DUP7 MSTORE PUSH2 0x2EB PUSH1 0x20 SWAP4 PUSH1 0xE0 DUP6 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD SWAP1 PUSH2 0x212 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x212 JUMP JUMPDEST SWAP1 CHAINID PUSH1 0x60 DUP7 ADD MSTORE ADDRESS PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP7 ADD MSTORE DUP5 DUP3 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP1 DUP1 DUP6 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP5 ADD SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x330 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x321 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0xD6 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xD6 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xD6 JUMPI PUSH1 0x24 DUP3 ADD SWAP2 PUSH1 0x24 CALLDATASIZE SWAP2 DUP4 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xD6 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH2 0x3A3 DUP5 PUSH2 0x125 JUMP JUMPDEST PUSH0 SWAP3 DUP4 SWAP3 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO SWAP2 JUMPDEST DUP2 DUP5 LT PUSH2 0x3FF JUMPI POP POP POP POP CALLVALUE DUP3 SUB PUSH2 0x3DC JUMPI POP POP DUP1 PUSH2 0x3D1 JUMPI STOP JUMPDEST PUSH2 0x3DA SWAP2 PUSH2 0xBC7 JUMP JUMPDEST STOP JUMPDEST MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP2 POP REVERT JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP5 PUSH2 0x41B SWAP1 DUP6 PUSH2 0x413 DUP9 DUP7 DUP7 PUSH2 0x69B JUMP JUMPDEST ADD CALLDATALOAD SWAP1 PUSH2 0x6D1 JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH2 0x433 DUP6 PUSH2 0x42E DUP5 DUP8 DUP8 PUSH2 0x69B JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x44D JUMPI JUMPDEST PUSH2 0x445 SWAP1 PUSH2 0x688 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x3B6 JUMP JUMPDEST SWAP6 PUSH2 0x461 PUSH2 0x445 SWAP2 DUP7 PUSH2 0x413 DUP11 DUP8 DUP8 PUSH2 0x69B JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x43C JUMP JUMPDEST PUSH2 0x472 CALLDATASIZE PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 DUP2 ADD CALLDATALOAD DUP1 CALLVALUE SUB PUSH2 0x655 JUMPI PUSH0 SWAP2 PUSH2 0x48B DUP2 PUSH2 0x6FE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x619 JUMPI DUP2 ISZERO PUSH2 0x5E4 JUMPI DUP1 ISZERO PUSH2 0x5A7 JUMPI DUP3 PUSH2 0x59F JUMPI JUMPDEST POP DUP2 PUSH2 0x597 JUMPI JUMPDEST POP PUSH2 0x4CD JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x4BD JUMPI STOP JUMPDEST MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x574 SWAP5 PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP4 SWAP3 SWAP2 DUP2 SWAP1 SWAP6 PUSH2 0x563 PUSH2 0x527 PUSH1 0x20 DUP8 ADD PUSH2 0x6DE JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x536 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x555 PUSH2 0x545 DUP12 SWAP7 SWAP4 SWAP7 PUSH2 0x6DE JUMP JUMPDEST SWAP4 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP8 DUP9 PUSH2 0x985 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x8F3 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP5 DUP6 SWAP3 GAS PUSH2 0xBB5 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x40 SWAP1 LOG2 PUSH0 DUP1 DUP1 PUSH2 0x4B3 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x4A6 JUMP JUMPDEST DUP8 DUP5 PUSH2 0x3FB PUSH2 0x5B5 DUP9 PUSH2 0x6DE JUMP JUMPDEST SWAP3 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB DUP9 PUSH2 0x5F4 PUSH1 0x80 DUP9 ADD PUSH2 0x6EB JUMP JUMPDEST SWAP1 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB DUP9 PUSH2 0x629 PUSH1 0x20 DUP9 ADD PUSH2 0x6DE JUMP JUMPDEST SWAP1 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x696 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x674 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xDE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x696 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x6E8 DUP2 PUSH2 0x125 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xD6 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x81D DUP3 CALLDATALOAD SWAP2 PUSH2 0x70E DUP4 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP3 PUSH2 0x828 PUSH2 0x822 PUSH2 0x809 PUSH2 0x7F3 DUP8 CALLDATALOAD PUSH2 0x72A DUP2 PUSH2 0x125 JUMP JUMPDEST DUP10 PUSH2 0x7EB PUSH2 0x73A PUSH2 0x1F0 DUP4 PUSH2 0x6DE JUMP JUMPDEST SWAP8 PUSH2 0x555 PUSH1 0x80 DUP5 ADD SWAP10 PUSH2 0x74C DUP12 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x763 PUSH2 0x75C PUSH1 0xA0 DUP9 ADD DUP9 PUSH2 0x86F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x931 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP10 PUSH1 0x40 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD SWAP2 DUP12 SWAP4 PUSH6 0xFFFFFFFFFFFF SWAP4 PUSH1 0xE0 SWAP7 SWAP3 SWAP10 SWAP9 SWAP8 SWAP4 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 PUSH32 0x7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC DUP9 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x20 DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x803 PUSH2 0x75C PUSH1 0xC0 DUP12 ADD DUP12 PUSH2 0x86F JUMP JUMPDEST SWAP1 PUSH2 0xC3F JUMP JUMPDEST POP PUSH2 0x816 DUP2 SWAP8 SWAP3 SWAP8 PUSH2 0x967 JUMP JUMPDEST ISZERO SWAP7 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST SWAP2 PUSH2 0x6EB JUMP JUMPDEST SWAP5 DUP5 PUSH2 0x842 JUMPI JUMPDEST POP SWAP4 PUSH6 0xFFFFFFFFFFFF TIMESTAMP SWAP2 AND LT ISZERO SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x85D SWAP2 SWAP5 POP PUSH2 0x851 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ SWAP3 PUSH0 PUSH2 0x82F JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD6 JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0xD6 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x8A2 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8D2 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x93D DUP3 PUSH2 0x915 JUMP JUMPDEST SWAP2 PUSH2 0x94B PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x8F3 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xD6 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x4 GT ISZERO PUSH2 0x971 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x14 SWAP5 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH0 SWAP3 PUSH2 0x9B5 DUP2 PUSH2 0x6FE JUMP JUMPDEST SWAP5 PUSH2 0xA99 JUMPI JUMPDEST DUP3 PUSH2 0xA91 JUMPI JUMPDEST POP DUP2 PUSH2 0xA89 JUMPI JUMPDEST POP PUSH2 0x9D1 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0xA6D SWAP5 POP PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP2 SWAP1 SWAP3 PUSH0 DUP1 PUSH2 0xA28 PUSH1 0x20 DUP6 ADD PUSH2 0x6DE JUMP JUMPDEST PUSH2 0xA35 PUSH1 0xA0 DUP7 ADD DUP7 PUSH2 0x86F JUMP JUMPDEST PUSH2 0xA56 PUSH2 0xA41 DUP9 PUSH2 0x6DE JUMP JUMPDEST SWAP2 PUSH2 0x555 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 PUSH2 0x985 JUMP JUMPDEST MLOAD SWAP2 PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP6 DUP7 SWAP3 GAS PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x9C8 JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x9C1 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xB12 JUMPI DUP2 ISZERO PUSH2 0xADD JUMPI DUP1 PUSH2 0x9BB JUMPI DUP5 PUSH2 0xAB4 DUP6 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH2 0x3FB PUSH2 0xAEC PUSH1 0x80 DUP7 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB PUSH2 0xB21 PUSH1 0x20 DUP7 ADD PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 PUSH4 0x572B6C05 PUSH1 0xE0 SHL DUP3 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x24 DUP4 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP4 DUP4 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MSTORE MLOAD SWAP2 GAS STATICCALL PUSH0 MLOAD RETURNDATASIZE DUP3 PUSH2 0xBA9 JUMPI JUMPDEST POP DUP2 PUSH2 0xBA2 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP PUSH0 PUSH2 0xB98 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3F SWAP2 ADD CALLDATALOAD DIV GT PUSH2 0xBC5 JUMPI JUMP JUMPDEST INVALID JUMPDEST DUP2 SELFBALANCE LT PUSH2 0xC27 JUMPI PUSH0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL RETURNDATASIZE ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH2 0xBF1 DUP2 PUSH2 0x915 JUMP JUMPDEST SWAP1 PUSH2 0xBFF PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x8F3 JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xC10 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xC09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP2 MLOAD SWAP2 SWAP1 PUSH1 0x41 DUP4 SUB PUSH2 0xC6F JUMPI PUSH2 0xC68 SWAP3 POP PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP2 PUSH1 0x2 SWAP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0xCFC JUMPI SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP6 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH0 SWAP3 DUP4 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xCF0 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xCE7 JUMPI SWAP2 DUP2 SWAP1 JUMP JUMPDEST POP DUP1 SWAP2 PUSH1 0x1 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP PUSH0 SWAP2 PUSH1 0x3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0xD12 PUSH2 0xD2D JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE1E JUMPI JUMPDEST ISZERO PUSH2 0xD88 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0xE18 DUP2 PUSH2 0x8D7 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0xD5F JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xE58 JUMPI PUSH2 0x6E8 SWAP1 PUSH2 0x100E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xF3A JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xF26 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xF07 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEA8 JUMPI JUMPDEST POP POP POP PUSH2 0x6E8 SWAP3 POP SUB DUP3 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xED5 PUSH0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xEF1 JUMPI POP POP POP PUSH2 0x6E8 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xED9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x6E8 SWAP5 SWAP2 SWAP3 POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xE71 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xF55 JUMPI PUSH2 0x6E8 SWAP1 PUSH2 0x100E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 SHR SWAP2 PUSH0 SWAP2 DUP1 DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x1004 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xF26 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xF07 JUMPI POP PUSH1 0x1 EQ PUSH2 0xFA4 JUMPI POP POP POP PUSH2 0x6E8 SWAP3 POP SUB DUP3 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xFD2 PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xFEE JUMPI POP POP POP PUSH2 0x6E8 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xFD6 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xF6E JUMP JUMPDEST PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x1043 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x425C091B21 DUP2 JUMPDEST DUP8 0xB3 SMOD RETURN CALLDATALOAD 0x22 0xE3 LT EXTCODEHASH PUSH5 0x892154DB6D GAS CHAINID PUSH20 0x89234A8ED18564736F6C63430008140033000000 ",
							"sourceMap": "158:281:14:-:0;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;158:281:14;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;158:281:14;;295:42;1255:37:1;;3401:45:10;;;:::i;:::-;3393:53;;;;;3467:51;;;:::i;:::-;3456:62;;;;;158:281:14;3542:22:10;;3528:36;;;;;;158:281:14;3591:25:10;;3574:42;;;;;;3644:13;3627:30;;158:281:14;;4204:80:10;158:281:14;4204:80:10;;2079:95;;;;158:281:14;2079:95:10;;;;;;;3644:13;1255:37:1;2079:95:10;;;4278:4;2079:95;;;;;4204:80;;3627:30;158:281:14;;;;;;;;;;;;;;;;;;;;4194:91:10;;2079:95;3667:48;4278:4;3725:27;;158:281:14;;;;;;1255:37:1;158:281:14;;;;;;;;;;2079:95:10;158:281:14;;;;;3627:30:10;158:281:14;;;;;3725:27:10;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;158:281:14;;;;;;;:::o;2914:340:6:-;158:281:14;;3059:2:6;;158:281:14;3037:24:6;;;3059:2;;;158:281:14;;1854:2:6;158:281:14;;1840:16:6;1836:72;;158:281:14;;;;;;;;;;;;1949:36:6;;3077:27;:::o;158:281:14:-;;;;;;;;;;1949:36:6;3077:27;:::o;1836:72::-;158:281:14;;;1879:18:6;;;;;;;;;;;158:281:14;;;;;;;;;3432:13:10;158:281:14;;;;;;;;;;;;3432:13:10;158:281:14;;;;;;1854:2:6;158:281:14;;;;;;;1879:18:6;;;;158:281:14;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;3033:215:6;-1:-1:-1;;;;;158:281:14;;;;3432:13:10;158:281:14;;;;;;;;;;;;;;;;3033:215:6;158:281:14;;;;;;;;;;;3033:215:6;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;158:281:14:-;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;158:281:14:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;158:281:14;;;;;;;;;;;;;;;2914:340:6;158:281:14;;3059:2:6;;3037:24;;;3059:2;;;158:281:14;1854:2:6;158:281:14;;1840:16:6;1836:72;;158:281:14;;;;;;;;;;;;1949:36:6;;3077:27;:::o;1836:72::-;158:281:14;;;1879:18:6;;;;;;;;;;;158:281:14;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;;1854:2:6;158:281:14;;;;;;;1879:18:6;;;;158:281:14;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;3033:215:6;158:281:14;;;-1:-1:-1;;;;;158:281:14;;;;;;;;;;;;;;;;;;3033:215:6;158:281:14;;;;;;;;;;;3033:215:6;158:281:14;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;-1:-1:-1;;;;158:281:14;;;;;;;;;;;;;1390:66:6;;3195:42::o;158:281:14:-;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;-1:-1:-1;158:281:14;;-1:-1:-1;158:281:14;;-1:-1:-1;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;1390:66:6;3195:42;:::o;158:281:14:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;-1:-1:-1;158:281:14;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_available_length_bytes": {
									"entryPoint": 2353,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_struct_ForwardRequestData_calldata": {
									"entryPoint": 218,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_address_address": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_bytes32_address_address_uint256_uint256_uint256_uint48_bytes32": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_packed_bytes_calldata_address": {
									"entryPoint": 2437,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 530,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_uint256_bool": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_uint256_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_uint48": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"access_calldata_tail_bytes_calldata": {
									"entryPoint": 2159,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"array_allocation_size_bytes": {
									"entryPoint": 2325,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_string_storage_ptr": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_string_storage_ptr_7516": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_string": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"calldata_array_index_access_struct_ForwardRequestData_calldata_dyn_calldata": {
									"entryPoint": 1691,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 1745,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_address": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_bool": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"external_fun_eip712Domain": {
									"entryPoint": 592,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_execute": {
									"entryPoint": 1129,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_executeBatch": {
									"entryPoint": 842,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_isTrustedForwarder": {
									"entryPoint": 310,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_nonces": {
									"entryPoint": 462,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_setNumber": {
									"entryPoint": 268,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_trustedForwarder": {
									"entryPoint": 394,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 2291,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_7512": {
									"entryPoint": 2230,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_7514": {
									"entryPoint": 2263,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_checkForwardedGas": {
									"entryPoint": 2997,
									"id": 635,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_domainSeparatorV4": {
									"entryPoint": 3373,
									"id": 2032,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_execute": {
									"entryPoint": 2472,
									"id": 574,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_hashTypedDataV4": {
									"entryPoint": 3335,
									"id": 2069,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_isTrustedByTarget": {
									"entryPoint": 2894,
									"id": 616,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_nonces": {
									"entryPoint": null,
									"id": 938,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_sendValue": {
									"entryPoint": 3015,
									"id": 693,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_toString": {
									"entryPoint": 4110,
									"id": 1065,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback": {
									"entryPoint": 3908,
									"id": 1164,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_toStringWithFallback_4207": {
									"entryPoint": 3655,
									"id": 1164,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_tryRecover": {
									"entryPoint": 3193,
									"id": 1823,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"fun_tryRecover_1635": {
									"entryPoint": 3135,
									"id": 1635,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"fun_useNonce": {
									"entryPoint": null,
									"id": 953,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_validate": {
									"entryPoint": 1790,
									"id": 406,
									"parameterSlots": 1,
									"returnSlots": 4
								},
								"increment_uint256": {
									"entryPoint": 1672,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1652,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 2210,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"read_from_calldatat_address": {
									"entryPoint": 1758,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"read_from_calldatat_uint48": {
									"entryPoint": 1771,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_assert_enum_RecoverError": {
									"entryPoint": 2407,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 293,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"34": [
									{
										"length": 32,
										"start": 355
									},
									{
										"length": 32,
										"start": 415
									}
								],
								"1930": [
									{
										"length": 32,
										"start": 3430
									}
								],
								"1932": [
									{
										"length": 32,
										"start": 3617
									}
								],
								"1934": [
									{
										"length": 32,
										"start": 3376
									}
								],
								"1936": [
									{
										"length": 32,
										"start": 3509
									}
								],
								"1938": [
									{
										"length": 32,
										"start": 3547
									}
								],
								"1941": [
									{
										"length": 32,
										"start": 618
									}
								],
								"1944": [
									{
										"length": 32,
										"start": 659
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x19D8D38C EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x3FB5C1CB EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x8A JUMPI DUP1 PUSH4 0x7DA0A877 EQ PUSH2 0x85 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x80 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7B JUMPI DUP1 PUSH4 0xCCF96B4A EQ PUSH2 0x76 JUMPI PUSH4 0xDF905CAF EQ PUSH2 0x71 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x250 JUMP JUMPDEST PUSH2 0x1CE JUMP JUMPDEST PUSH2 0x18A JUMP JUMPDEST PUSH2 0x136 JUMP JUMPDEST PUSH2 0x10C JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH2 0xAC PUSH2 0xA7 CALLDATASIZE PUSH2 0xDA JUMP JUMPDEST PUSH2 0x6FE JUMP JUMPDEST POP SWAP1 DUP3 PUSH2 0xCE JUMPI JUMPDEST POP DUP2 PUSH2 0xC6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 PUSH2 0xBB JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0xB4 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x3 NOT SWAP1 PUSH1 0x20 DUP2 DUP4 ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xD6 JUMPI DUP3 PUSH1 0xE0 SWAP3 SUB ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 SSTORE STOP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0xD6 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x155 DUP2 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH32 0x0 AND SWAP2 AND EQ DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x20 PUSH2 0x20A PUSH1 0x4 CALLDATALOAD PUSH2 0x1F0 DUP2 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x23C JUMPI POP POP DUP3 PUSH0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x21C JUMP JUMPDEST CALLVALUE PUSH2 0xD6 JUMPI PUSH0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x347 JUMPI PUSH2 0x2F9 SWAP1 PUSH2 0x28E PUSH32 0x0 PUSH2 0xE47 JUMP JUMPDEST PUSH2 0x2B7 PUSH32 0x0 PUSH2 0xF44 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2C5 DUP4 PUSH2 0x8B6 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0xF PUSH1 0xF8 SHL DUP7 MSTORE PUSH2 0x2EB PUSH1 0x20 SWAP4 PUSH1 0xE0 DUP6 DUP10 ADD MSTORE PUSH1 0xE0 DUP9 ADD SWAP1 PUSH2 0x212 JUMP JUMPDEST SWAP1 DUP7 DUP3 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x212 JUMP JUMPDEST SWAP1 CHAINID PUSH1 0x60 DUP7 ADD MSTORE ADDRESS PUSH1 0x80 DUP7 ADD MSTORE DUP3 PUSH1 0xA0 DUP7 ADD MSTORE DUP5 DUP3 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP1 DUP1 DUP6 MLOAD SWAP4 DUP5 DUP2 MSTORE ADD SWAP5 ADD SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x330 JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x321 JUMP JUMPDEST DUP1 REVERT JUMPDEST PUSH1 0x40 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD6 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT PUSH2 0xD6 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xD6 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0xD6 JUMPI PUSH1 0x24 DUP3 ADD SWAP2 PUSH1 0x24 CALLDATASIZE SWAP2 DUP4 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xD6 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD SWAP3 PUSH2 0x3A3 DUP5 PUSH2 0x125 JUMP JUMPDEST PUSH0 SWAP3 DUP4 SWAP3 DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO SWAP2 JUMPDEST DUP2 DUP5 LT PUSH2 0x3FF JUMPI POP POP POP POP CALLVALUE DUP3 SUB PUSH2 0x3DC JUMPI POP POP DUP1 PUSH2 0x3D1 JUMPI STOP JUMPDEST PUSH2 0x3DA SWAP2 PUSH2 0xBC7 JUMP JUMPDEST STOP JUMPDEST MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP2 POP REVERT JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP5 PUSH2 0x41B SWAP1 DUP6 PUSH2 0x413 DUP9 DUP7 DUP7 PUSH2 0x69B JUMP JUMPDEST ADD CALLDATALOAD SWAP1 PUSH2 0x6D1 JUMP JUMPDEST SWAP5 PUSH2 0x437 PUSH2 0x433 DUP6 PUSH2 0x42E DUP5 DUP8 DUP8 PUSH2 0x69B JUMP JUMPDEST PUSH2 0x9A8 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x44D JUMPI JUMPDEST PUSH2 0x445 SWAP1 PUSH2 0x688 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x3B6 JUMP JUMPDEST SWAP6 PUSH2 0x461 PUSH2 0x445 SWAP2 DUP7 PUSH2 0x413 DUP11 DUP8 DUP8 PUSH2 0x69B JUMP JUMPDEST SWAP7 SWAP1 POP PUSH2 0x43C JUMP JUMPDEST PUSH2 0x472 CALLDATASIZE PUSH2 0xDA JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 DUP2 ADD CALLDATALOAD DUP1 CALLVALUE SUB PUSH2 0x655 JUMPI PUSH0 SWAP2 PUSH2 0x48B DUP2 PUSH2 0x6FE JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP3 ISZERO PUSH2 0x619 JUMPI DUP2 ISZERO PUSH2 0x5E4 JUMPI DUP1 ISZERO PUSH2 0x5A7 JUMPI DUP3 PUSH2 0x59F JUMPI JUMPDEST POP DUP2 PUSH2 0x597 JUMPI JUMPDEST POP PUSH2 0x4CD JUMPI JUMPDEST POP POP POP ISZERO PUSH2 0x4BD JUMPI STOP JUMPDEST MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0x574 SWAP5 PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP4 SWAP3 SWAP2 DUP2 SWAP1 SWAP6 PUSH2 0x563 PUSH2 0x527 PUSH1 0x20 DUP8 ADD PUSH2 0x6DE JUMP JUMPDEST SWAP2 DUP11 PUSH2 0x536 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0x86F JUMP JUMPDEST PUSH2 0x555 PUSH2 0x545 DUP12 SWAP7 SWAP4 SWAP7 PUSH2 0x6DE JUMP JUMPDEST SWAP4 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP8 DUP9 PUSH2 0x985 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x8F3 JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP5 DUP6 SWAP3 GAS PUSH2 0xBB5 JUMP JUMPDEST DUP6 MLOAD SWAP4 DUP5 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x40 SWAP1 LOG2 PUSH0 DUP1 DUP1 PUSH2 0x4B3 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x4AD JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x4A6 JUMP JUMPDEST DUP8 DUP5 PUSH2 0x3FB PUSH2 0x5B5 DUP9 PUSH2 0x6DE JUMP JUMPDEST SWAP3 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB DUP9 PUSH2 0x5F4 PUSH1 0x80 DUP9 ADD PUSH2 0x6EB JUMP JUMPDEST SWAP1 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB DUP9 PUSH2 0x629 PUSH1 0x20 DUP9 ADD PUSH2 0x6DE JUMP JUMPDEST SWAP1 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST DUP3 MLOAD PUSH4 0x70647F79 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLVALUE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 NOT DUP2 EQ PUSH2 0x696 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x674 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0xDE NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x696 JUMPI JUMP JUMPDEST CALLDATALOAD PUSH2 0x6E8 DUP2 PUSH2 0x125 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 SUB PUSH2 0xD6 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x81D DUP3 CALLDATALOAD SWAP2 PUSH2 0x70E DUP4 PUSH2 0x125 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP3 PUSH2 0x828 PUSH2 0x822 PUSH2 0x809 PUSH2 0x7F3 DUP8 CALLDATALOAD PUSH2 0x72A DUP2 PUSH2 0x125 JUMP JUMPDEST DUP10 PUSH2 0x7EB PUSH2 0x73A PUSH2 0x1F0 DUP4 PUSH2 0x6DE JUMP JUMPDEST SWAP8 PUSH2 0x555 PUSH1 0x80 DUP5 ADD SWAP10 PUSH2 0x74C DUP12 PUSH2 0x6EB JUMP JUMPDEST PUSH2 0x763 PUSH2 0x75C PUSH1 0xA0 DUP9 ADD DUP9 PUSH2 0x86F JUMP JUMPDEST CALLDATASIZE SWAP2 PUSH2 0x931 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP7 DUP8 SWAP6 PUSH1 0x20 DUP8 ADD SWAP10 PUSH1 0x40 PUSH1 0x60 DUP5 ADD CALLDATALOAD SWAP4 ADD CALLDATALOAD SWAP2 DUP12 SWAP4 PUSH6 0xFFFFFFFFFFFF SWAP4 PUSH1 0xE0 SWAP7 SWAP3 SWAP10 SWAP9 SWAP8 SWAP4 SWAP10 PUSH2 0x100 DUP8 ADD SWAP11 PUSH32 0x7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC DUP9 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x20 DUP10 ADD MSTORE AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE AND PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xD07 JUMP JUMPDEST PUSH2 0x803 PUSH2 0x75C PUSH1 0xC0 DUP12 ADD DUP12 PUSH2 0x86F JUMP JUMPDEST SWAP1 PUSH2 0xC3F JUMP JUMPDEST POP PUSH2 0x816 DUP2 SWAP8 SWAP3 SWAP8 PUSH2 0x967 JUMP JUMPDEST ISZERO SWAP7 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0xB4E JUMP JUMPDEST SWAP2 PUSH2 0x6EB JUMP JUMPDEST SWAP5 DUP5 PUSH2 0x842 JUMPI JUMPDEST POP SWAP4 PUSH6 0xFFFFFFFFFFFF TIMESTAMP SWAP2 AND LT ISZERO SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x85D SWAP2 SWAP5 POP PUSH2 0x851 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EQ SWAP3 PUSH0 PUSH2 0x82F JUMP JUMPDEST SWAP1 CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0xD6 JUMPI ADD DUP1 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD6 JUMPI PUSH1 0x20 ADD SWAP2 DUP2 CALLDATASIZE SUB DUP4 SGT PUSH2 0xD6 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x8A2 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x8D2 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x93D DUP3 PUSH2 0x915 JUMP JUMPDEST SWAP2 PUSH2 0x94B PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x8F3 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0xD6 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST PUSH1 0x4 GT ISZERO PUSH2 0x971 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 PUSH1 0x14 SWAP5 SWAP4 SWAP3 DUP3 CALLDATACOPY ADD SWAP1 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT SWAP1 PUSH1 0x60 SHL AND DUP2 MSTORE ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH0 SWAP3 PUSH2 0x9B5 DUP2 PUSH2 0x6FE JUMP JUMPDEST SWAP5 PUSH2 0xA99 JUMPI JUMPDEST DUP3 PUSH2 0xA91 JUMPI JUMPDEST POP DUP2 PUSH2 0xA89 JUMPI JUMPDEST POP PUSH2 0x9D1 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 0xA6D SWAP5 POP PUSH32 0x842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C SWAP2 SWAP1 SWAP3 PUSH0 DUP1 PUSH2 0xA28 PUSH1 0x20 DUP6 ADD PUSH2 0x6DE JUMP JUMPDEST PUSH2 0xA35 PUSH1 0xA0 DUP7 ADD DUP7 PUSH2 0x86F JUMP JUMPDEST PUSH2 0xA56 PUSH2 0xA41 DUP9 PUSH2 0x6DE JUMP JUMPDEST SWAP2 PUSH2 0x555 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 ADD SWAP7 DUP8 PUSH2 0x985 JUMP JUMPDEST MLOAD SWAP2 PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP1 PUSH1 0x60 DUP9 ADD CALLDATALOAD CALL SWAP6 DUP7 SWAP3 GAS PUSH2 0xBB5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG2 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x9C8 JUMP JUMPDEST SWAP2 POP PUSH0 PUSH2 0x9C1 JUMP JUMPDEST DUP3 ISZERO PUSH2 0xB12 JUMPI DUP2 ISZERO PUSH2 0xADD JUMPI DUP1 PUSH2 0x9BB JUMPI DUP5 PUSH2 0xAB4 DUP6 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6422D02B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 SWAP1 REVERT JUMPDEST PUSH2 0x3FB PUSH2 0xAEC PUSH1 0x80 DUP7 ADD PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A777AC5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x24 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH2 0x3FB PUSH2 0xB21 PUSH1 0x20 DUP7 ADD PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD2650CD1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 PUSH4 0x572B6C05 PUSH1 0xE0 SHL DUP3 MSTORE ADDRESS PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x24 DUP4 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP4 DUP4 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x20 SWAP4 PUSH0 SWAP4 PUSH1 0x40 MSTORE MLOAD SWAP2 GAS STATICCALL PUSH0 MLOAD RETURNDATASIZE DUP3 PUSH2 0xBA9 JUMPI JUMPDEST POP DUP2 PUSH2 0xBA2 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP PUSH0 PUSH2 0xB98 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3F SWAP2 ADD CALLDATALOAD DIV GT PUSH2 0xBC5 JUMPI JUMP JUMPDEST INVALID JUMPDEST DUP2 SELFBALANCE LT PUSH2 0xC27 JUMPI PUSH0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL RETURNDATASIZE ISZERO PUSH2 0xC22 JUMPI RETURNDATASIZE PUSH2 0xBF1 DUP2 PUSH2 0x915 JUMP JUMPDEST SWAP1 PUSH2 0xBFF PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x8F3 JUMP JUMPDEST DUP2 MSTORE PUSH0 PUSH1 0x20 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0xC10 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0xC09 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP2 MLOAD SWAP2 SWAP1 PUSH1 0x41 DUP4 SUB PUSH2 0xC6F JUMPI PUSH2 0xC68 SWAP3 POP PUSH1 0x20 DUP3 ADD MLOAD SWAP1 PUSH1 0x60 PUSH1 0x40 DUP5 ADD MLOAD SWAP4 ADD MLOAD PUSH0 BYTE SWAP1 PUSH2 0xC79 JUMP JUMPDEST SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMP JUMPDEST POP POP PUSH0 SWAP2 PUSH1 0x2 SWAP2 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT PUSH2 0xCFC JUMPI SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH1 0xFF PUSH1 0x80 SWAP6 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE AND DUP5 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH0 SWAP3 DUP4 SWAP2 DUP3 DUP1 MSTORE PUSH1 0x1 GAS STATICCALL ISZERO PUSH2 0xCF0 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xCE7 JUMPI SWAP2 DUP2 SWAP1 JUMP JUMPDEST POP DUP1 SWAP2 PUSH1 0x1 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP POP PUSH0 SWAP2 PUSH1 0x3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x42 SWAP1 PUSH2 0xD12 PUSH2 0xD2D JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1901 PUSH1 0xF0 SHL DUP4 MSTORE PUSH1 0x2 DUP4 ADD MSTORE PUSH1 0x22 DUP3 ADD MSTORE KECCAK256 SWAP1 JUMP JUMPDEST ADDRESS PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE1E JUMPI JUMPDEST ISZERO PUSH2 0xD88 JUMPI PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP3 MSTORE PUSH32 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 MSTORE PUSH2 0xE18 DUP2 PUSH2 0x8D7 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST POP PUSH32 0x0 CHAINID EQ PUSH2 0xD5F JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xE58 JUMPI PUSH2 0x6E8 SWAP1 PUSH2 0x100E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH0 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 DUP2 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xF3A JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xF26 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xF07 JUMPI POP PUSH1 0x1 EQ PUSH2 0xEA8 JUMPI JUMPDEST POP POP POP PUSH2 0x6E8 SWAP3 POP SUB DUP3 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xED5 PUSH0 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xEF1 JUMPI POP POP POP PUSH2 0x6E8 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xED9 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x6E8 SWAP5 SWAP2 SWAP3 POP PUSH1 0xFF NOT AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xE71 JUMP JUMPDEST PUSH1 0xFF DUP2 EQ PUSH2 0xF55 JUMPI PUSH2 0x6E8 SWAP1 PUSH2 0x100E JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 SHR SWAP2 PUSH0 SWAP2 DUP1 DUP3 AND SWAP2 DUP3 ISZERO PUSH2 0x1004 JUMPI JUMPDEST PUSH1 0x20 SWAP2 DUP3 DUP7 LT DUP5 EQ PUSH2 0xF26 JUMPI DUP6 DUP8 MSTORE DUP7 SWAP5 SWAP4 PUSH1 0x20 DUP7 ADD SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0xF07 JUMPI POP PUSH1 0x1 EQ PUSH2 0xFA4 JUMPI POP POP POP PUSH2 0x6E8 SWAP3 POP SUB DUP3 PUSH2 0x8F3 JUMP JUMPDEST SWAP3 POP SWAP4 PUSH2 0xFD2 PUSH1 0x1 PUSH0 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 SWAP1 JUMP JUMPDEST SWAP5 PUSH0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0xFEE JUMPI POP POP POP PUSH2 0x6E8 SWAP4 POP ADD PUSH0 DUP1 DUP1 PUSH2 0xE99 JUMP JUMPDEST DUP7 SLOAD DUP6 DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP6 POP SWAP4 DUP2 ADD SWAP4 PUSH2 0xFD6 JUMP JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xF6E JUMP JUMPDEST PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x1F DUP3 GT PUSH2 0x1043 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH1 0x40 DUP4 ADD DUP4 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x8D2 JUMPI PUSH1 0x40 MSTORE DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x425C091B21 DUP2 JUMPDEST DUP8 0xB3 SMOD RETURN CALLDATALOAD 0x22 0xE3 LT EXTCODEHASH PUSH5 0x892154DB6D GAS CHAINID PUSH20 0x89234A8ED18564736F6C63430008140033000000 ",
							"sourceMap": "158:281:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;5004:18:2;158:281:14;;;:::i;:::-;5004:18:2;:::i;:::-;5039:28;;;;;158:281:14;5039:43:2;;;;158:281:14;;;;;;;;;;5039:43:2;;;;;;:28;;-1:-1:-1;5039:28:2;;;158:281:14;;;;;-1:-1:-1;;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;158:281:14;;;;;;;;;;-1:-1:-1;;;;;158:281:14;;;;;:::o;:::-;;;;;;-1:-1:-1;;158:281:14;;;;;;;;;;:::i;:::-;;;;;;;;;1462:17:1;;158:281:14;;;1686:31:1;158:281:14;;;;;;;;;-1:-1:-1;;158:281:14;;;;;;1462:17:1;-1:-1:-1;;;;;158:281:14;;;;;;;;;;;;-1:-1:-1;;158:281:14;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;158:281:14;-1:-1:-1;158:281:14;;;624:7:5;158:281:14;;;;;;;538:107:5;158:281:14;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6099:5:10;:41;:5;:41;:::i;:::-;6554:47;:8;:47;:::i;:::-;158:281:14;;;3070:141:2;;;;:::i;:::-;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;5590:13:10;;158:281:14;;;;5625:4:10;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;158:281:14;;;;;;;;6584:16:10;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7708:1:2;;;;;;-1:-1:-1;;;;;158:281:14;;7682:28:2;;7798:19;;;;;;8186:9;;;;;8169:26;;8165:121;;8453:16;;;8449:328;;158:281:14;8449:328:2;8754:11;;;:::i;:::-;158:281:14;8165:121:2;158:281:14;-1:-1:-1;;;8218:57:2;;158:281:14;8218:57:2;;158:281:14;;;;8186:9:2;158:281:14;;;;;;-1:-1:-1;8218:57:2;;;;;7819:3;7855:11;;;;7838:34;7855:11;;;;;;;:::i;:::-;:17;158:281:14;7838:34:2;;:::i;:::-;7910:11;7948:8;7901:29;7910:11;;;;;;:::i;:::-;7901:29;:::i;:::-;7948:8;;158:281:14;7948:8:2;7944:79;;7819:3;;;;:::i;:::-;7787:9;;;;;7944:79;7991:11;7976:32;7819:3;7991:11;;;;;;;:::i;7976:32::-;7944:79;;;;;158:281:14;;;;:::i;:::-;5911:13:2;;;;;158:281:14;5898:9:2;;:26;5894:121;;-1:-1:-1;11237:18:2;;;;:::i;:::-;11492:19;;;;;11488:115;;11621:7;;11617:101;;11736:12;;11732:109;;11938:33;;;158:281:14;11938:43:2;;;;158:281:14;11934:712:2;;;158:281:14;6029:24:2;;;;6025:87;;158:281:14;6025:87:2;158:281:14;-1:-1:-1;;;6076:25:2;;158:281:14;;6076:25:2;11934:712;-1:-1:-1;;;;;158:281:14;;-1:-1:-1;158:281:14;;;1121:7:5;158:281:14;;;;;;;;;;;;;12554:7:2;;12582:53;;12105:17;;;;12192:10;12279:44;12192:10;;;;;:::i;:::-;12296:12;;;;;;;;:::i;:::-;12279:44;12310:12;;;;;;:::i;:::-;158:281:14;;12279:44:2;;;12192:10;12279:44;;;;;:::i;:::-;;158:281:14;;12279:44:2;;;;;;:::i;:::-;12368:144;12154:11;;;;158:281:14;12368:144:2;;;;;12554:7;:::i;:::-;158:281:14;;;;;;;;;;;;-1:-1:-1;;;;;158:281:14;;;;12582:53:2;11934:712;;;;;11938:43;;;;;;:33;;-1:-1:-1;11938:33:2;;;11732:109;11813:12;;11775:51;11813:12;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11775:51:2;;-1:-1:-1;;;;;158:281:14;;;11775:51:2;;;158:281:14;;;;;;;;;;;;;;;;;11617:101:2;11655:48;11686:16;;;;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11655:48:2;;158:281:14;;;;11655:48:2;;;3070:141;158:281:14;;;;;;;;11488:115:2;11538:50;11562:10;;;;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11538:50:2;;-1:-1:-1;;;;;158:281:14;;;11538:50:2;;;158:281:14;11582:4:2;158:281:14;;;;;;;;;;;;5894:121:2;158:281:14;;-1:-1:-1;;;5947:57:2;;158:281:14;5947:57:2;;158:281:14;;;;5898:9:2;158:281:14;;;;;;8218:57:2;158:281:14;;;;;;;;;;;;;-1:-1:-1;;158:281:14;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;:::o;8967:457:2:-;;9274:10;158:281:14;;;;;;:::i;:::-;10079:10:2;;;158:281:14;9299:16:2;9255:30;9909:445;:415;158:281:14;;;;;:::i;:::-;10186:12:2;9966:334;10179:20;10186:12;;;:::i;10179:20::-;10221:16;9966:334;10221:16;;;;;;;:::i;:::-;3070:141;10269:12;;;;;;:::i;:::-;3070:141;;;:::i;:::-;10079:10;158:281:14;;;;10259:23:2;158:281:14;10111:13:2;158:281:14;9966:334:2;;;10079:10;9966:334;;10146:11;10111:13;10146:11;;;158:281:14;10111:13:2;;158:281:14;9966:334:2;;3070:141;158:281:14;3070:141:2;;;;;;;;;;;;158:281:14;3070:141:2;158:281:14;;;;;;;;;;3070:141:2;;;158:281:14;;3070:141:2;;;158:281:14;3070:141:2;;;158:281:14;3070:141:2;;;158:281:14;;3070:141:2;;158:281:14;;3070:141:2;;;;;158:281:14;3070:141:2;9966:334;158:281:14;9939:375:2;;9909:415;:::i;:::-;3070:141;10336:17;;;;;;:::i;3070:141::-;9909:445;;:::i;:::-;3070:141;;;;;;;:::i;:::-;10373:33;9274:10;;:::i;:::-;9255:30;:::i;:::-;9299:16;;:::i;:::-;9348:36;;;;8967:457;9234:183;9319:15;158:281:14;9319:15:2;158:281:14;;9299:35:2;;9234:183;;8967:457;:::o;9348:36::-;9359:25;9372:12;;;;;;:::i;:::-;-1:-1:-1;;;;;158:281:14;;;9359:25:2;-1:-1:-1;;;;;158:281:14;;9359:25:2;;9348:36;;;3070:141;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;158:281:14;;;3070:141:2;;;;;;;;;158:281:14;3070:141:2;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;2079:95:10;3070:141:2;;;;;;;;;;;;;:::o;:::-;;158:281:14;;;;;;3070:141:2;;;;;;;;;;;;;:::o;:::-;;;;;;158:281:14;;-1:-1:-1;;158:281:14;3070:141:2;;;:::o;:::-;;;;;;;:::i;:::-;158:281:14;3070:141:2;158:281:14;;3070:141:2;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;3070:141:2;;;;;;:::o;:::-;;-1:-1:-1;3070:141:2;;;:::o;:::-;158:281:14;;;3070:141:2;;;;;;;;158:281:14;;;;;;3070:141:2;;;158:281:14;;;;;;;;;;;:::o;11009:1643:2:-;;;158:281:14;11237:18:2;;;;:::i;:::-;11449:402;;;11009:1643;11938:33;;;11009:1643;11938:43;;;;11009:1643;11934:712;;;11009:1643;;:::o;11934:712::-;-1:-1:-1;;;;;158:281:14;;-1:-1:-1;158:281:14;;;1121:7:5;158:281:14;;;;;;;;;;;;;12554:7:2;;-1:-1:-1;12582:53:2;;12105:17;12192:10;158:281:14;12192:10:2;;;;;;:::i;:::-;12296:12;;;;;;:::i;:::-;12279:44;12310:12;;;:::i;:::-;158:281:14;12279:44:2;12232:13;158:281:14;12279:44:2;;;12192:10;12279:44;;;;;:::i;:::-;12368:144;12232:13;;;;158:281:14;12154:11:2;;;;158:281:14;12368:144:2;;;;;12554:7;:::i;:::-;12232:13;158:281:14;;;;;;;;;;;;-1:-1:-1;;;;;158:281:14;;12582:53:2;11009:1643::o;11938:43::-;;;;;;:33;;-1:-1:-1;11938:33:2;;;11449:402;11492:19;;11488:115;;11621:7;;11617:101;;11736:12;11449:402;11732:109;11813:12;;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11775:51:2;;-1:-1:-1;;;;;158:281:14;;;11775:51:2;;;158:281:14;;;;;;;;;8218:57:2;11617:101;11655:48;11686:16;;;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11655:48:2;;158:281:14;;;;11655:48:2;;;3070:141;158:281:14;;;;;;;;11488:115:2;11538:50;11562:10;;;;;:::i;:::-;158:281:14;;-1:-1:-1;;;11538:50:2;;-1:-1:-1;;;;;158:281:14;;;11538:50:2;;;158:281:14;11582:4:2;158:281:14;;;;;;;;;;;;12875:1104:2;158:281:14;;12986:66:2;;;;;;;;;;13045:4;12986:66;;;158:281:14;12986:66:2;;;158:281:14;3070:141:2;;;;;;;;;;;;12986:66;3070:141;-1:-1:-1;3070:141:2;158:281:14;3070:141:2;13185:722;;;;-1:-1:-1;13185:722:2;;13924:29;;;12875:1104;13924:48;;;;13917:55;12875:1104;:::o;13924:48::-;13957:15;;;;12875:1104;:::o;13924:29::-;12986:66;-1:-1:-1;13935:18:2;;-1:-1:-1;13924:29:2;;;14599:2198;;16351:11;16365:2;14599:2198;16351:11;158:281:14;;-1:-1:-1;16337:454:2;;14599:2198::o;16337:454::-;16731:50;1531:331:3;1616:21;;:30;1612:109;;1750:33;;;;;;;;-1:-1:-1;;;;;158:281:14;1750:33:3;;158:281:14;;;;;;;;:::i;:::-;;3070:141:2;158:281:14;;3070:141:2;;;:::i;:::-;158:281:14;;1750:33:3;158:281:14;;;;;;1797:8:3;1793:63;;1531:331::o;1793:63::-;158:281:14;;-1:-1:-1;;;1828:17:3;;;;;158:281:14;;;1612:109:3;158:281:14;;-1:-1:-1;;;1669:41:3;;1624:4;1669:41;;;158:281:14;;;1669:41:3;2129:766:9;158:281:14;;;2129:766:9;2276:2;2256:22;;2276:2;;2739:25;2539:180;;;;;;;;;;;;;;;-1:-1:-1;2539:180:9;2739:25;;:::i;:::-;2732:32;;;;;:::o;2252:637::-;2795:83;;2811:1;2795:83;2815:35;2795:83;;:::o;5140:1530::-;;;6199:66;6186:79;;6182:164;;158:281:14;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6457:24:9;;;;;;;;;;;;;;-1:-1:-1;;;;;158:281:14;;6495:20:9;6491:113;;6614:49;;5140:1530;:::o;6491:113::-;6531:62;;;6457:24;6531:62;;:::o;6457:24::-;158:281:14;;;;;;;;;;6182:164:9;6281:54;;;6297:1;6281:54;6301:30;6281:54;;:::o;4917:176:10:-;3515:233:11;4917:176:10;5053:20;;:::i;:::-;3515:233:11;;;;-1:-1:-1;;;3515:233:11;;;;;;;;;;;4917:176:10;:::o;3845:262::-;3929:4;3938:11;-1:-1:-1;;;;;158:281:14;3921:28:10;;:63;;3845:262;3917:184;;;4007:22;4000:29;:::o;3917:184::-;158:281:14;;4204:80:10;;;158:281:14;2079:95:10;158:281:14;;4226:11:10;158:281:14;2079:95:10;;158:281:14;4239:14:10;2079:95;;;158:281:14;4255:13:10;2079:95;;;158:281:14;3929:4:10;158:281:14;2079:95:10;;158:281:14;;4204:80:10;;;;;:::i;:::-;158:281:14;4194:91:10;;4060:30;:::o;3921:63::-;3970:14;;3953:13;:31;3921:63;;3385:267:6;1390:66;3508:46;;1390:66;;3577:15;;;:::i;3504:142::-;158:281:14;;;;1390:66:6;;;;;;;;;;;;;;;;3504:142;1390:66;;;;;;;;;158:281:14;;;;;1390:66:6;158:281:14;;;;1390:66:6;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;158:281:14;1390:66:6;;;;;;;158:281:14;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1390:66:6;;;;;;158:281:14;1390:66:6;;;;;;;;3385:267;1390:66;3508:46;;1390:66;;3577:15;;;:::i;3504:142::-;-1:-1:-1;158:281:14;;6584:16:10;1390:66:6;;;;;;-1:-1:-1;;1390:66:6;;;;;;;;3504:142;1390:66;;;;;;;;;158:281:14;;;;;1390:66:6;158:281:14;;;;1390:66:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;6584:16:10;1390:66:6;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1390:66:6;;;;;;;;;;;;;2078:405;2688:4;2652:40;;2706:11;2715:2;2706:11;;2702:69;;3070:141:2;158:281:14;3070:141:2;;;;;;;;;;;;;;;2367:90:6;;2311:2;158:281:14;;2367:90:6;2078:405;:::o;2702:69::-;158:281:14;;-1:-1:-1;;;2740:20:6;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "847000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"eip712Domain()": "infinite",
								"execute((address,address,uint256,uint256,uint48,bytes,bytes))": "infinite",
								"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": "infinite",
								"isTrustedForwarder(address)": "infinite",
								"nonces(address)": "2517",
								"setNumber(uint256)": "22265",
								"trustedForwarder()": "infinite",
								"verify((address,address,uint256,uint256,uint48,bytes,bytes))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "180"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "CALLVALUE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "7"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "466163746F7279"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "C8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "7"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "7"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 295,
									"end": 337,
									"name": "PUSH",
									"source": 14,
									"value": "AB8483F64D9C6D1ECF9B849AE677DD3315835CB2"
								},
								{
									"begin": 1255,
									"end": 1292,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 1255,
									"end": 1292,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "2"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 10,
									"value": "8"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 10,
									"value": "140"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 10,
									"value": "160"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 10,
									"value": "100"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 10,
									"value": "120"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 10
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP8",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "60"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 1292,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 1255,
									"end": 1292,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 10,
									"value": "A0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1930"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 10,
									"value": "C0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1932"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1934"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1936"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1938"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1941"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ASSIGNIMMUTABLE",
									"source": 14,
									"value": "1944"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "RETURN",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 6,
									"value": "2"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 6,
									"value": "16"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "305A27A9"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "E0"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SHL",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "14"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "26"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "29"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "30"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "33"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "F8"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "36"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "29"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "27"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "46"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "18"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3077,
									"end": 3104,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 6,
									"value": "46"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "305A27A9"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "E0"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SHL",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP4",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "50"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 6,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "51"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "50"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "44"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "10"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "55"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "56"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "57"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "59"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 6,
									"value": "60"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "61"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "63"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "64"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "63"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "64"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "61"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "NOT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "66"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "67"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 6,
									"value": "FF"
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 3195,
									"end": 3237,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "67"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "66"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "59"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "71"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "72"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "72"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "71"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "57"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "tag",
									"source": 14,
									"value": "55"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 158,
									"end": 439,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "56"
								},
								{
									"begin": 158,
									"end": 439,
									"name": "JUMP",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122064425c091b21815b87b307f33522e3103f64892154db6d5a467389234a8ed18564736f6c63430008140033",
									".code": [
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "50"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "50"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "19D8D38C"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "52"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "3FB5C1CB"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "572B6C05"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "56"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "7DA0A877"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "58"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "7ECEBE00"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "84B0196E"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "62"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "CCF96B4A"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "DF905CAF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "66"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "66"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "62"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "58"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "7"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "56"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "54"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "52"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 5004,
											"end": 5022,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 5004,
											"end": 5022,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "73"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "75"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 5039,
											"end": 5082,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5039,
											"end": 5067,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "STOP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "92"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1462,
											"end": 1479,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1462,
											"end": 1479,
											"name": "PUSHIMMUTABLE",
											"source": 1,
											"value": "34"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1686,
											"end": 1717,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "7"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 1462,
											"end": 1479,
											"name": "PUSHIMMUTABLE",
											"source": 1,
											"value": "34"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "8"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "102"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "101"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "103"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "104"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "104"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "103"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLVALUE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "110"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1941"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "tag",
											"source": 10,
											"value": "111"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1944"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "48"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "tag",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "113"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "F8"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "114"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "10"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "110"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURN",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "116"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "115"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "108"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "12"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "128"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7708,
											"end": 7709,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7682,
											"end": 7710,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7682,
											"end": 7710,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "tag",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 7798,
											"end": 7817,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 8169,
											"end": 8195,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8169,
											"end": 8195,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 8453,
											"end": 8469,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "STOP",
											"source": 14
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "tag",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 8449,
											"end": 8777,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "38"
										},
										{
											"begin": 8754,
											"end": 8765,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 8754,
											"end": 8765,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "STOP",
											"source": 14
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8165,
											"end": 8286,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70647F79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8186,
											"end": 8195,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "tag",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 7855,
											"end": 7866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 7855,
											"end": 7866,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7855,
											"end": 7872,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 7838,
											"end": 7872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "tag",
											"source": 2,
											"value": "138"
										},
										{
											"begin": 7838,
											"end": 7872,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 7910,
											"end": 7921,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "tag",
											"source": 2,
											"value": "142"
										},
										{
											"begin": 7910,
											"end": 7921,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 7901,
											"end": 7930,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "tag",
											"source": 2,
											"value": "141"
										},
										{
											"begin": 7901,
											"end": 7930,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "tag",
											"source": 2,
											"value": "140"
										},
										{
											"begin": 7948,
											"end": 7956,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 7819,
											"end": 7822,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "tag",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 7787,
											"end": 7796,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "tag",
											"source": 2,
											"value": "143"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 7819,
											"end": 7822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "145"
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 7991,
											"end": 8002,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 7991,
											"end": 8002,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 7976,
											"end": 8008,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 7944,
											"end": 8023,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "148"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5911,
											"end": 5924,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 5898,
											"end": 5924,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 11237,
											"end": 11255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "159"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "163"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6053,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "STOP",
											"source": 14
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "tag",
											"source": 2,
											"value": "164"
										},
										{
											"begin": 6025,
											"end": 6112,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6076,
											"end": 6101,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "PUSH",
											"source": 2,
											"value": "842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C"
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 12192,
											"end": 12202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "tag",
											"source": 2,
											"value": "169"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP11",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 12296,
											"end": 12308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 12310,
											"end": 12322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "tag",
											"source": 2,
											"value": "172"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "168"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 12554,
											"end": 12561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "tag",
											"source": 2,
											"value": "166"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "163"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "tag",
											"source": 2,
											"value": "160"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "161"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "tag",
											"source": 2,
											"value": "156"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 11813,
											"end": 11825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "tag",
											"source": 2,
											"value": "175"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6422D02B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11686,
											"end": 11702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A777AC5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "tag",
											"source": 2,
											"value": "152"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 11562,
											"end": 11572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "tag",
											"source": 2,
											"value": "179"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2650CD1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11582,
											"end": 11586,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 5894,
											"end": 6015,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70647F79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 6004,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5898,
											"end": 5907,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "16"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "15"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "17"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "DE"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "183"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "32"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "181"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "19"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "189"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "68"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "193"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "193"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "198"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "102"
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10186,
											"end": 10198,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 10186,
											"end": 10198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "tag",
											"source": 2,
											"value": "200"
										},
										{
											"begin": 10179,
											"end": 10199,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10221,
											"end": 10237,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "tag",
											"source": 2,
											"value": "203"
										},
										{
											"begin": 10221,
											"end": 10237,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 10269,
											"end": 10281,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "tag",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 10269,
											"end": 10281,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "204"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10259,
											"end": 10282,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 10079,
											"end": 10089,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10146,
											"end": 10157,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 10111,
											"end": 10124,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP9",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP11",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "7F96328B83274EBC7C1CF4F7A3ABDA602B51A78B7FA1D86A2CE353D75E587CAC"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "tag",
											"source": 2,
											"value": "199"
										},
										{
											"begin": 9966,
											"end": 10300,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 9939,
											"end": 10314,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9939,
											"end": 10314,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 9909,
											"end": 10324,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "tag",
											"source": 2,
											"value": "197"
										},
										{
											"begin": 9909,
											"end": 10324,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "205"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH",
											"source": 2,
											"value": "C0"
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "DUP12",
											"source": 2
										},
										{
											"begin": 10336,
											"end": 10353,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 10336,
											"end": 10353,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "206"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 9909,
											"end": 10354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "tag",
											"source": 2,
											"value": "196"
										},
										{
											"begin": 9909,
											"end": 10354,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP8",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "208"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10373,
											"end": 10406,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 9274,
											"end": 9284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "tag",
											"source": 2,
											"value": "192"
										},
										{
											"begin": 9274,
											"end": 9284,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 9255,
											"end": 9285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "tag",
											"source": 2,
											"value": "195"
										},
										{
											"begin": 9255,
											"end": 9285,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9299,
											"end": 9315,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "tag",
											"source": 2,
											"value": "194"
										},
										{
											"begin": 9299,
											"end": 9315,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "tag",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9319,
											"end": 9334,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 9319,
											"end": 9334,
											"name": "TIMESTAMP",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9299,
											"end": 9334,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 9299,
											"end": 9334,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9234,
											"end": 9417,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8967,
											"end": 9424,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "209"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 9372,
											"end": 9384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "212"
										},
										{
											"begin": 9372,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "tag",
											"source": 2,
											"value": "211"
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 9359,
											"end": 9384,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "210"
										},
										{
											"begin": 9348,
											"end": 9384,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "1E"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "NOT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SLT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SGT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "C0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "27"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "227"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "228"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "231"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "33"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "14"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "CALLDATACOPY",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 11237,
											"end": 11255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "tag",
											"source": 2,
											"value": "233"
										},
										{
											"begin": 11237,
											"end": 11255,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "tag",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "tag",
											"source": 2,
											"value": "240"
										},
										{
											"begin": 11934,
											"end": 12646,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SSTORE",
											"source": 14
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "PUSH",
											"source": 2,
											"value": "842FB24A83793558587A3DAB2BE7674DA4A51D09C5542D6DD354E5D0EA70813C"
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12105,
											"end": 12122,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 12192,
											"end": 12202,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "tag",
											"source": 2,
											"value": "244"
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH",
											"source": 2,
											"value": "A0"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 12296,
											"end": 12308,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "tag",
											"source": 2,
											"value": "245"
										},
										{
											"begin": 12296,
											"end": 12308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 12310,
											"end": 12322,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "tag",
											"source": 2,
											"value": "247"
										},
										{
											"begin": 12310,
											"end": 12322,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12192,
											"end": 12202,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "SWAP7",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 12279,
											"end": 12323,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "tag",
											"source": 2,
											"value": "246"
										},
										{
											"begin": 12279,
											"end": 12323,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "DUP9",
											"source": 2
										},
										{
											"begin": 12154,
											"end": 12165,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "CALL",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP6",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 12368,
											"end": 12512,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 12554,
											"end": 12561,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "tag",
											"source": 2,
											"value": "242"
										},
										{
											"begin": 12554,
											"end": 12561,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12232,
											"end": 12245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12582,
											"end": 12635,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 11009,
											"end": 12652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "tag",
											"source": 2,
											"value": "238"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "239"
										},
										{
											"begin": 11938,
											"end": 11981,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "tag",
											"source": 2,
											"value": "236"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "237"
										},
										{
											"begin": 11938,
											"end": 11971,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "tag",
											"source": 2,
											"value": "234"
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11492,
											"end": 11511,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11621,
											"end": 11628,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11736,
											"end": 11748,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11851,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "235"
										},
										{
											"begin": 11732,
											"end": 11841,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 11813,
											"end": 11825,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "tag",
											"source": 2,
											"value": "256"
										},
										{
											"begin": 11813,
											"end": 11825,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6422D02B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11775,
											"end": 11826,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8218,
											"end": 8275,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "tag",
											"source": 2,
											"value": "252"
										},
										{
											"begin": 11617,
											"end": 11718,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11686,
											"end": 11702,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "tag",
											"source": 2,
											"value": "259"
										},
										{
											"begin": 11686,
											"end": 11702,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A777AC5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11655,
											"end": 11703,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "tag",
											"source": 2,
											"value": "250"
										},
										{
											"begin": 11488,
											"end": 11603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "137"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 11562,
											"end": 11572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "tag",
											"source": 2,
											"value": "261"
										},
										{
											"begin": 11562,
											"end": 11572,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2650CD1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11538,
											"end": 11588,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11582,
											"end": 11586,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "572B6C05"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "SHL",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13045,
											"end": 13049,
											"name": "ADDRESS",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "GAS",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "STATICCALL",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 13185,
											"end": 13907,
											"name": "RETURNDATASIZE",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "264"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "tag",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 13917,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "tag",
											"source": 2,
											"value": "266"
										},
										{
											"begin": 13924,
											"end": 13972,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13957,
											"end": 13972,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 12875,
											"end": 13979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "tag",
											"source": 2,
											"value": "264"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12986,
											"end": 13052,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 13935,
											"end": 13953,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 13935,
											"end": 13953,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "265"
										},
										{
											"begin": 13924,
											"end": 13953,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "tag",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 16351,
											"end": 16362,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 16365,
											"end": 16367,
											"name": "PUSH",
											"source": 2,
											"value": "3F"
										},
										{
											"begin": 14599,
											"end": 16797,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 16351,
											"end": 16362,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DIV",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 14599,
											"end": 16797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "tag",
											"source": 2,
											"value": "268"
										},
										{
											"begin": 16337,
											"end": 16791,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 16731,
											"end": 16781,
											"name": "INVALID",
											"source": 2
										},
										{
											"begin": 1531,
											"end": 1862,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 1531,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1637,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1637,
											"name": "SELFBALANCE",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1646,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "270"
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "27"
										},
										{
											"begin": 158,
											"end": 439,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "274"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3070,
											"end": 3211,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "tag",
											"source": 2,
											"value": "275"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1750,
											"end": 1783,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1797,
											"end": 1805,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1531,
											"end": 1862,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "tag",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 1793,
											"end": 1856,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1828,
											"end": 1845,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 158,
											"end": 439,
											"name": "tag",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "276"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "tag",
											"source": 3,
											"value": "270"
										},
										{
											"begin": 1612,
											"end": 1721,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CD786059"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1624,
											"end": 1628,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1669,
											"end": 1710,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2129,
											"end": 2895,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 2256,
											"end": 2278,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2256,
											"end": 2278,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 2276,
											"end": 2278,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "281"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2539,
											"end": 2719,
											"name": "BYTE",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 2739,
											"end": 2764,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "tag",
											"source": 9,
											"value": "281"
										},
										{
											"begin": 2739,
											"end": 2764,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2732,
											"end": 2764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2252,
											"end": 2889,
											"name": "tag",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 2252,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2811,
											"end": 2812,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2815,
											"end": 2850,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2795,
											"end": 2878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 9,
											"value": "42"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 9,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "282"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6531,
											"end": 6593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 9,
											"value": "282"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6281,
											"end": 6335,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "42"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 10,
											"value": "288"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "PUSH",
											"source": 11,
											"value": "22"
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3515,
											"end": 3748,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4917,
											"end": 5093,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1934"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1930"
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4000,
											"end": 4029,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 10,
											"value": "291"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1936"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1938"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 4204,
											"end": 4284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "tag",
											"source": 10,
											"value": "293"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 4060,
											"end": 4090,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 4060,
											"end": 4090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 10,
											"value": "289"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 10,
											"value": "1932"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 10
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "294"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "294"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "299"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "304"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1390,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "304"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "307"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "309"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "308"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "NOT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "5"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "299"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "297"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "7F"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "298"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "311"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SHR",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "314"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 6,
											"value": "315"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "299"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "302"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "321"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "26"
										},
										{
											"begin": 1390,
											"end": 1456,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "321"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "324"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "B10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "324"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "325"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "326"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "305"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "326"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SLOAD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "325"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "tag",
											"source": 6,
											"value": "314"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 6,
											"value": "7F"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "315"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 6,
											"value": "49"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 6,
											"value": "FF"
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 6,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "328"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "219"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3070,
											"end": 3211,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 158,
											"end": 439,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2367,
											"end": 2457,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "tag",
											"source": 6,
											"value": "328"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 158,
											"end": 439,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 158,
											"end": 439,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
								"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
								"lib/openzeppelin-contracts/contracts/utils/Address.sol",
								"lib/openzeppelin-contracts/contracts/utils/Context.sol",
								"lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
								"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
								"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
								"lib/openzeppelin-contracts/contracts/utils/Strings.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
								"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
								"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"src/Dummy.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e",
							"execute((address,address,uint256,uint256,uint48,bytes,bytes))": "df905caf",
							"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)": "ccf96b4a",
							"isTrustedForwarder(address)": "572b6c05",
							"nonces(address)": "7ecebe00",
							"setNumber(uint256)": "3fb5c1cb",
							"trustedForwarder()": "7da0a877",
							"verify((address,address,uint256,uint256,uint48,bytes,bytes))": "19d8d38c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"}],\"name\":\"ERC2771ForwarderExpiredRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ERC2771ForwarderInvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ERC2771ForwarderMismatchedValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"ERC2771UntrustfulTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ExecutedForwardRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"refundReceiver\",\"type\":\"address\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"deadline\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ERC2771Forwarder.ForwardRequestData\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC2771ForwarderExpiredRequest(uint48)\":[{\"details\":\"The request `deadline` has expired.\"}],\"ERC2771ForwarderInvalidSigner(address,address)\":[{\"details\":\"The request `from` doesn't match with the recovered `signer`.\"}],\"ERC2771ForwarderMismatchedValue(uint256,uint256)\":[{\"details\":\"The `requestedValue` doesn't match with the available `msgValue`.\"}],\"ERC2771UntrustfulTarget(address,address)\":[{\"details\":\"The request target doesn't trust the `forwarder`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"ExecutedForwardRequest(address,uint256,bool)\":{\"details\":\"Emitted when a `ForwardRequest` is executed. NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline, or simply a revert in the requested call. The contract guarantees that the relayer is not able to force the requested call to run out of gas.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"execute((address,address,uint256,uint256,uint48,bytes,bytes))\":{\"details\":\"Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas provided to the requested call may not be exactly the amount requested, but the call will not run out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed. Requirements: - The request value should be equal to the provided `msg.value`. - The request should be valid according to {verify}.\"},\"executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)\":{\"details\":\"Batch version of {execute} with optional refunding and atomic execution. In case a batch contains at least one invalid request (see {verify}), the request will be skipped and the `refundReceiver` parameter will receive back the unused requested value at the end of the execution. This is done to prevent reverting the entire batch when a request is invalid or has already been submitted. If the `refundReceiver` is the `address(0)`, this function will revert when at least one of the requests was not valid instead of skipping it. This could be useful if a batch is required to get executed atomically (at least at the top-level). For example, refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids including reverted transactions. Requirements: - The sum of the requests' values should be equal to the provided `msg.value`. - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address. NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for the first-level forwarded calls. In case a forwarded request calls to a contract with another subcall, the second-level call may revert without the top-level call reverting.\"},\"isTrustedForwarder(address)\":{\"details\":\"Indicates whether any particular address is the trusted forwarder.\"},\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"},\"trustedForwarder()\":{\"details\":\"Returns the address of the trusted forwarder.\"},\"verify((address,address,uint256,uint256,uint48,bytes,bytes))\":{\"details\":\"Returns `true` if a request is valid for a provided `signature` at the current block timestamp. A transaction is considered valid when the target trusts this forwarder, the request hasn't expired (deadline is not met), and the signer matches the `from` parameter of the signed request. NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund receiver is provided.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Dummy.sol\":\"Dummy\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\":{\"keccak256\":\"0x3cf982133d4c9c92e6cd0f3dd8399791b7858c09dfe6ab5c6073e7f24475aa78\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb2e41b4db6b6020a4406b0bc1c3e959554321650a392c30ee506e464abe6f27\",\"dweb:/ipfs/QmerRLZmojENXg816AjVBwmjWpUFUHPTGFboirRCotZr3L\"]},\"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol\":{\"keccak256\":\"0xd7efed2df83914cb6354b0ecddbabbf1cd0b7263bbec797a31e2251d3bf1c5e2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7474f3651acee5c62a1c360f11c8718e5680a9f050fbec1ca82796402b528314\",\"dweb:/ipfs/QmW3vpvTcARQnbbQgJ8B7zrZeqRJ7xifKD5egivq2EBbBY\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867\",\"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY\"]},\"lib/openzeppelin-contracts/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"src/Dummy.sol\":{\"keccak256\":\"0xb774b4ab175c6c482b053418efcca08a64049dd4c2d05372f5551f37c870a7c5\",\"urls\":[\"bzz-raw://cb6400374cd343af1a7201a629df03d6cc969a681396b340307ebbecff10911d\",\"dweb:/ipfs/QmRrimdngh89jLfyFHQ65z9WV9F4nngPLC5dk5zhn5Dzqs\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1946,
								"contract": "src/Dummy.sol:Dummy",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 1948,
								"contract": "src/Dummy.sol:Dummy",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 925,
								"contract": "src/Dummy.sol:Dummy",
								"label": "_nonces",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 3378,
								"contract": "src/Dummy.sol:Dummy",
								"label": "number",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> src/Dummy.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "src/Dummy.sol",
					"start": -1
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"\n--> src/Dummy.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.20;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "src/Dummy.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							24
						]
					},
					"id": 25,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 24,
							"linearizedBaseContracts": [
								24
							],
							"name": "IERC5267",
							"nameLocation": "143:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:0",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 4,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:0"
									},
									"src": "247:28:0"
								},
								{
									"documentation": {
										"id": 5,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:0",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 23,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "510:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 7,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "537:18:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 9,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 12,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "569:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 11,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "604:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "633:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "672:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 17,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 21,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 23,
												"src": "698:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 19,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 20,
													"nodeType": "ArrayTypeName",
													"src": "698:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:0"
									},
									"scope": 24,
									"src": "426:310:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 25,
							"src": "133:605:0",
							"usedErrors": [],
							"usedEvents": [
								4
							]
						}
					],
					"src": "107:632:0"
				},
				"id": 0
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
					"exportedSymbols": {
						"Context": [
							911
						],
						"ERC2771Context": [
							129
						]
					},
					"id": 130,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 26,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:1"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 28,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 130,
							"sourceUnit": 912,
							"src": "135:45:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 27,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 911,
										"src": "143:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 30,
										"name": "Context",
										"nameLocations": [
											"760:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 911,
										"src": "760:7:1"
									},
									"id": 31,
									"nodeType": "InheritanceSpecifier",
									"src": "760:7:1"
								}
							],
							"canonicalName": "ERC2771Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 29,
								"nodeType": "StructuredDocumentation",
								"src": "182:541:1",
								"text": " @dev Context variant with ERC2771 support.\n WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\n be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\n specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\n behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\n function only accessible if `msg.data.length == 0`."
							},
							"fullyImplemented": true,
							"id": 129,
							"linearizedBaseContracts": [
								129,
								911
							],
							"name": "ERC2771Context",
							"nameLocation": "742:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "774:61:1",
										"text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable"
									},
									"id": 34,
									"mutability": "immutable",
									"name": "_trustedForwarder",
									"nameLocation": "866:17:1",
									"nodeType": "VariableDeclaration",
									"scope": 129,
									"src": "840:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 33,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "840:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1245:54:1",
										"statements": [
											{
												"expression": {
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 40,
														"name": "_trustedForwarder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "1255:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 41,
														"name": "trustedForwarder_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1275:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1255:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "1255:37:1"
											}
										]
									},
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "1153:48:1",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 45,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "trustedForwarder_",
												"nameLocation": "1226:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 45,
												"src": "1218:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1218:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1217:27:1"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1245:0:1"
									},
									"scope": 129,
									"src": "1206:93:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1445:41:1",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_trustedForwarder",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 34,
													"src": "1462:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1455:24:1"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1305:69:1",
										"text": " @dev Returns the address of the trusted forwarder."
									},
									"functionSelector": "7da0a877",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trustedForwarder",
									"nameLocation": "1388:16:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:2:1"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1436:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1436:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1435:9:1"
									},
									"scope": 129,
									"src": "1379:107:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1669:55:1",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 62,
														"name": "forwarder",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 57,
														"src": "1686:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 63,
															"name": "trustedForwarder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 54,
															"src": "1699:16:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 64,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1699:18:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1686:31:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 61,
												"id": 66,
												"nodeType": "Return",
												"src": "1679:38:1"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1492:90:1",
										"text": " @dev Indicates whether any particular address is the trusted forwarder."
									},
									"functionSelector": "572b6c05",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isTrustedForwarder",
									"nameLocation": "1596:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "forwarder",
												"nameLocation": "1623:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "1615:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1615:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1614:19:1"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "1663:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 59,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1663:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:6:1"
									},
									"scope": 129,
									"src": "1587:137:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										901
									],
									"body": {
										"id": 93,
										"nodeType": "Block",
										"src": "2039:395:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 76,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2072:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 77,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2076:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2072:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 75,
															"name": "isTrustedForwarder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 68,
															"src": "2053:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 78,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2053:30:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 83,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"id": 79,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2087:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 80,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2091:4:1",
																"memberName": "data",
																"nodeType": "MemberAccess",
																"src": "2087:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															},
															"id": 81,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2096:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2087:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3230",
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2106:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_20_by_1",
																"typeString": "int_const 20"
															},
															"value": "20"
														},
														"src": "2087:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2053:55:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 91,
													"nodeType": "Block",
													"src": "2378:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 87,
																		"name": "super",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967271,
																		"src": "2399:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_super$_ERC2771Context_$129_$",
																			"typeString": "type(contract super ERC2771Context)"
																		}
																	},
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2405:10:1",
																	"memberName": "_msgSender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 901,
																	"src": "2399:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2399:18:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"functionReturnParameters": 74,
															"id": 90,
															"nodeType": "Return",
															"src": "2392:25:1"
														}
													]
												},
												"id": 92,
												"nodeType": "IfStatement",
												"src": "2049:379:1",
												"trueBody": {
													"id": 86,
													"nodeType": "Block",
													"src": "2110:262:1",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2274:88:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2292:56:1",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2306:2:1",
																					"type": "",
																					"value": "96"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [],
																									"functionName": {
																										"name": "calldatasize",
																										"nodeType": "YulIdentifier",
																										"src": "2327:12:1"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2327:14:1"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2343:2:1",
																									"type": "",
																									"value": "20"
																								}
																							],
																							"functionName": {
																								"name": "sub",
																								"nodeType": "YulIdentifier",
																								"src": "2323:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2323:23:1"
																						}
																					],
																					"functionName": {
																						"name": "calldataload",
																						"nodeType": "YulIdentifier",
																						"src": "2310:12:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2310:37:1"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "2302:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2302:46:1"
																		},
																		"variableNames": [
																			{
																				"name": "sender",
																				"nodeType": "YulIdentifier",
																				"src": "2292:6:1"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 73,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2292:6:1",
																	"valueSize": 1
																}
															],
															"id": 85,
															"nodeType": "InlineAssembly",
															"src": "2265:97:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1730:226:1",
										"text": " @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\n a call is not performed by the trusted forwarder or the calldata length is less than\n 20 bytes (an address length)."
									},
									"id": 94,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "1970:10:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 71,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2005:8:1"
									},
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1980:2:1"
									},
									"returnParameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2031:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "2023:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:16:1"
									},
									"scope": 129,
									"src": "1961:473:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										910
									],
									"body": {
										"id": 127,
										"nodeType": "Block",
										"src": "2743:194:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"expression": {
																	"id": 102,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2776:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 103,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2780:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "2776:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 101,
															"name": "isTrustedForwarder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 68,
															"src": "2757:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 104,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2757:30:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 109,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"id": 105,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2791:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2795:4:1",
																"memberName": "data",
																"nodeType": "MemberAccess",
																"src": "2791:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															},
															"id": 107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2800:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2791:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3230",
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2810:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_20_by_1",
																"typeString": "int_const 20"
															},
															"value": "20"
														},
														"src": "2791:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "2757:55:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 125,
													"nodeType": "Block",
													"src": "2883:48:1",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 121,
																		"name": "super",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967271,
																		"src": "2904:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_super$_ERC2771Context_$129_$",
																			"typeString": "type(contract super ERC2771Context)"
																		}
																	},
																	"id": 122,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2910:8:1",
																	"memberName": "_msgData",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 910,
																	"src": "2904:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$",
																		"typeString": "function () view returns (bytes calldata)"
																	}
																},
																"id": 123,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2904:16:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															},
															"functionReturnParameters": 100,
															"id": 124,
															"nodeType": "Return",
															"src": "2897:23:1"
														}
													]
												},
												"id": 126,
												"nodeType": "IfStatement",
												"src": "2753:178:1",
												"trueBody": {
													"id": 120,
													"nodeType": "Block",
													"src": "2814:63:1",
													"statements": [
														{
															"expression": {
																"baseExpression": {
																	"expression": {
																		"id": 111,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2835:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 112,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2839:4:1",
																	"memberName": "data",
																	"nodeType": "MemberAccess",
																	"src": "2835:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"endExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 117,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 113,
																				"name": "msg",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967281,
																				"src": "2845:3:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_message",
																					"typeString": "msg"
																				}
																			},
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "2849:4:1",
																			"memberName": "data",
																			"nodeType": "MemberAccess",
																			"src": "2845:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_calldata_ptr",
																				"typeString": "bytes calldata"
																			}
																		},
																		"id": 115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2854:6:1",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "2845:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"hexValue": "3230",
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2863:2:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_20_by_1",
																			"typeString": "int_const 20"
																		},
																		"value": "20"
																	},
																	"src": "2845:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 118,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexRangeAccess",
																"src": "2835:31:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr_slice",
																	"typeString": "bytes calldata slice"
																}
															},
															"functionReturnParameters": 100,
															"id": 119,
															"nodeType": "Return",
															"src": "2828:38:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "2440:222:1",
										"text": " @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\n a call is not performed by the trusted forwarder or the calldata length is less than\n 20 bytes (an address length)."
									},
									"id": 128,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "2676:8:1",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 97,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2709:8:1"
									},
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2684:2:1"
									},
									"returnParameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "2727:14:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 98,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2727:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:16:1"
									},
									"scope": 129,
									"src": "2667:270:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 130,
							"src": "724:2215:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:2831:1"
				},
				"id": 1
			},
			"lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
					"exportedSymbols": {
						"Address": [
							889
						],
						"ECDSA": [
							1909
						],
						"EIP712": [
							2136
						],
						"ERC2771Context": [
							129
						],
						"ERC2771Forwarder": [
							636
						],
						"Nonces": [
							979
						]
					},
					"id": 637,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 131,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "111:24:2"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
							"file": "./ERC2771Context.sol",
							"id": 133,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 130,
							"src": "137:52:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 132,
										"name": "ERC2771Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 129,
										"src": "145:14:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
							"file": "../utils/cryptography/ECDSA.sol",
							"id": 135,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 1910,
							"src": "190:54:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 134,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1909,
										"src": "198:5:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
							"file": "../utils/cryptography/EIP712.sol",
							"id": 137,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 2137,
							"src": "245:56:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 136,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2136,
										"src": "253:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
							"file": "../utils/Nonces.sol",
							"id": 139,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 980,
							"src": "302:43:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 138,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 979,
										"src": "310:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
							"file": "../utils/Address.sol",
							"id": 141,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 637,
							"sourceUnit": 890,
							"src": "346:45:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 140,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 889,
										"src": "354:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 143,
										"name": "EIP712",
										"nameLocations": [
											"2762:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2136,
										"src": "2762:6:2"
									},
									"id": 144,
									"nodeType": "InheritanceSpecifier",
									"src": "2762:6:2"
								},
								{
									"baseName": {
										"id": 145,
										"name": "Nonces",
										"nameLocations": [
											"2770:6:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 979,
										"src": "2770:6:2"
									},
									"id": 146,
									"nodeType": "InheritanceSpecifier",
									"src": "2770:6:2"
								}
							],
							"canonicalName": "ERC2771Forwarder",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 142,
								"nodeType": "StructuredDocumentation",
								"src": "393:2339:2",
								"text": " @dev A forwarder compatible with ERC2771 contracts. See {ERC2771Context}.\n This forwarder operates on forward requests that include:\n * `from`: An address to operate on behalf of. It is required to be equal to the request signer.\n * `to`: The address that should be called.\n * `value`: The amount of native token to attach with the requested call.\n * `gas`: The amount of gas limit that will be forwarded with the requested call.\n * `nonce`: A unique transaction ordering identifier to avoid replayability and request invalidation.\n * `deadline`: A timestamp after which the request is not executable anymore.\n * `data`: Encoded `msg.data` to send with the requested call.\n Relayers are able to submit batches if they are processing a high volume of requests. With high\n throughput, relayers may run into limitations of the chain such as limits on the number of\n transactions in the mempool. In these cases the recommendation is to distribute the load among\n multiple accounts.\n NOTE: Batching requests includes an optional refund for unused `msg.value` that is achieved by\n performing a call with empty calldata. While this is within the bounds of ERC-2771 compliance,\n if the refund receiver happens to consider the forwarder a trusted forwarder, it MUST properly\n handle `msg.data.length == 0`. `ERC2771Context` in OpenZeppelin Contracts versions prior to 4.9.3\n do not handle this properly.\n ==== Security Considerations\n If a relayer submits a forward request, it should be willing to pay up to 100% of the gas amount\n specified in the request. This contract does not implement any kind of retribution for this gas,\n and it is assumed that there is an out of band incentive for relayers to pay for execution on\n behalf of signers. Often, the relayer is operated by a project that will consider it a user\n acquisition cost.\n By offering to pay for gas, relayers are at risk of having that gas used by an attacker toward\n some other purpose that is not aligned with the expected out of band incentives. If you operate a\n relayer, consider whitelisting target contracts and function selectors. When relaying ERC-721 or\n ERC-1155 transfers specifically, consider rejecting the use of the `data` field, since it can be\n used to execute arbitrary code."
							},
							"fullyImplemented": true,
							"id": 636,
							"linearizedBaseContracts": [
								636,
								979,
								2136,
								24
							],
							"name": "ERC2771Forwarder",
							"nameLocation": "2742:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 149,
									"libraryName": {
										"id": 147,
										"name": "ECDSA",
										"nameLocations": [
											"2789:5:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1909,
										"src": "2789:5:2"
									},
									"nodeType": "UsingForDirective",
									"src": "2783:24:2",
									"typeName": {
										"id": 148,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2799:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"canonicalName": "ERC2771Forwarder.ForwardRequestData",
									"id": 164,
									"members": [
										{
											"constant": false,
											"id": 151,
											"mutability": "mutable",
											"name": "from",
											"nameLocation": "2857:4:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2849:12:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 150,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2849:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 153,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "2879:2:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2871:10:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 152,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2871:7:2",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 155,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "2899:5:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2891:13:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 154,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2891:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 157,
											"mutability": "mutable",
											"name": "gas",
											"nameLocation": "2922:3:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2914:11:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 156,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2914:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 159,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2942:8:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2935:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 158,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "2935:6:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 161,
											"mutability": "mutable",
											"name": "data",
											"nameLocation": "2966:4:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2960:10:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 160,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2960:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 163,
											"mutability": "mutable",
											"name": "signature",
											"nameLocation": "2986:9:2",
											"nodeType": "VariableDeclaration",
											"scope": 164,
											"src": "2980:15:2",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 162,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "2980:5:2",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ForwardRequestData",
									"nameLocation": "2820:18:2",
									"nodeType": "StructDefinition",
									"scope": 636,
									"src": "2813:189:2",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 169,
									"mutability": "constant",
									"name": "_FORWARD_REQUEST_TYPEHASH",
									"nameLocation": "3034:25:2",
									"nodeType": "VariableDeclaration",
									"scope": 636,
									"src": "3008:203:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 165,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3008:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "466f72776172645265717565737428616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c75696e74343820646561646c696e652c6279746573206461746129",
												"id": 167,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "3093:108:2",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac",
													"typeString": "literal_string \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\""
												},
												"value": "ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_7f96328b83274ebc7c1cf4f7a3abda602b51a78b7fa1d86a2ce353d75e587cac",
													"typeString": "literal_string \"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,uint48 deadline,bytes data)\""
												}
											],
											"id": 166,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "3070:9:2",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 168,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "3070:141:2",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "3218:335:2",
										"text": " @dev Emitted when a `ForwardRequest` is executed.\n NOTE: An unsuccessful forward request could be due to an invalid signature, an expired deadline,\n or simply a revert in the requested call. The contract guarantees that the relayer is not able to force\n the requested call to run out of gas."
									},
									"eventSelector": "842fb24a83793558587a3dab2be7674da4a51d09c5542d6dd354e5d0ea70813c",
									"id": 178,
									"name": "ExecutedForwardRequest",
									"nameLocation": "3564:22:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 172,
												"indexed": true,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "3603:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "3587:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 171,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3587:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 174,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "3619:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "3611:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3611:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"indexed": false,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "3631:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "3626:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 175,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3626:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3586:53:2"
									},
									"src": "3558:82:2"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "3646:85:2",
										"text": " @dev The request `from` doesn't match with the recovered `signer`."
									},
									"errorSelector": "c845a056",
									"id": 185,
									"name": "ERC2771ForwarderInvalidSigner",
									"nameLocation": "3742:29:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "3780:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "3772:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3772:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3796:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "3788:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3788:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3771:30:2"
									},
									"src": "3736:66:2"
								},
								{
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "3808:89:2",
										"text": " @dev The `requestedValue` doesn't match with the available `msgValue`."
									},
									"errorSelector": "70647f79",
									"id": 192,
									"name": "ERC2771ForwarderMismatchedValue",
									"nameLocation": "3908:31:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "requestedValue",
												"nameLocation": "3948:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "3940:22:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3940:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "msgValue",
												"nameLocation": "3972:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "3964:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3964:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3939:42:2"
									},
									"src": "3902:80:2"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "3988:59:2",
										"text": " @dev The request `deadline` has expired."
									},
									"errorSelector": "94eef58a",
									"id": 197,
									"name": "ERC2771ForwarderExpiredRequest",
									"nameLocation": "4058:30:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "4096:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "4089:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 194,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "4089:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4088:17:2"
									},
									"src": "4052:54:2"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "4112:73:2",
										"text": " @dev The request target doesn't trust the `forwarder`."
									},
									"errorSelector": "d2650cd1",
									"id": 204,
									"name": "ERC2771UntrustfulTarget",
									"nameLocation": "4196:23:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4228:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "4220:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4220:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "forwarder",
												"nameLocation": "4244:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "4236:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4236:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4219:35:2"
									},
									"src": "4190:65:2"
								},
								{
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "4365:2:2",
										"statements": []
									},
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "4261:49:2",
										"text": " @dev See {EIP712-constructor}."
									},
									"id": 215,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 210,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 207,
													"src": "4354:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 211,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4360:3:2",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 212,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 209,
												"name": "EIP712",
												"nameLocations": [
													"4347:6:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2136,
												"src": "4347:6:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "4347:17:2"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "4341:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "4327:18:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 206,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4327:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4326:20:2"
									},
									"returnParameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4365:0:2"
									},
									"scope": 636,
									"src": "4315:52:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 240,
										"nodeType": "Block",
										"src": "4933:156:2",
										"statements": [
											{
												"assignments": [
													225,
													227,
													229,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 225,
														"mutability": "mutable",
														"name": "isTrustedForwarder",
														"nameLocation": "4949:18:2",
														"nodeType": "VariableDeclaration",
														"scope": 240,
														"src": "4944:23:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 224,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4944:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 227,
														"mutability": "mutable",
														"name": "active",
														"nameLocation": "4974:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 240,
														"src": "4969:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 226,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4969:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "signerMatch",
														"nameLocation": "4987:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 240,
														"src": "4982:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 228,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4982:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 233,
												"initialValue": {
													"arguments": [
														{
															"id": 231,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "5014:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														],
														"id": 230,
														"name": "_validate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "5004:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_ForwardRequestData_$164_calldata_ptr_$returns$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
															"typeString": "function (struct ERC2771Forwarder.ForwardRequestData calldata) view returns (bool,bool,bool,address)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5004:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
														"typeString": "tuple(bool,bool,bool,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4943:79:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 236,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 234,
															"name": "isTrustedForwarder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 225,
															"src": "5039:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"id": 235,
															"name": "active",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 227,
															"src": "5061:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5039:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 237,
														"name": "signerMatch",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 229,
														"src": "5071:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5039:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 223,
												"id": 239,
												"nodeType": "Return",
												"src": "5032:50:2"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "4373:467:2",
										"text": " @dev Returns `true` if a request is valid for a provided `signature` at the current block timestamp.\n A transaction is considered valid when the target trusts this forwarder, the request hasn't expired\n (deadline is not met), and the signer matches the `from` parameter of the signed request.\n NOTE: A request may return false here but it won't cause {executeBatch} to revert if a refund\n receiver is provided."
									},
									"functionSelector": "19d8d38c",
									"id": 241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "4854:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "4889:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "4861:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 218,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 217,
														"name": "ForwardRequestData",
														"nameLocations": [
															"4861:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "4861:18:2"
													},
													"referencedDeclaration": 164,
													"src": "4861:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4860:37:2"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "4927:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 221,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4927:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4926:6:2"
									},
									"scope": 636,
									"src": "4845:244:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 274,
										"nodeType": "Block",
										"src": "5682:436:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 248,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "5898:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5902:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "5898:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 250,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 245,
															"src": "5911:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														},
														"id": 251,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5919:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 155,
														"src": "5911:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5898:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 261,
												"nodeType": "IfStatement",
												"src": "5894:121:2",
												"trueBody": {
													"id": 260,
													"nodeType": "Block",
													"src": "5926:89:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 254,
																			"name": "request",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 245,
																			"src": "5979:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																				"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																			}
																		},
																		"id": 255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5987:5:2",
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 155,
																		"src": "5979:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"expression": {
																			"id": 256,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5994:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5998:5:2",
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"src": "5994:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 253,
																	"name": "ERC2771ForwarderMismatchedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 192,
																	"src": "5947:31:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 258,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5947:57:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 259,
															"nodeType": "RevertStatement",
															"src": "5940:64:2"
														}
													]
												}
											},
											{
												"condition": {
													"id": 266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "6029:24:2",
													"subExpression": {
														"arguments": [
															{
																"id": 263,
																"name": "request",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 245,
																"src": "6039:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																	"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																}
															},
															{
																"hexValue": "74727565",
																"id": 264,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6048:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																	"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 262,
															"name": "_execute",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 574,
															"src": "6030:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ForwardRequestData_$164_calldata_ptr_$_t_bool_$returns$_t_bool_$",
																"typeString": "function (struct ERC2771Forwarder.ForwardRequestData calldata,bool) returns (bool)"
															}
														},
														"id": 265,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6030:23:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 273,
												"nodeType": "IfStatement",
												"src": "6025:87:2",
												"trueBody": {
													"id": 272,
													"nodeType": "Block",
													"src": "6055:57:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 267,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 889,
																		"src": "6076:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$889_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6084:15:2",
																	"memberName": "FailedInnerCall",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 652,
																	"src": "6076:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6076:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 271,
															"nodeType": "RevertStatement",
															"src": "6069:32:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "5095:505:2",
										"text": " @dev Executes a `request` on behalf of `signature`'s signer using the ERC-2771 protocol. The gas\n provided to the requested call may not be exactly the amount requested, but the call will not run\n out of gas. Will revert if the request is invalid or the call reverts, in this case the nonce is not consumed.\n Requirements:\n - The request value should be equal to the provided `msg.value`.\n - The request should be valid according to {verify}."
									},
									"functionSelector": "df905caf",
									"id": 275,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "execute",
									"nameLocation": "5614:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "5650:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 275,
												"src": "5622:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 244,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 243,
														"name": "ForwardRequestData",
														"nameLocations": [
															"5622:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "5622:18:2"
													},
													"referencedDeclaration": 164,
													"src": "5622:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5621:37:2"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5682:0:2"
									},
									"scope": 636,
									"src": "5605:513:2",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "7658:1125:2",
										"statements": [
											{
												"assignments": [
													286
												],
												"declarations": [
													{
														"constant": false,
														"id": 286,
														"mutability": "mutable",
														"name": "atomic",
														"nameLocation": "7673:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "7668:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 285,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "7668:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 293,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 287,
														"name": "refundReceiver",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 282,
														"src": "7682:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 290,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7708:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7700:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 288,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7700:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 291,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7700:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7682:28:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7668:42:2"
											},
											{
												"assignments": [
													295
												],
												"declarations": [
													{
														"constant": false,
														"id": 295,
														"mutability": "mutable",
														"name": "requestsValue",
														"nameLocation": "7729:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "7721:21:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 294,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7721:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 296,
												"nodeType": "VariableDeclarationStatement",
												"src": "7721:21:2"
											},
											{
												"assignments": [
													298
												],
												"declarations": [
													{
														"constant": false,
														"id": 298,
														"mutability": "mutable",
														"name": "refundValue",
														"nameLocation": "7760:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 363,
														"src": "7752:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 297,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7752:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 299,
												"nodeType": "VariableDeclarationStatement",
												"src": "7752:19:2"
											},
											{
												"body": {
													"id": 337,
													"nodeType": "Block",
													"src": "7824:209:2",
													"statements": [
														{
															"expression": {
																"id": 315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 310,
																	"name": "requestsValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 295,
																	"src": "7838:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"expression": {
																		"baseExpression": {
																			"id": 311,
																			"name": "requests",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 280,
																			"src": "7855:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata[] calldata"
																			}
																		},
																		"id": 313,
																		"indexExpression": {
																			"id": 312,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 301,
																			"src": "7864:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7855:11:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	},
																	"id": 314,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7867:5:2",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 155,
																	"src": "7855:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7838:34:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 316,
															"nodeType": "ExpressionStatement",
															"src": "7838:34:2"
														},
														{
															"assignments": [
																318
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 318,
																	"mutability": "mutable",
																	"name": "success",
																	"nameLocation": "7891:7:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 337,
																	"src": "7886:12:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 317,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "7886:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 325,
															"initialValue": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 320,
																			"name": "requests",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 280,
																			"src": "7910:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata[] calldata"
																			}
																		},
																		"id": 322,
																		"indexExpression": {
																			"id": 321,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 301,
																			"src": "7919:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "7910:11:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	},
																	{
																		"id": 323,
																		"name": "atomic",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 286,
																		"src": "7923:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 319,
																	"name": "_execute",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 574,
																	"src": "7901:8:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_ForwardRequestData_$164_calldata_ptr_$_t_bool_$returns$_t_bool_$",
																		"typeString": "function (struct ERC2771Forwarder.ForwardRequestData calldata,bool) returns (bool)"
																	}
																},
																"id": 324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7901:29:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7886:44:2"
														},
														{
															"condition": {
																"id": 327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "7948:8:2",
																"subExpression": {
																	"id": 326,
																	"name": "success",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 318,
																	"src": "7949:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 336,
															"nodeType": "IfStatement",
															"src": "7944:79:2",
															"trueBody": {
																"id": 335,
																"nodeType": "Block",
																"src": "7958:65:2",
																"statements": [
																	{
																		"expression": {
																			"id": 333,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 328,
																				"name": "refundValue",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 298,
																				"src": "7976:11:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"expression": {
																					"baseExpression": {
																						"id": 329,
																						"name": "requests",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 280,
																						"src": "7991:8:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_calldata_ptr_$dyn_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata[] calldata"
																						}
																					},
																					"id": 331,
																					"indexExpression": {
																						"id": 330,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 301,
																						"src": "8000:1:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "7991:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																						"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																					}
																				},
																				"id": 332,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "8003:5:2",
																				"memberName": "value",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 155,
																				"src": "7991:17:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "7976:32:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 334,
																		"nodeType": "ExpressionStatement",
																		"src": "7976:32:2"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 306,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 303,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "7798:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 304,
															"name": "requests",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 280,
															"src": "7802:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_calldata_ptr_$dyn_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata[] calldata"
															}
														},
														"id": 305,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7811:6:2",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7802:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7798:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 338,
												"initializationExpression": {
													"assignments": [
														301
													],
													"declarations": [
														{
															"constant": false,
															"id": 301,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "7795:1:2",
															"nodeType": "VariableDeclaration",
															"scope": 338,
															"src": "7787:9:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 300,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "7787:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 302,
													"nodeType": "VariableDeclarationStatement",
													"src": "7787:9:2"
												},
												"loopExpression": {
													"expression": {
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "7819:3:2",
														"subExpression": {
															"id": 307,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "7821:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 309,
													"nodeType": "ExpressionStatement",
													"src": "7819:3:2"
												},
												"nodeType": "ForStatement",
												"src": "7782:251:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 339,
														"name": "requestsValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 295,
														"src": "8169:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"id": 340,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8186:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 341,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8190:5:2",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "8186:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8169:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 350,
												"nodeType": "IfStatement",
												"src": "8165:121:2",
												"trueBody": {
													"id": 349,
													"nodeType": "Block",
													"src": "8197:89:2",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 344,
																		"name": "requestsValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 295,
																		"src": "8250:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"expression": {
																			"id": 345,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8265:3:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "8269:5:2",
																		"memberName": "value",
																		"nodeType": "MemberAccess",
																		"src": "8265:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 343,
																	"name": "ERC2771ForwarderMismatchedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 192,
																	"src": "8218:31:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8218:57:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 348,
															"nodeType": "RevertStatement",
															"src": "8211:64:2"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 351,
														"name": "refundValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 298,
														"src": "8453:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 352,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8468:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8453:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 362,
												"nodeType": "IfStatement",
												"src": "8449:328:2",
												"trueBody": {
													"id": 361,
													"nodeType": "Block",
													"src": "8471:306:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 357,
																		"name": "refundReceiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 282,
																		"src": "8738:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"id": 358,
																		"name": "refundValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 298,
																		"src": "8754:11:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 354,
																		"name": "Address",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 889,
																		"src": "8720:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Address_$889_$",
																			"typeString": "type(library Address)"
																		}
																	},
																	"id": 356,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "8728:9:2",
																	"memberName": "sendValue",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 693,
																	"src": "8720:17:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
																		"typeString": "function (address payable,uint256)"
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8720:46:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 360,
															"nodeType": "ExpressionStatement",
															"src": "8720:46:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 276,
										"nodeType": "StructuredDocumentation",
										"src": "6124:1390:2",
										"text": " @dev Batch version of {execute} with optional refunding and atomic execution.\n In case a batch contains at least one invalid request (see {verify}), the\n request will be skipped and the `refundReceiver` parameter will receive back the\n unused requested value at the end of the execution. This is done to prevent reverting\n the entire batch when a request is invalid or has already been submitted.\n If the `refundReceiver` is the `address(0)`, this function will revert when at least\n one of the requests was not valid instead of skipping it. This could be useful if\n a batch is required to get executed atomically (at least at the top-level). For example,\n refunding (and thus atomicity) can be opt-out if the relayer is using a service that avoids\n including reverted transactions.\n Requirements:\n - The sum of the requests' values should be equal to the provided `msg.value`.\n - All of the requests should be valid (see {verify}) when `refundReceiver` is the zero address.\n NOTE: Setting a zero `refundReceiver` guarantees an all-or-nothing requests execution only for\n the first-level forwarded calls. In case a forwarded request calls to a contract with another\n subcall, the second-level call may revert without the top-level call reverting."
									},
									"functionSelector": "ccf96b4a",
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "executeBatch",
									"nameLocation": "7528:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 280,
												"mutability": "mutable",
												"name": "requests",
												"nameLocation": "7580:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "7550:38:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData[]"
												},
												"typeName": {
													"baseType": {
														"id": 278,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 277,
															"name": "ForwardRequestData",
															"nameLocations": [
																"7550:18:2"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 164,
															"src": "7550:18:2"
														},
														"referencedDeclaration": 164,
														"src": "7550:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
															"typeString": "struct ERC2771Forwarder.ForwardRequestData"
														}
													},
													"id": 279,
													"nodeType": "ArrayTypeName",
													"src": "7550:20:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_ForwardRequestData_$164_storage_$dyn_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "refundReceiver",
												"nameLocation": "7614:14:2",
												"nodeType": "VariableDeclaration",
												"scope": 364,
												"src": "7598:30:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7598:15:2",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7540:94:2"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7658:0:2"
									},
									"scope": 636,
									"src": "7519:1264:2",
									"stateMutability": "payable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 405,
										"nodeType": "Block",
										"src": "9140:284:2",
										"statements": [
											{
												"assignments": [
													380,
													382
												],
												"declarations": [
													{
														"constant": false,
														"id": 380,
														"mutability": "mutable",
														"name": "isValid",
														"nameLocation": "9156:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 405,
														"src": "9151:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 379,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9151:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 382,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "9173:9:2",
														"nodeType": "VariableDeclaration",
														"scope": 405,
														"src": "9165:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 381,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9165:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 386,
												"initialValue": {
													"arguments": [
														{
															"id": 384,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 368,
															"src": "9215:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														],
														"id": 383,
														"name": "_recoverForwardRequestSigner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "9186:28:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_ForwardRequestData_$164_calldata_ptr_$returns$_t_bool_$_t_address_$",
															"typeString": "function (struct ERC2771Forwarder.ForwardRequestData calldata) view returns (bool,address)"
														}
													},
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_address_$",
														"typeString": "tuple(bool,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9150:73:2"
											},
											{
												"expression": {
													"components": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 388,
																		"name": "request",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "9274:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	},
																	"id": 389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9282:2:2",
																	"memberName": "to",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 153,
																	"src": "9274:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 387,
																"name": "_isTrustedByTarget",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 616,
																"src": "9255:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9255:30:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 391,
																	"name": "request",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 368,
																	"src": "9299:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																		"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																	}
																},
																"id": 392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9307:8:2",
																"memberName": "deadline",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 159,
																"src": "9299:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint48",
																	"typeString": "uint48"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 393,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "9319:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9325:9:2",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "9319:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9299:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 401,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 396,
																"name": "isValid",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 380,
																"src": "9348:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 397,
																	"name": "recovered",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 382,
																	"src": "9359:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 398,
																		"name": "request",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 368,
																		"src": "9372:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	},
																	"id": 399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9380:4:2",
																	"memberName": "from",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 151,
																	"src": "9372:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "9359:25:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9348:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 402,
															"name": "recovered",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 382,
															"src": "9398:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 403,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "9241:176:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
														"typeString": "tuple(bool,bool,bool,address)"
													}
												},
												"functionReturnParameters": 378,
												"id": 404,
												"nodeType": "Return",
												"src": "9234:183:2"
											}
										]
									},
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "8789:173:2",
										"text": " @dev Validates if the provided request can be executed at current block timestamp with\n the given `request.signature` on behalf of `request.signer`."
									},
									"id": 406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_validate",
									"nameLocation": "8976:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 368,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "9023:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "8995:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 367,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 366,
														"name": "ForwardRequestData",
														"nameLocations": [
															"8995:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "8995:18:2"
													},
													"referencedDeclaration": 164,
													"src": "8995:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8985:51:2"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "isTrustedForwarder",
												"nameLocation": "9073:18:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "9068:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 370,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9068:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "active",
												"nameLocation": "9098:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "9093:11:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 372,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9093:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "signerMatch",
												"nameLocation": "9111:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "9106:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 374,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9106:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "9132:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 406,
												"src": "9124:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9124:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9067:72:2"
									},
									"scope": 636,
									"src": "8967:457:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "9851:574:2",
										"statements": [
											{
												"assignments": [
													418,
													421,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 418,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "9870:9:2",
														"nodeType": "VariableDeclaration",
														"scope": 461,
														"src": "9862:17:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 417,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9862:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 421,
														"mutability": "mutable",
														"name": "err",
														"nameLocation": "9900:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 461,
														"src": "9881:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 420,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 419,
																"name": "ECDSA.RecoverError",
																"nameLocations": [
																	"9881:5:2",
																	"9887:12:2"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1569,
																"src": "9881:18:2"
															},
															"referencedDeclaration": 1569,
															"src": "9881:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 452,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 449,
																"name": "request",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 410,
																"src": "10336:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																	"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																}
															},
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10344:9:2",
															"memberName": "signature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 163,
															"src": "10336:17:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 426,
																					"name": "_FORWARD_REQUEST_TYPEHASH",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 169,
																					"src": "9998:25:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				},
																				{
																					"expression": {
																						"id": 427,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 410,
																						"src": "10045:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 428,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10053:4:2",
																					"memberName": "from",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 151,
																					"src": "10045:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 429,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 410,
																						"src": "10079:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 430,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10087:2:2",
																					"memberName": "to",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 153,
																					"src": "10079:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 431,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 410,
																						"src": "10111:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 432,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10119:5:2",
																					"memberName": "value",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 155,
																					"src": "10111:13:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 433,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 410,
																						"src": "10146:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 434,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10154:3:2",
																					"memberName": "gas",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 157,
																					"src": "10146:11:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"arguments": [
																						{
																							"expression": {
																								"id": 436,
																								"name": "request",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 410,
																								"src": "10186:7:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																									"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																								}
																							},
																							"id": 437,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "10194:4:2",
																							"memberName": "from",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 151,
																							"src": "10186:12:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 435,
																						"name": "nonces",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 938,
																						"src": "10179:6:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																							"typeString": "function (address) view returns (uint256)"
																						}
																					},
																					"id": 438,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "10179:20:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"expression": {
																						"id": 439,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 410,
																						"src": "10221:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 440,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "10229:8:2",
																					"memberName": "deadline",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 159,
																					"src": "10221:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint48",
																						"typeString": "uint48"
																					}
																				},
																				{
																					"arguments": [
																						{
																							"expression": {
																								"id": 442,
																								"name": "request",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 410,
																								"src": "10269:7:2",
																								"typeDescriptions": {
																									"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																									"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																								}
																							},
																							"id": 443,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"memberLocation": "10277:4:2",
																							"memberName": "data",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 161,
																							"src": "10269:12:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_calldata_ptr",
																								"typeString": "bytes calldata"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes_calldata_ptr",
																								"typeString": "bytes calldata"
																							}
																						],
																						"id": 441,
																						"name": "keccak256",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4294967288,
																						"src": "10259:9:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																							"typeString": "function (bytes memory) pure returns (bytes32)"
																						}
																					},
																					"id": 444,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "10259:23:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint48",
																						"typeString": "uint48"
																					},
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"expression": {
																					"id": 424,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "9966:3:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 425,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "9970:6:2",
																				"memberName": "encode",
																				"nodeType": "MemberAccess",
																				"src": "9966:10:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 445,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "9966:334:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 423,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "9939:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9939:375:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 422,
																"name": "_hashTypedDataV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2069,
																"src": "9909:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32) view returns (bytes32)"
																}
															},
															"id": 447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9909:415:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"id": 448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10325:10:2",
														"memberName": "tryRecover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1635,
														"src": "9909:426:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$attached_to$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9909:445:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9861:493:2"
											},
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 453,
																"name": "err",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 421,
																"src": "10373:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1569",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"expression": {
																		"id": 454,
																		"name": "ECDSA",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1909,
																		"src": "10380:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_ECDSA_$1909_$",
																			"typeString": "type(library ECDSA)"
																		}
																	},
																	"id": 455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10386:12:2",
																	"memberName": "RecoverError",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1569,
																	"src": "10380:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "10399:7:2",
																"memberName": "NoError",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1565,
																"src": "10380:26:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1569",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "10373:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 458,
															"name": "recovered",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 418,
															"src": "10408:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 459,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "10372:46:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_address_$",
														"typeString": "tuple(bool,address)"
													}
												},
												"functionReturnParameters": 416,
												"id": 460,
												"nodeType": "Return",
												"src": "10365:53:2"
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "9430:281:2",
										"text": " @dev Returns a tuple with the recovered the signer of an EIP712 forward request message hash\n and a boolean indicating if the signature is valid.\n NOTE: The signature is considered valid if {ECDSA-tryRecover} indicates no recover error for it."
									},
									"id": 462,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_recoverForwardRequestSigner",
									"nameLocation": "9725:28:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "9791:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "9763:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 409,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 408,
														"name": "ForwardRequestData",
														"nameLocations": [
															"9763:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "9763:18:2"
													},
													"referencedDeclaration": 164,
													"src": "9763:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9753:51:2"
									},
									"returnParameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "9836:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 412,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9836:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 462,
												"src": "9842:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9842:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9835:15:2"
									},
									"scope": 636,
									"src": "9716:709:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 573,
										"nodeType": "Block",
										"src": "11152:1500:2",
										"statements": [
											{
												"assignments": [
													474,
													476,
													478,
													480
												],
												"declarations": [
													{
														"constant": false,
														"id": 474,
														"mutability": "mutable",
														"name": "isTrustedForwarder",
														"nameLocation": "11168:18:2",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "11163:23:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 473,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "11163:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 476,
														"mutability": "mutable",
														"name": "active",
														"nameLocation": "11193:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "11188:11:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 475,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "11188:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 478,
														"mutability": "mutable",
														"name": "signerMatch",
														"nameLocation": "11206:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "11201:16:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 477,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "11201:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 480,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "11227:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 573,
														"src": "11219:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 479,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "11219:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 484,
												"initialValue": {
													"arguments": [
														{
															"id": 482,
															"name": "request",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "11247:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
															}
														],
														"id": 481,
														"name": "_validate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "11237:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_ForwardRequestData_$164_calldata_ptr_$returns$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
															"typeString": "function (struct ERC2771Forwarder.ForwardRequestData calldata) view returns (bool,bool,bool,address)"
														}
													},
													"id": 483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11237:18:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bool_$_t_bool_$_t_address_$",
														"typeString": "tuple(bool,bool,bool,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11162:93:2"
											},
											{
												"condition": {
													"id": 485,
													"name": "requireValidRequest",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 468,
													"src": "11453:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 519,
												"nodeType": "IfStatement",
												"src": "11449:402:2",
												"trueBody": {
													"id": 518,
													"nodeType": "Block",
													"src": "11474:377:2",
													"statements": [
														{
															"condition": {
																"id": 487,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "11492:19:2",
																"subExpression": {
																	"id": 486,
																	"name": "isTrustedForwarder",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 474,
																	"src": "11493:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 498,
															"nodeType": "IfStatement",
															"src": "11488:115:2",
															"trueBody": {
																"id": 497,
																"nodeType": "Block",
																"src": "11513:90:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 489,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 466,
																						"src": "11562:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 490,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "11570:2:2",
																					"memberName": "to",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 153,
																					"src": "11562:10:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"arguments": [
																						{
																							"id": 493,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "11582:4:2",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_ERC2771Forwarder_$636",
																								"typeString": "contract ERC2771Forwarder"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_ERC2771Forwarder_$636",
																								"typeString": "contract ERC2771Forwarder"
																							}
																						],
																						"id": 492,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "11574:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 491,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "11574:7:2",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 494,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "11574:13:2",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 488,
																				"name": "ERC2771UntrustfulTarget",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 204,
																				"src": "11538:23:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
																					"typeString": "function (address,address) pure"
																				}
																			},
																			"id": 495,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11538:50:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 496,
																		"nodeType": "RevertStatement",
																		"src": "11531:57:2"
																	}
																]
															}
														},
														{
															"condition": {
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "11621:7:2",
																"subExpression": {
																	"id": 499,
																	"name": "active",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 476,
																	"src": "11622:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 507,
															"nodeType": "IfStatement",
															"src": "11617:101:2",
															"trueBody": {
																"id": 506,
																"nodeType": "Block",
																"src": "11630:88:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"expression": {
																						"id": 502,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 466,
																						"src": "11686:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 503,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "11694:8:2",
																					"memberName": "deadline",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 159,
																					"src": "11686:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint48",
																						"typeString": "uint48"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint48",
																						"typeString": "uint48"
																					}
																				],
																				"id": 501,
																				"name": "ERC2771ForwarderExpiredRequest",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 197,
																				"src": "11655:30:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_uint48_$returns$__$",
																					"typeString": "function (uint48) pure"
																				}
																			},
																			"id": 504,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11655:48:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 505,
																		"nodeType": "RevertStatement",
																		"src": "11648:55:2"
																	}
																]
															}
														},
														{
															"condition": {
																"id": 509,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "11736:12:2",
																"subExpression": {
																	"id": 508,
																	"name": "signerMatch",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 478,
																	"src": "11737:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 517,
															"nodeType": "IfStatement",
															"src": "11732:109:2",
															"trueBody": {
																"id": 516,
																"nodeType": "Block",
																"src": "11750:91:2",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 511,
																					"name": "signer",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 480,
																					"src": "11805:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"expression": {
																						"id": 512,
																						"name": "request",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 466,
																						"src": "11813:7:2",
																						"typeDescriptions": {
																							"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																							"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																						}
																					},
																					"id": 513,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "11821:4:2",
																					"memberName": "from",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 151,
																					"src": "11813:12:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 510,
																				"name": "ERC2771ForwarderInvalidSigner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 185,
																				"src": "11775:29:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$__$",
																					"typeString": "function (address,address) pure"
																				}
																			},
																			"id": 514,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11775:51:2",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 515,
																		"nodeType": "RevertStatement",
																		"src": "11768:58:2"
																	}
																]
															}
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 520,
															"name": "isTrustedForwarder",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "11938:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"id": 521,
															"name": "signerMatch",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "11960:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "11938:33:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 523,
														"name": "active",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 476,
														"src": "11975:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "11938:43:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 572,
												"nodeType": "IfStatement",
												"src": "11934:712:2",
												"trueBody": {
													"id": 571,
													"nodeType": "Block",
													"src": "11983:663:2",
													"statements": [
														{
															"assignments": [
																526
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 526,
																	"mutability": "mutable",
																	"name": "currentNonce",
																	"nameLocation": "12090:12:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12082:20:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 525,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12082:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 530,
															"initialValue": {
																"arguments": [
																	{
																		"id": 528,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 480,
																		"src": "12115:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 527,
																	"name": "_useNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 953,
																	"src": "12105:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) returns (uint256)"
																	}
																},
																"id": 529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12105:17:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "12082:40:2"
														},
														{
															"assignments": [
																532
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 532,
																	"mutability": "mutable",
																	"name": "reqGas",
																	"nameLocation": "12145:6:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12137:14:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 531,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12137:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 535,
															"initialValue": {
																"expression": {
																	"id": 533,
																	"name": "request",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "12154:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																		"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																	}
																},
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12162:3:2",
																"memberName": "gas",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 157,
																"src": "12154:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "12137:28:2"
														},
														{
															"assignments": [
																537
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 537,
																	"mutability": "mutable",
																	"name": "to",
																	"nameLocation": "12187:2:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12179:10:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 536,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "12179:7:2",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 540,
															"initialValue": {
																"expression": {
																	"id": 538,
																	"name": "request",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "12192:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																		"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																	}
																},
																"id": 539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12200:2:2",
																"memberName": "to",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 153,
																"src": "12192:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "12179:23:2"
														},
														{
															"assignments": [
																542
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 542,
																	"mutability": "mutable",
																	"name": "value",
																	"nameLocation": "12224:5:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12216:13:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 541,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12216:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 545,
															"initialValue": {
																"expression": {
																	"id": 543,
																	"name": "request",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "12232:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																		"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																	}
																},
																"id": 544,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12240:5:2",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 155,
																"src": "12232:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "12216:29:2"
														},
														{
															"assignments": [
																547
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 547,
																	"mutability": "mutable",
																	"name": "data",
																	"nameLocation": "12272:4:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12259:17:2",
																	"stateVariable": false,
																	"storageLocation": "memory",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes"
																	},
																	"typeName": {
																		"id": 546,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "12259:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_storage_ptr",
																			"typeString": "bytes"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 555,
															"initialValue": {
																"arguments": [
																	{
																		"expression": {
																			"id": 550,
																			"name": "request",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "12296:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																				"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																			}
																		},
																		"id": 551,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "12304:4:2",
																		"memberName": "data",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 161,
																		"src": "12296:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	},
																	{
																		"expression": {
																			"id": 552,
																			"name": "request",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "12310:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																				"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																			}
																		},
																		"id": 553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "12318:4:2",
																		"memberName": "from",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 151,
																		"src": "12310:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 548,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "12279:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "12283:12:2",
																	"memberName": "encodePacked",
																	"nodeType": "MemberAccess",
																	"src": "12279:16:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																		"typeString": "function () pure returns (bytes memory)"
																	}
																},
																"id": 554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12279:44:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "12259:64:2"
														},
														{
															"assignments": [
																557
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 557,
																	"mutability": "mutable",
																	"name": "gasLeft",
																	"nameLocation": "12346:7:2",
																	"nodeType": "VariableDeclaration",
																	"scope": 571,
																	"src": "12338:15:2",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 556,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12338:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 558,
															"nodeType": "VariableDeclarationStatement",
															"src": "12338:15:2"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "12377:135:2",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "12395:70:2",
																		"value": {
																			"arguments": [
																				{
																					"name": "reqGas",
																					"nodeType": "YulIdentifier",
																					"src": "12411:6:2"
																				},
																				{
																					"name": "to",
																					"nodeType": "YulIdentifier",
																					"src": "12419:2:2"
																				},
																				{
																					"name": "value",
																					"nodeType": "YulIdentifier",
																					"src": "12423:5:2"
																				},
																				{
																					"arguments": [
																						{
																							"name": "data",
																							"nodeType": "YulIdentifier",
																							"src": "12434:4:2"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "12440:4:2",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "12430:3:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12430:15:2"
																				},
																				{
																					"arguments": [
																						{
																							"name": "data",
																							"nodeType": "YulIdentifier",
																							"src": "12453:4:2"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "12447:5:2"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "12447:11:2"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12460:1:2",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "12463:1:2",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "call",
																				"nodeType": "YulIdentifier",
																				"src": "12406:4:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12406:59:2"
																		},
																		"variableNames": [
																			{
																				"name": "success",
																				"nodeType": "YulIdentifier",
																				"src": "12395:7:2"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "12482:16:2",
																		"value": {
																			"arguments": [],
																			"functionName": {
																				"name": "gas",
																				"nodeType": "YulIdentifier",
																				"src": "12493:3:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12493:5:2"
																		},
																		"variableNames": [
																			{
																				"name": "gasLeft",
																				"nodeType": "YulIdentifier",
																				"src": "12482:7:2"
																			}
																		]
																	}
																]
															},
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 547,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12434:4:2",
																	"valueSize": 1
																},
																{
																	"declaration": 547,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12453:4:2",
																	"valueSize": 1
																},
																{
																	"declaration": 557,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12482:7:2",
																	"valueSize": 1
																},
																{
																	"declaration": 532,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12411:6:2",
																	"valueSize": 1
																},
																{
																	"declaration": 471,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12395:7:2",
																	"valueSize": 1
																},
																{
																	"declaration": 537,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12419:2:2",
																	"valueSize": 1
																},
																{
																	"declaration": 542,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "12423:5:2",
																	"valueSize": 1
																}
															],
															"id": 559,
															"nodeType": "InlineAssembly",
															"src": "12368:144:2"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 561,
																		"name": "gasLeft",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 557,
																		"src": "12545:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 562,
																		"name": "request",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 466,
																		"src": "12554:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																			"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																		}
																	],
																	"id": 560,
																	"name": "_checkForwardedGas",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 635,
																	"src": "12526:18:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_struct$_ForwardRequestData_$164_calldata_ptr_$returns$__$",
																		"typeString": "function (uint256,struct ERC2771Forwarder.ForwardRequestData calldata) pure"
																	}
																},
																"id": 563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12526:36:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 564,
															"nodeType": "ExpressionStatement",
															"src": "12526:36:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 566,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 480,
																		"src": "12605:6:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 567,
																		"name": "currentNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 526,
																		"src": "12613:12:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 568,
																		"name": "success",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 471,
																		"src": "12627:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 565,
																	"name": "ExecutedForwardRequest",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 178,
																	"src": "12582:22:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																		"typeString": "function (address,uint256,bool)"
																	}
																},
																"id": 569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12582:53:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 570,
															"nodeType": "EmitStatement",
															"src": "12577:58:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 463,
										"nodeType": "StructuredDocumentation",
										"src": "10431:573:2",
										"text": " @dev Validates and executes a signed request returning the request call `success` value.\n Internal function without msg.value validation.\n Requirements:\n - The caller must have provided enough gas to forward with the call.\n - The request must be valid (see {verify}) if the `requireValidRequest` is true.\n Emits an {ExecutedForwardRequest} event.\n IMPORTANT: Using this function doesn't check that all the `msg.value` was sent, potentially\n leaving value stuck in the contract."
									},
									"id": 574,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_execute",
									"nameLocation": "11018:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "11064:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "11036:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 465,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 464,
														"name": "ForwardRequestData",
														"nameLocations": [
															"11036:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "11036:18:2"
													},
													"referencedDeclaration": 164,
													"src": "11036:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "requireValidRequest",
												"nameLocation": "11086:19:2",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "11081:24:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 467,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11081:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11026:85:2"
									},
									"returnParameters": {
										"id": 472,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "11143:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 574,
												"src": "11138:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 470,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11138:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11137:14:2"
									},
									"scope": 636,
									"src": "11009:1643:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "12947:1032:2",
										"statements": [
											{
												"assignments": [
													583
												],
												"declarations": [
													{
														"constant": false,
														"id": 583,
														"mutability": "mutable",
														"name": "encodedParams",
														"nameLocation": "12970:13:2",
														"nodeType": "VariableDeclaration",
														"scope": 615,
														"src": "12957:26:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 582,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "12957:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 594,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 586,
																"name": "ERC2771Context",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 129,
																"src": "13001:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ERC2771Context_$129_$",
																	"typeString": "type(contract ERC2771Context)"
																}
															},
															"id": 587,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "13016:18:2",
															"memberName": "isTrustedForwarder",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 68,
															"src": "13001:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_declaration_view$_t_address_$returns$_t_bool_$",
																"typeString": "function ERC2771Context.isTrustedForwarder(address) view returns (bool)"
															}
														},
														{
															"components": [
																{
																	"arguments": [
																		{
																			"id": 590,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "13045:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ERC2771Forwarder_$636",
																				"typeString": "contract ERC2771Forwarder"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ERC2771Forwarder_$636",
																				"typeString": "contract ERC2771Forwarder"
																			}
																		],
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "13037:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 588,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "13037:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13037:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 592,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "13036:15:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_declaration_view$_t_address_$returns$_t_bool_$",
																"typeString": "function ERC2771Context.isTrustedForwarder(address) view returns (bool)"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 584,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "12986:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "12990:10:2",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "12986:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12986:66:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12957:95:2"
											},
											{
												"assignments": [
													596
												],
												"declarations": [
													{
														"constant": false,
														"id": 596,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "13068:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 615,
														"src": "13063:12:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 595,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "13063:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 597,
												"nodeType": "VariableDeclarationStatement",
												"src": "13063:12:2"
											},
											{
												"assignments": [
													599
												],
												"declarations": [
													{
														"constant": false,
														"id": 599,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "13093:10:2",
														"nodeType": "VariableDeclaration",
														"scope": 615,
														"src": "13085:18:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 598,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13085:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 600,
												"nodeType": "VariableDeclarationStatement",
												"src": "13085:18:2"
											},
											{
												"assignments": [
													602
												],
												"declarations": [
													{
														"constant": false,
														"id": 602,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "13121:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 615,
														"src": "13113:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 601,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13113:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 603,
												"nodeType": "VariableDeclarationStatement",
												"src": "13113:19:2"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "13194:713:2",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13725:93:2",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nodeType": "YulIdentifier",
																			"src": "13747:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13747:5:2"
																	},
																	{
																		"name": "target",
																		"nodeType": "YulIdentifier",
																		"src": "13754:6:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "encodedParams",
																				"nodeType": "YulIdentifier",
																				"src": "13766:13:2"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13781:4:2",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13762:3:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13762:24:2"
																	},
																	{
																		"arguments": [
																			{
																				"name": "encodedParams",
																				"nodeType": "YulIdentifier",
																				"src": "13794:13:2"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "13788:5:2"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13788:20:2"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13810:1:2",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13813:4:2",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "staticcall",
																	"nodeType": "YulIdentifier",
																	"src": "13736:10:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "13736:82:2"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nodeType": "YulIdentifier",
																	"src": "13725:7:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13831:30:2",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nodeType": "YulIdentifier",
																	"src": "13845:14:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "13845:16:2"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nodeType": "YulIdentifier",
																	"src": "13831:10:2"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "13874:23:2",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13895:1:2",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "13889:5:2"
																},
																"nodeType": "YulFunctionCall",
																"src": "13889:8:2"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nodeType": "YulIdentifier",
																	"src": "13874:11:2"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 583,
														"isOffset": false,
														"isSlot": false,
														"src": "13766:13:2",
														"valueSize": 1
													},
													{
														"declaration": 583,
														"isOffset": false,
														"isSlot": false,
														"src": "13794:13:2",
														"valueSize": 1
													},
													{
														"declaration": 599,
														"isOffset": false,
														"isSlot": false,
														"src": "13831:10:2",
														"valueSize": 1
													},
													{
														"declaration": 602,
														"isOffset": false,
														"isSlot": false,
														"src": "13874:11:2",
														"valueSize": 1
													},
													{
														"declaration": 596,
														"isOffset": false,
														"isSlot": false,
														"src": "13725:7:2",
														"valueSize": 1
													},
													{
														"declaration": 577,
														"isOffset": false,
														"isSlot": false,
														"src": "13754:6:2",
														"valueSize": 1
													}
												],
												"id": 604,
												"nodeType": "InlineAssembly",
												"src": "13185:722:2"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 605,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 596,
															"src": "13924:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 606,
																"name": "returnSize",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 599,
																"src": "13935:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "30783230",
																"id": 607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13949:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_32_by_1",
																	"typeString": "int_const 32"
																},
																"value": "0x20"
															},
															"src": "13935:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "13924:29:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 612,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 610,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 602,
															"src": "13957:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 611,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13971:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "13957:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "13924:48:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 581,
												"id": 614,
												"nodeType": "Return",
												"src": "13917:55:2"
											}
										]
									},
									"documentation": {
										"id": 575,
										"nodeType": "StructuredDocumentation",
										"src": "12658:212:2",
										"text": " @dev Returns whether the target trusts this forwarder.\n This function performs a static call to the target contract calling the\n {ERC2771Context-isTrustedForwarder} function."
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isTrustedByTarget",
									"nameLocation": "12884:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "12911:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "12903:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12903:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12902:16:2"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "12941:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 579,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12941:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12940:6:2"
									},
									"scope": 636,
									"src": "12875:1104:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 634,
										"nodeType": "Block",
										"src": "14694:2103:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 625,
														"name": "gasLeft",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 619,
														"src": "16341:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 629,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 626,
																"name": "request",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 622,
																"src": "16351:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
																	"typeString": "struct ERC2771Forwarder.ForwardRequestData calldata"
																}
															},
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16359:3:2",
															"memberName": "gas",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 157,
															"src": "16351:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "3633",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16365:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_63_by_1",
																"typeString": "int_const 63"
															},
															"value": "63"
														},
														"src": "16351:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16341:26:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 633,
												"nodeType": "IfStatement",
												"src": "16337:454:2",
												"trueBody": {
													"id": 632,
													"nodeType": "Block",
													"src": "16369:422:2",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "16740:41:2",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "invalid",
																				"nodeType": "YulIdentifier",
																				"src": "16758:7:2"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "16758:9:2"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "16758:9:2"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [],
															"id": 631,
															"nodeType": "InlineAssembly",
															"src": "16731:50:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "13985:609:2",
										"text": " @dev Checks if the requested gas was correctly forwarded to the callee.\n As a consequence of https://eips.ethereum.org/EIPS/eip-150[EIP-150]:\n - At most `gasleft() - floor(gasleft() / 64)` is forwarded to the callee.\n - At least `floor(gasleft() / 64)` is kept in the caller.\n It reverts consuming all the available gas if the forwarded gas is not the requested gas.\n IMPORTANT: The `gasLeft` parameter should be measured exactly at the end of the forwarded call.\n Any gas consumed in between will make room for bypassing this check."
									},
									"id": 635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkForwardedGas",
									"nameLocation": "14608:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "gasLeft",
												"nameLocation": "14635:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "14627:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14627:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "14672:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 635,
												"src": "14644:35:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ForwardRequestData_$164_calldata_ptr",
													"typeString": "struct ERC2771Forwarder.ForwardRequestData"
												},
												"typeName": {
													"id": 621,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 620,
														"name": "ForwardRequestData",
														"nameLocations": [
															"14644:18:2"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 164,
														"src": "14644:18:2"
													},
													"referencedDeclaration": 164,
													"src": "14644:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ForwardRequestData_$164_storage_ptr",
														"typeString": "struct ERC2771Forwarder.ForwardRequestData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14626:54:2"
									},
									"returnParameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14694:0:2"
									},
									"scope": 636,
									"src": "14599:2198:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 637,
							"src": "2733:14066:2",
							"usedErrors": [
								185,
								192,
								197,
								204,
								644,
								652,
								921,
								993,
								995
							],
							"usedEvents": [
								4,
								178
							]
						}
					],
					"src": "111:16689:2"
				},
				"id": 2
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							889
						]
					},
					"id": 890,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 638,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 639,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 889,
							"linearizedBaseContracts": [
								889
							],
							"name": "Address",
							"nameLocation": "203:7:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 640,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:3",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 644,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 642,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 644,
												"src": "349:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 641,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:3"
									},
									"src": "316:50:3"
								},
								{
									"documentation": {
										"id": 645,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:3",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 649,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "475:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:3"
									},
									"src": "452:39:3"
								},
								{
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:3",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 652,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:3"
									},
									"src": "591:24:3"
								},
								{
									"body": {
										"id": 692,
										"nodeType": "Block",
										"src": "1602:260:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 662,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$889",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$889",
																		"typeString": "library Address"
																	}
																],
																"id": 661,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 660,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 664,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:3",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 665,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 657,
														"src": "1640:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 675,
												"nodeType": "IfStatement",
												"src": "1612:109:3",
												"trueBody": {
													"id": 674,
													"nodeType": "Block",
													"src": "1648:73:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 670,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$889",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$889",
																					"typeString": "library Address"
																				}
																			],
																			"id": 669,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 668,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 671,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 667,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 644,
																	"src": "1669:26:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 672,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 673,
															"nodeType": "RevertStatement",
															"src": "1662:48:3"
														}
													]
												}
											},
											{
												"assignments": [
													677,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 677,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 692,
														"src": "1732:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 676,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 684,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 682,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 678,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 655,
																"src": "1750:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 681,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 680,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 657,
																"src": "1772:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 683,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:3"
											},
											{
												"condition": {
													"id": 686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:3",
													"subExpression": {
														"id": 685,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 677,
														"src": "1798:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 691,
												"nodeType": "IfStatement",
												"src": "1793:63:3",
												"trueBody": {
													"id": 690,
													"nodeType": "Block",
													"src": "1807:49:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 687,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 652,
																	"src": "1828:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 689,
															"nodeType": "RevertStatement",
															"src": "1821:24:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 653,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 693,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "1550:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "1577:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:3"
									},
									"returnParameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:3"
									},
									"scope": 889,
									"src": "1531:331:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "2794:62:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 704,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "2833:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 705,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "2841:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 706,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 703,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "2811:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 702,
												"id": 708,
												"nodeType": "Return",
												"src": "2804:45:3"
											}
										]
									},
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "2727:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "2743:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 697,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:3"
									},
									"returnParameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "2780:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 700,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:3"
									},
									"scope": 889,
									"src": "2705:151:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "3293:279:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 724,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$889",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$889",
																		"typeString": "library Address"
																	}
																],
																"id": 723,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 722,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 726,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:3",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 727,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 717,
														"src": "3331:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 737,
												"nodeType": "IfStatement",
												"src": "3303:108:3",
												"trueBody": {
													"id": 736,
													"nodeType": "Block",
													"src": "3338:73:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 732,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$889",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$889",
																					"typeString": "library Address"
																				}
																			],
																			"id": 731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 730,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 733,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 729,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 644,
																	"src": "3359:26:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 735,
															"nodeType": "RevertStatement",
															"src": "3352:48:3"
														}
													]
												}
											},
											{
												"assignments": [
													739,
													741
												],
												"declarations": [
													{
														"constant": false,
														"id": 739,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "3421:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 738,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 741,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 755,
														"src": "3435:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 740,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 748,
												"initialValue": {
													"arguments": [
														{
															"id": 746,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 715,
															"src": "3488:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 742,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 713,
																"src": "3462:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:3",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 745,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 744,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 717,
																"src": "3481:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 750,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 713,
															"src": "3537:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 751,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 739,
															"src": "3545:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 752,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 741,
															"src": "3554:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 749,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 848,
														"src": "3510:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 721,
												"id": 754,
												"nodeType": "Return",
												"src": "3503:62:3"
											}
										]
									},
									"documentation": {
										"id": 711,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 713,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3211:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 715,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3227:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 714,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 717,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3246:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:3"
									},
									"returnParameters": {
										"id": 721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "3279:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 719,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:3"
									},
									"scope": 889,
									"src": "3180:392:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 781,
										"nodeType": "Block",
										"src": "3811:154:3",
										"statements": [
											{
												"assignments": [
													767,
													769
												],
												"declarations": [
													{
														"constant": false,
														"id": 767,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 781,
														"src": "3822:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 766,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 769,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 781,
														"src": "3836:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 768,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 774,
												"initialValue": {
													"arguments": [
														{
															"id": 772,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 761,
															"src": "3881:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 770,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3863:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 771,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:3",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 776,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 759,
															"src": "3930:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 777,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 767,
															"src": "3938:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 778,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 769,
															"src": "3947:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 775,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 848,
														"src": "3903:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 765,
												"id": 780,
												"nodeType": "Return",
												"src": "3896:62:3"
											}
										]
									},
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 782,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3739:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3755:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 760,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:3"
									},
									"returnParameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 782,
												"src": "3797:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 763,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:3"
									},
									"scope": 889,
									"src": "3711:254:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 807,
										"nodeType": "Block",
										"src": "4203:156:3",
										"statements": [
											{
												"assignments": [
													793,
													795
												],
												"declarations": [
													{
														"constant": false,
														"id": 793,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "4214:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 792,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 795,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:3",
														"nodeType": "VariableDeclaration",
														"scope": 807,
														"src": "4228:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 794,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 800,
												"initialValue": {
													"arguments": [
														{
															"id": 798,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 787,
															"src": "4275:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 796,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "4255:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:3",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 799,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 802,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "4324:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 803,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 793,
															"src": "4332:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 804,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 795,
															"src": "4341:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 801,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 848,
														"src": "4297:26:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 805,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 791,
												"id": 806,
												"nodeType": "Return",
												"src": "4290:62:3"
											}
										]
									},
									"documentation": {
										"id": 783,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "4136:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "4152:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 786,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:3"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "4189:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 789,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:3"
									},
									"scope": 889,
									"src": "4106:253:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 847,
										"nodeType": "Block",
										"src": "4783:424:3",
										"statements": [
											{
												"condition": {
													"id": 821,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:3",
													"subExpression": {
														"id": 820,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "4798:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 845,
													"nodeType": "Block",
													"src": "4857:344:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 830,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 827,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 815,
																			"src": "5045:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 828,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:3",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 835,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 831,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 811,
																				"src": "5071:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 832,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:3",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:3",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 834,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 842,
															"nodeType": "IfStatement",
															"src": "5041:119:3",
															"trueBody": {
																"id": 841,
																"nodeType": "Block",
																"src": "5096:64:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 838,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 811,
																					"src": "5138:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 837,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 649,
																				"src": "5121:16:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 839,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 840,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:3"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 843,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 815,
																"src": "5180:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 819,
															"id": 844,
															"nodeType": "Return",
															"src": "5173:17:3"
														}
													]
												},
												"id": 846,
												"nodeType": "IfStatement",
												"src": "4793:408:3",
												"trueBody": {
													"id": 826,
													"nodeType": "Block",
													"src": "4807:44:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 823,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 815,
																		"src": "4829:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 822,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 888,
																	"src": "4821:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 825,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:3",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 848,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 816,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4670:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4694:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 812,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 815,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4716:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 814,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:3"
									},
									"returnParameters": {
										"id": 819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 848,
												"src": "4769:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 817,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:3"
									},
									"scope": 889,
									"src": "4625:582:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 869,
										"nodeType": "Block",
										"src": "5509:122:3",
										"statements": [
											{
												"condition": {
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:3",
													"subExpression": {
														"id": 858,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 851,
														"src": "5524:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 867,
													"nodeType": "Block",
													"src": "5583:42:3",
													"statements": [
														{
															"expression": {
																"id": 865,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 853,
																"src": "5604:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 857,
															"id": 866,
															"nodeType": "Return",
															"src": "5597:17:3"
														}
													]
												},
												"id": 868,
												"nodeType": "IfStatement",
												"src": "5519:106:3",
												"trueBody": {
													"id": 864,
													"nodeType": "Block",
													"src": "5533:44:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 861,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 853,
																		"src": "5555:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 860,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 888,
																	"src": "5547:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 863,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 849,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:3",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 870,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 851,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "5433:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 850,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "5447:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 852,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:3"
									},
									"returnParameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 870,
												"src": "5495:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 855,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:3"
									},
									"scope": 889,
									"src": "5407:224:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 887,
										"nodeType": "Block",
										"src": "5798:461:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 879,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 876,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "5874:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 878,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 885,
													"nodeType": "Block",
													"src": "6204:49:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 882,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 652,
																	"src": "6225:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 883,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 884,
															"nodeType": "RevertStatement",
															"src": "6218:24:3"
														}
													]
												},
												"id": 886,
												"nodeType": "IfStatement",
												"src": "5870:383:3",
												"trueBody": {
													"id": 881,
													"nodeType": "Block",
													"src": "5897:301:3",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "6055:133:3",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:3",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:3"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:3"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:3",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:3",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:3"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:3"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:3"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:3"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 873,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:3",
																	"valueSize": 1
																},
																{
																	"declaration": 873,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:3",
																	"valueSize": 1
																}
															],
															"id": 880,
															"nodeType": "InlineAssembly",
															"src": "6046:142:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 871,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:3",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 888,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:3",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "5760:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 872,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:3"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:3"
									},
									"scope": 889,
									"src": "5743:516:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 890,
							"src": "195:6066:3",
							"usedErrors": [
								644,
								649,
								652
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							911
						]
					},
					"id": 912,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 891,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 892,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 911,
							"linearizedBaseContracts": [
								911
							],
							"name": "Context",
							"nameLocation": "642:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 900,
										"nodeType": "Block",
										"src": "718:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 897,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 898,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 896,
												"id": 899,
												"nodeType": "Return",
												"src": "728:17:4"
											}
										]
									},
									"id": 901,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 896,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 895,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 894,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 911,
									"src": "656:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 909,
										"nodeType": "Block",
										"src": "825:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 906,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 905,
												"id": 908,
												"nodeType": "Return",
												"src": "835:15:4"
											}
										]
									},
									"id": 910,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:4"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 910,
												"src": "809:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 903,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:4"
									},
									"scope": 911,
									"src": "758:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 912,
							"src": "624:235:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:759:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							979
						]
					},
					"id": 980,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 913,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 914,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:5",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 979,
							"linearizedBaseContracts": [
								979
							],
							"name": "Nonces",
							"nameLocation": "227:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 915,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:5",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 921,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "361:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 916,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "378:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:5"
									},
									"src": "335:65:5"
								},
								{
									"constant": false,
									"id": 925,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:5",
									"nodeType": "VariableDeclaration",
									"scope": 979,
									"src": "406:51:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 924,
										"keyName": "account",
										"keyNameLocation": "422:7:5",
										"keyType": {
											"id": 922,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 923,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 937,
										"nodeType": "Block",
										"src": "607:38:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 933,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "624:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 935,
													"indexExpression": {
														"id": 934,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 928,
														"src": "632:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 932,
												"id": 936,
												"nodeType": "Return",
												"src": "617:21:5"
											}
										]
									},
									"documentation": {
										"id": 926,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:5",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 938,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "554:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 927,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:5"
									},
									"returnParameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 938,
												"src": "598:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:5"
									},
									"scope": 979,
									"src": "538:107:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 952,
										"nodeType": "Block",
										"src": "828:326:5",
										"statements": [
											{
												"id": 951,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:5",
												"statements": [
													{
														"expression": {
															"id": 949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:5",
															"subExpression": {
																"baseExpression": {
																	"id": 946,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 925,
																	"src": "1121:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 948,
																"indexExpression": {
																	"id": 947,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 941,
																	"src": "1129:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 945,
														"id": 950,
														"nodeType": "Return",
														"src": "1114:23:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 939,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:5",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 953,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 942,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 941,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "778:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 940,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:5"
									},
									"returnParameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "819:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:5"
									},
									"scope": 979,
									"src": "759:395:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 977,
										"nodeType": "Block",
										"src": "1338:149:5",
										"statements": [
											{
												"assignments": [
													962
												],
												"declarations": [
													{
														"constant": false,
														"id": 962,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 977,
														"src": "1348:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 961,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 966,
												"initialValue": {
													"arguments": [
														{
															"id": 964,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "1376:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 963,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 953,
														"src": "1366:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 967,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 958,
														"src": "1396:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 968,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 962,
														"src": "1405:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 976,
												"nodeType": "IfStatement",
												"src": "1392:89:5",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "1414:67:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 971,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 956,
																		"src": "1455:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 972,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 962,
																		"src": "1462:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 970,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 921,
																	"src": "1435:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256) pure"
																	}
																},
																"id": 973,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 974,
															"nodeType": "RevertStatement",
															"src": "1428:42:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:5",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 978,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "1291:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 978,
												"src": "1306:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:5"
									},
									"returnParameters": {
										"id": 960,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:5"
									},
									"scope": 979,
									"src": "1265:222:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 980,
							"src": "209:1280:5",
							"usedErrors": [
								921
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							985
						],
						"ShortStrings": [
							1196
						],
						"StorageSlot": [
							1306
						]
					},
					"id": 1197,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 981,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:6"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 983,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1197,
							"sourceUnit": 1307,
							"src": "132:46:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 982,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1306,
										"src": "140:11:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 985,
							"name": "ShortString",
							"nameLocation": "353:11:6",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:6",
							"underlyingType": {
								"id": 984,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:6",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 986,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:6",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1196,
							"linearizedBaseContracts": [
								1196
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 989,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:6",
									"nodeType": "VariableDeclaration",
									"scope": 1196,
									"src": "1345:111:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 987,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 988,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:6",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 993,
									"name": "StringTooLong",
									"nameLocation": "1469:13:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 993,
												"src": "1483:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 990,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:6"
									},
									"src": "1463:32:6"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 995,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:6"
									},
									"src": "1500:27:6"
								},
								{
									"body": {
										"id": 1038,
										"nodeType": "Block",
										"src": "1786:208:6",
										"statements": [
											{
												"assignments": [
													1005
												],
												"declarations": [
													{
														"constant": false,
														"id": 1005,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1038,
														"src": "1796:17:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1004,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1010,
												"initialValue": {
													"arguments": [
														{
															"id": 1008,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 998,
															"src": "1822:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1007,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1006,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:6",
															"typeDescriptions": {}
														}
													},
													"id": 1009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1014,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1011,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "1840:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1012,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1013,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1020,
												"nodeType": "IfStatement",
												"src": "1836:72:6",
												"trueBody": {
													"id": 1019,
													"nodeType": "Block",
													"src": "1858:50:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1016,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 998,
																		"src": "1893:3:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1015,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 993,
																	"src": "1879:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1018,
															"nodeType": "RevertStatement",
															"src": "1872:25:6"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1034,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1029,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1005,
																						"src": "1965:4:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1028,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1027,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:6",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1030,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1025,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1031,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1032,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1005,
																			"src": "1974:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1033,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:6",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1023,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1035,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1021,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 985,
															"src": "1924:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$985_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1022,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:6",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$985_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1003,
												"id": 1037,
												"nodeType": "Return",
												"src": "1917:70:6"
											}
										]
									},
									"documentation": {
										"id": 996,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:6",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:6",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "1731:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 997,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:6"
									},
									"returnParameters": {
										"id": 1003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "1773:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1001,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1000,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "1773:11:6"
													},
													"referencedDeclaration": 985,
													"src": "1773:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:6"
									},
									"scope": 1196,
									"src": "1708:286:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1064,
										"nodeType": "Block",
										"src": "2152:331:6",
										"statements": [
											{
												"assignments": [
													1049
												],
												"declarations": [
													{
														"constant": false,
														"id": 1049,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:6",
														"nodeType": "VariableDeclaration",
														"scope": 1064,
														"src": "2162:11:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1048,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1053,
												"initialValue": {
													"arguments": [
														{
															"id": 1051,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1043,
															"src": "2187:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																"typeString": "ShortString"
															}
														],
														"id": 1050,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "2176:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:6"
											},
											{
												"assignments": [
													1055
												],
												"declarations": [
													{
														"constant": false,
														"id": 1055,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:6",
														"nodeType": "VariableDeclaration",
														"scope": 1064,
														"src": "2280:17:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1054,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1060,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1057,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1056,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:6"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2376:81:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nodeType": "YulIdentifier",
																		"src": "2397:3:6"
																	},
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "2402:3:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2390:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2390:16:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2390:16:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nodeType": "YulIdentifier",
																				"src": "2430:3:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2435:4:6",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2426:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2426:14:6"
																	},
																	{
																		"name": "sstr",
																		"nodeType": "YulIdentifier",
																		"src": "2442:4:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2419:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2419:28:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2419:28:6"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1049,
														"isOffset": false,
														"isSlot": false,
														"src": "2402:3:6",
														"valueSize": 1
													},
													{
														"declaration": 1043,
														"isOffset": false,
														"isSlot": false,
														"src": "2442:4:6",
														"valueSize": 1
													},
													{
														"declaration": 1055,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:3:6",
														"valueSize": 1
													},
													{
														"declaration": 1055,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:3:6",
														"valueSize": 1
													}
												],
												"id": 1061,
												"nodeType": "InlineAssembly",
												"src": "2367:90:6"
											},
											{
												"expression": {
													"id": 1062,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1055,
													"src": "2473:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1047,
												"id": 1063,
												"nodeType": "Return",
												"src": "2466:10:6"
											}
										]
									},
									"documentation": {
										"id": 1040,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:6",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1065,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "2096:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1042,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1041,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "2096:11:6"
													},
													"referencedDeclaration": 985,
													"src": "2096:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:6"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1065,
												"src": "2137:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1045,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:6"
									},
									"scope": 1196,
									"src": "2078:405:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1096,
										"nodeType": "Block",
										"src": "2625:175:6",
										"statements": [
											{
												"assignments": [
													1075
												],
												"declarations": [
													{
														"constant": false,
														"id": 1075,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2643:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1096,
														"src": "2635:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1074,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2635:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1085,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1080,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1069,
																		"src": "2679:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1078,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "2660:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$985_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1079,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2672:6:6",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2660:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1081,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2660:24:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1077,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2652:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1076,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2652:7:6",
																"typeDescriptions": {}
															}
														},
														"id": 1082,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2652:33:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1083,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2652:40:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2635:57:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1086,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1075,
														"src": "2706:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1087,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2715:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2706:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1093,
												"nodeType": "IfStatement",
												"src": "2702:69:6",
												"trueBody": {
													"id": 1092,
													"nodeType": "Block",
													"src": "2719:52:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1089,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 995,
																	"src": "2740:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2740:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1091,
															"nodeType": "RevertStatement",
															"src": "2733:27:6"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1094,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1075,
													"src": "2787:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1073,
												"id": 1095,
												"nodeType": "Return",
												"src": "2780:13:6"
											}
										]
									},
									"documentation": {
										"id": 1066,
										"nodeType": "StructuredDocumentation",
										"src": "2489:61:6",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1097,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2564:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1069,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2587:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "2575:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1068,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1067,
														"name": "ShortString",
														"nameLocations": [
															"2575:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "2575:11:6"
													},
													"referencedDeclaration": 985,
													"src": "2575:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2574:18:6"
									},
									"returnParameters": {
										"id": 1073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1097,
												"src": "2616:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2615:9:6"
									},
									"scope": 1196,
									"src": "2555:245:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1136,
										"nodeType": "Block",
										"src": "3023:231:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1110,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "3043:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3037:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1108,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3037:5:6",
																	"typeDescriptions": {}
																}
															},
															"id": 1111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3037:12:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1112,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3050:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3037:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1113,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:2:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3037:24:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1134,
													"nodeType": "Block",
													"src": "3121:127:6",
													"statements": [
														{
															"expression": {
																"id": 1127,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1123,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1102,
																				"src": "3161:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1120,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1306,
																				"src": "3135:11:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1306_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3147:13:6",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1283,
																			"src": "3135:25:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1214_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3135:32:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1214_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1125,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3168:5:6",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1213,
																	"src": "3135:38:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1126,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1100,
																	"src": "3176:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3135:46:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1128,
															"nodeType": "ExpressionStatement",
															"src": "3135:46:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1131,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 989,
																		"src": "3219:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1129,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 985,
																		"src": "3202:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$985_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3214:4:6",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3202:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$985_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:35:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1107,
															"id": 1133,
															"nodeType": "Return",
															"src": "3195:42:6"
														}
													]
												},
												"id": 1135,
												"nodeType": "IfStatement",
												"src": "3033:215:6",
												"trueBody": {
													"id": 1119,
													"nodeType": "Block",
													"src": "3063:52:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1116,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1100,
																		"src": "3098:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1115,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1039,
																	"src": "3084:13:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$985_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3084:20:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1107,
															"id": 1118,
															"nodeType": "Return",
															"src": "3077:27:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1098,
										"nodeType": "StructuredDocumentation",
										"src": "2806:103:6",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1137,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2923:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2963:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "2949:19:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1099,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2985:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "2970:20:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1101,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2970:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:43:6"
									},
									"returnParameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1137,
												"src": "3010:11:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1105,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1104,
														"name": "ShortString",
														"nameLocations": [
															"3010:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "3010:11:6"
													},
													"referencedDeclaration": 985,
													"src": "3010:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3009:13:6"
									},
									"scope": 1196,
									"src": "2914:340:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1163,
										"nodeType": "Block",
										"src": "3494:158:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1150,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1141,
																"src": "3527:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1148,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 985,
																"src": "3508:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$985_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3520:6:6",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3508:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3508:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1152,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "3537:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3508:46:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1161,
													"nodeType": "Block",
													"src": "3609:37:6",
													"statements": [
														{
															"expression": {
																"id": 1159,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1143,
																"src": "3630:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1147,
															"id": 1160,
															"nodeType": "Return",
															"src": "3623:12:6"
														}
													]
												},
												"id": 1162,
												"nodeType": "IfStatement",
												"src": "3504:142:6",
												"trueBody": {
													"id": 1158,
													"nodeType": "Block",
													"src": "3556:47:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1155,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1141,
																		"src": "3586:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1154,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1065,
																	"src": "3577:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3577:15:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1147,
															"id": 1157,
															"nodeType": "Return",
															"src": "3570:22:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1138,
										"nodeType": "StructuredDocumentation",
										"src": "3260:120:6",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3394:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3427:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "3415:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1140,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1139,
														"name": "ShortString",
														"nameLocations": [
															"3415:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "3415:11:6"
													},
													"referencedDeclaration": 985,
													"src": "3415:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3449:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "3434:20:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1142,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3434:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:41:6"
									},
									"returnParameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "3479:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1145,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3479:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:15:6"
									},
									"scope": 1196,
									"src": "3385:267:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1194,
										"nodeType": "Block",
										"src": "4132:174:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1177,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1168,
																"src": "4165:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1175,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 985,
																"src": "4146:11:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$985_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1176,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4158:6:6",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4146:18:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1178,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4146:25:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1179,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "4175:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4146:46:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1192,
													"nodeType": "Block",
													"src": "4249:51:6",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1188,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1170,
																			"src": "4276:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1186,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:5:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:12:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4283:6:6",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4270:19:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1174,
															"id": 1191,
															"nodeType": "Return",
															"src": "4263:26:6"
														}
													]
												},
												"id": 1193,
												"nodeType": "IfStatement",
												"src": "4142:158:6",
												"trueBody": {
													"id": 1185,
													"nodeType": "Block",
													"src": "4194:49:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1182,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1168,
																		"src": "4226:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1181,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "4215:10:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$985_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4215:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1174,
															"id": 1184,
															"nodeType": "Return",
															"src": "4208:24:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "3658:364:6",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1195,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4036:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4071:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "4059:17:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1167,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1166,
														"name": "ShortString",
														"nameLocations": [
															"4059:11:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 985,
														"src": "4059:11:6"
													},
													"referencedDeclaration": 985,
													"src": "4059:11:6",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4093:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "4078:20:6",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1169,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4078:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4058:41:6"
									},
									"returnParameters": {
										"id": 1174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1195,
												"src": "4123:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4122:9:6"
									},
									"scope": 1196,
									"src": "4027:279:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1197,
							"src": "1255:3053:6",
							"usedErrors": [
								993,
								995
							],
							"usedEvents": []
						}
					],
					"src": "106:4203:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1306
						]
					},
					"id": 1307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1198,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1199,
								"nodeType": "StructuredDocumentation",
								"src": "219:1025:7",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1306,
							"linearizedBaseContracts": [
								1306
							],
							"name": "StorageSlot",
							"nameLocation": "1253:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1202,
									"members": [
										{
											"constant": false,
											"id": 1201,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1308:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1202,
											"src": "1300:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1200,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1300:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1278:11:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1271:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1205,
									"members": [
										{
											"constant": false,
											"id": 1204,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1360:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1205,
											"src": "1355:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1203,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1355:4:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1333:11:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1326:46:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1208,
									"members": [
										{
											"constant": false,
											"id": 1207,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1415:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1208,
											"src": "1407:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1206,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1407:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1385:11:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1378:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1211,
									"members": [
										{
											"constant": false,
											"id": 1210,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1211,
											"src": "1462:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1209,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1440:11:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1433:49:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1214,
									"members": [
										{
											"constant": false,
											"id": 1213,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1523:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1214,
											"src": "1516:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1212,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1516:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1495:10:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1488:47:7",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1217,
									"members": [
										{
											"constant": false,
											"id": 1216,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1574:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 1217,
											"src": "1568:11:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1215,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1568:5:7",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1548:9:7",
									"nodeType": "StructDefinition",
									"scope": 1306,
									"src": "1541:45:7",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1227,
										"nodeType": "Block",
										"src": "1768:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1830:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1844:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "1854:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1224,
														"isOffset": false,
														"isSlot": true,
														"src": "1844:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1220,
														"isOffset": false,
														"isSlot": false,
														"src": "1854:4:7",
														"valueSize": 1
													}
												],
												"id": 1226,
												"nodeType": "InlineAssembly",
												"src": "1821:47:7"
											}
										]
									},
									"documentation": {
										"id": 1218,
										"nodeType": "StructuredDocumentation",
										"src": "1592:87:7",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1693:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1220,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1716:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1708:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1219,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:14:7"
									},
									"returnParameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1224,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1765:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "1745:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1202_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1223,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1222,
														"name": "AddressSlot",
														"nameLocations": [
															"1745:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1202,
														"src": "1745:11:7"
													},
													"referencedDeclaration": 1202,
													"src": "1745:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1202_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:23:7"
									},
									"scope": 1306,
									"src": "1684:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1238,
										"nodeType": "Block",
										"src": "2056:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2118:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2132:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2142:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2132:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1235,
														"isOffset": false,
														"isSlot": true,
														"src": "2132:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1231,
														"isOffset": false,
														"isSlot": false,
														"src": "2142:4:7",
														"valueSize": 1
													}
												],
												"id": 1237,
												"nodeType": "InlineAssembly",
												"src": "2109:47:7"
											}
										]
									},
									"documentation": {
										"id": 1229,
										"nodeType": "StructuredDocumentation",
										"src": "1880:87:7",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1239,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1981:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2004:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "1996:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1230,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:7"
									},
									"returnParameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2053:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1239,
												"src": "2033:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1205_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1234,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1233,
														"name": "BooleanSlot",
														"nameLocations": [
															"2033:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1205,
														"src": "2033:11:7"
													},
													"referencedDeclaration": 1205,
													"src": "2033:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1205_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2032:23:7"
									},
									"scope": 1306,
									"src": "1972:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1249,
										"nodeType": "Block",
										"src": "2344:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2406:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2420:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2430:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2420:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1246,
														"isOffset": false,
														"isSlot": true,
														"src": "2420:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1242,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:4:7",
														"valueSize": 1
													}
												],
												"id": 1248,
												"nodeType": "InlineAssembly",
												"src": "2397:47:7"
											}
										]
									},
									"documentation": {
										"id": 1240,
										"nodeType": "StructuredDocumentation",
										"src": "2168:87:7",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2269:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2292:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "2284:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1241,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2284:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2283:14:7"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2341:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1250,
												"src": "2321:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1208_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1245,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1244,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2321:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1208,
														"src": "2321:11:7"
													},
													"referencedDeclaration": 1208,
													"src": "2321:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1208_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2320:23:7"
									},
									"scope": 1306,
									"src": "2260:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "2632:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2694:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2708:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "2718:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2708:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1257,
														"isOffset": false,
														"isSlot": true,
														"src": "2708:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1253,
														"isOffset": false,
														"isSlot": false,
														"src": "2718:4:7",
														"valueSize": 1
													}
												],
												"id": 1259,
												"nodeType": "InlineAssembly",
												"src": "2685:47:7"
											}
										]
									},
									"documentation": {
										"id": 1251,
										"nodeType": "StructuredDocumentation",
										"src": "2456:87:7",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2557:14:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1253,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2580:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "2572:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1252,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2571:14:7"
									},
									"returnParameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2629:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "2609:21:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1211_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1256,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1255,
														"name": "Uint256Slot",
														"nameLocations": [
															"2609:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1211,
														"src": "2609:11:7"
													},
													"referencedDeclaration": 1211,
													"src": "2609:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1211_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2608:23:7"
									},
									"scope": 1306,
									"src": "2548:190:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1271,
										"nodeType": "Block",
										"src": "2917:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "2979:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2993:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3003:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1268,
														"isOffset": false,
														"isSlot": true,
														"src": "2993:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1264,
														"isOffset": false,
														"isSlot": false,
														"src": "3003:4:7",
														"valueSize": 1
													}
												],
												"id": 1270,
												"nodeType": "InlineAssembly",
												"src": "2970:47:7"
											}
										]
									},
									"documentation": {
										"id": 1262,
										"nodeType": "StructuredDocumentation",
										"src": "2744:86:7",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1272,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2844:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2866:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "2858:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1263,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:14:7"
									},
									"returnParameters": {
										"id": 1269,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1268,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2914:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1272,
												"src": "2895:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1214_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1267,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1266,
														"name": "StringSlot",
														"nameLocations": [
															"2895:10:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1214,
														"src": "2895:10:7"
													},
													"referencedDeclaration": 1214,
													"src": "2895:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1214_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2894:22:7"
									},
									"scope": 1306,
									"src": "2835:188:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1282,
										"nodeType": "Block",
										"src": "3225:112:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3287:44:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3301:20:7",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3311:10:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": true,
														"src": "3301:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1275,
														"isOffset": false,
														"isSlot": true,
														"src": "3311:10:7",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1281,
												"nodeType": "InlineAssembly",
												"src": "3278:53:7"
											}
										]
									},
									"documentation": {
										"id": 1273,
										"nodeType": "StructuredDocumentation",
										"src": "3029:101:7",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3144:13:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3173:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "3158:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1274,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3157:22:7"
									},
									"returnParameters": {
										"id": 1280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1279,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3222:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1283,
												"src": "3203:20:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1214_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1278,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1277,
														"name": "StringSlot",
														"nameLocations": [
															"3203:10:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1214,
														"src": "3203:10:7"
													},
													"referencedDeclaration": 1214,
													"src": "3203:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1214_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3202:22:7"
									},
									"scope": 1306,
									"src": "3135:202:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1293,
										"nodeType": "Block",
										"src": "3513:106:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3575:38:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3589:14:7",
															"value": {
																"name": "slot",
																"nodeType": "YulIdentifier",
																"src": "3599:4:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1290,
														"isOffset": false,
														"isSlot": true,
														"src": "3589:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1286,
														"isOffset": false,
														"isSlot": false,
														"src": "3599:4:7",
														"valueSize": 1
													}
												],
												"id": 1292,
												"nodeType": "InlineAssembly",
												"src": "3566:47:7"
											}
										]
									},
									"documentation": {
										"id": 1284,
										"nodeType": "StructuredDocumentation",
										"src": "3343:85:7",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3442:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1286,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3463:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1294,
												"src": "3455:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1285,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:14:7"
									},
									"returnParameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1290,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3510:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1294,
												"src": "3492:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1217_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1289,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1288,
														"name": "BytesSlot",
														"nameLocations": [
															"3492:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1217,
														"src": "3492:9:7"
													},
													"referencedDeclaration": 1217,
													"src": "3492:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1217_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:21:7"
									},
									"scope": 1306,
									"src": "3433:186:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1304,
										"nodeType": "Block",
										"src": "3816:112:7",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3878:44:7",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3892:20:7",
															"value": {
																"name": "store.slot",
																"nodeType": "YulIdentifier",
																"src": "3902:10:7"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nodeType": "YulIdentifier",
																	"src": "3892:6:7"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 1301,
														"isOffset": false,
														"isSlot": true,
														"src": "3892:6:7",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1297,
														"isOffset": false,
														"isSlot": true,
														"src": "3902:10:7",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1303,
												"nodeType": "InlineAssembly",
												"src": "3869:53:7"
											}
										]
									},
									"documentation": {
										"id": 1295,
										"nodeType": "StructuredDocumentation",
										"src": "3625:99:7",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3738:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1297,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3765:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "3751:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1296,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:21:7"
									},
									"returnParameters": {
										"id": 1302,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1301,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3813:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1305,
												"src": "3795:19:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1217_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1299,
														"name": "BytesSlot",
														"nameLocations": [
															"3795:9:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1217,
														"src": "3795:9:7"
													},
													"referencedDeclaration": 1217,
													"src": "3795:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1217_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3794:21:7"
									},
									"scope": 1306,
									"src": "3729:199:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1307,
							"src": "1245:2685:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3738:7"
				},
				"id": 7
			},
			"lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3264
						],
						"SignedMath": [
							3369
						],
						"Strings": [
							1561
						]
					},
					"id": 1562,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1310,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1562,
							"sourceUnit": 3265,
							"src": "127:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1309,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3264,
										"src": "135:4:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1562,
							"sourceUnit": 3370,
							"src": "165:49:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1311,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3369,
										"src": "173:10:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1313,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:8",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1561,
							"linearizedBaseContracts": [
								1561
							],
							"name": "Strings",
							"nameLocation": "259:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1316,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:8",
									"nodeType": "VariableDeclaration",
									"scope": 1561,
									"src": "273:56:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1314,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1315,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1319,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:8",
									"nodeType": "VariableDeclaration",
									"scope": 1561,
									"src": "335:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1317,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1318,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1320,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:8",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1326,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1322,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "505:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1326,
												"src": "520:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:8"
									},
									"src": "470:66:8"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "708:627:8",
										"statements": [
											{
												"id": 1372,
												"nodeType": "UncheckedBlock",
												"src": "718:611:8",
												"statements": [
													{
														"assignments": [
															1335
														],
														"declarations": [
															{
																"constant": false,
																"id": 1335,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1372,
																"src": "742:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1334,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1342,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1338,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1329,
																		"src": "770:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1336,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3264,
																		"src": "759:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3264_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:8",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3084,
																	"src": "759:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1339,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:8"
													},
													{
														"assignments": [
															1344
														],
														"declarations": [
															{
																"constant": false,
																"id": 1344,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1372,
																"src": "794:20:8",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1343,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1349,
														"initialValue": {
															"arguments": [
																{
																	"id": 1347,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1335,
																	"src": "828:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1346,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1345,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:8"
													},
													{
														"assignments": [
															1351
														],
														"declarations": [
															{
																"constant": false,
																"id": 1351,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1372,
																"src": "849:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1350,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1352,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "930:67:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "948:35:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "971:2:8",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:8"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:8"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1344,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1335,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1351,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:8",
																"valueSize": 1
															}
														],
														"id": 1353,
														"nodeType": "InlineAssembly",
														"src": "921:76:8"
													},
													{
														"body": {
															"id": 1368,
															"nodeType": "Block",
															"src": "1023:269:8",
															"statements": [
																{
																	"expression": {
																		"id": 1356,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:8",
																		"subExpression": {
																			"id": 1355,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1351,
																			"src": "1041:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1357,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:8"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "1124:86:8",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:8"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:8",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:8"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:8"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:8"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:8"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 1316,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1351,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1329,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:8",
																			"valueSize": 1
																		}
																	],
																	"id": 1358,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:8"
																},
																{
																	"expression": {
																		"id": 1361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1359,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1329,
																			"src": "1227:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1360,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1362,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:8"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1365,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1363,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1329,
																			"src": "1260:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1364,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1367,
																	"nodeType": "IfStatement",
																	"src": "1256:21:8",
																	"trueBody": {
																		"id": 1366,
																		"nodeType": "Break",
																		"src": "1272:5:8"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1354,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1369,
														"nodeType": "WhileStatement",
														"src": "1010:282:8"
													},
													{
														"expression": {
															"id": 1370,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "1312:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1333,
														"id": 1371,
														"nodeType": "Return",
														"src": "1305:13:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1327,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "655:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1328,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:8"
									},
									"returnParameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1332,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "693:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1331,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:8"
									},
									"scope": 1561,
									"src": "637:698:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1399,
										"nodeType": "Block",
										"src": "1511:92:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1387,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1385,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1377,
																	"src": "1542:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1390,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:8",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1388,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1394,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1377,
																			"src": "1588:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1392,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3369,
																			"src": "1573:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3369_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1393,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:8",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3368,
																		"src": "1573:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1395,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1391,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1374,
																"src": "1564:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1396,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1382,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:8",
																"typeDescriptions": {}
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:8",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1381,
												"id": 1398,
												"nodeType": "Return",
												"src": "1521:75:8"
											}
										]
									},
									"documentation": {
										"id": 1375,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:8",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1400,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1377,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1400,
												"src": "1459:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1376,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:8"
									},
									"returnParameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1400,
												"src": "1496:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1379,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:8"
									},
									"scope": 1561,
									"src": "1435:168:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1419,
										"nodeType": "Block",
										"src": "1782:100:8",
										"statements": [
											{
												"id": 1418,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1403,
																	"src": "1835:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1415,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1412,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1403,
																				"src": "1854:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1410,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3264,
																				"src": "1842:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3264_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1411,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:8",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3206,
																			"src": "1842:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1413,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1408,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1420,
																	1503,
																	1523
																],
																"referencedDeclaration": 1503,
																"src": "1823:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1407,
														"id": 1417,
														"nodeType": "Return",
														"src": "1816:49:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1401,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "1729:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:8"
									},
									"returnParameters": {
										"id": 1407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1406,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "1767:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1405,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:8"
									},
									"scope": 1561,
									"src": "1708:174:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1502,
										"nodeType": "Block",
										"src": "2095:435:8",
										"statements": [
											{
												"assignments": [
													1431
												],
												"declarations": [
													{
														"constant": false,
														"id": 1431,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1502,
														"src": "2105:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1430,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1433,
												"initialValue": {
													"id": 1432,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1423,
													"src": "2126:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:8"
											},
											{
												"assignments": [
													1435
												],
												"declarations": [
													{
														"constant": false,
														"id": 1435,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1502,
														"src": "2141:19:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1434,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1444,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1440,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1438,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1439,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1425,
																	"src": "2177:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1441,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1437,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1436,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:8"
											},
											{
												"expression": {
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1445,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "2198:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1447,
														"indexExpression": {
															"hexValue": "30",
															"id": 1446,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1448,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1450,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:8"
											},
											{
												"expression": {
													"id": 1455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1451,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "2223:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1453,
														"indexExpression": {
															"hexValue": "31",
															"id": 1452,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1454,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1456,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:8"
											},
											{
												"body": {
													"id": 1485,
													"nodeType": "Block",
													"src": "2293:95:8",
													"statements": [
														{
															"expression": {
																"id": 1479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1471,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1435,
																		"src": "2307:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1473,
																	"indexExpression": {
																		"id": 1472,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1458,
																		"src": "2314:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1474,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1316,
																		"src": "2319:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1478,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1477,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1475,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1431,
																			"src": "2330:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1476,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1480,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:8"
														},
														{
															"expression": {
																"id": 1483,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1481,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1431,
																	"src": "2361:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1484,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1465,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1458,
														"src": "2281:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1466,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1486,
												"initializationExpression": {
													"assignments": [
														1458
													],
													"declarations": [
														{
															"constant": false,
															"id": 1458,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1486,
															"src": "2253:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1457,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1464,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1463,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1460,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1425,
																"src": "2269:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1462,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:8"
												},
												"loopExpression": {
													"expression": {
														"id": 1469,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:8",
														"subExpression": {
															"id": 1468,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "2290:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1470,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:8"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1487,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1431,
														"src": "2401:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1496,
												"nodeType": "IfStatement",
												"src": "2397:96:8",
												"trueBody": {
													"id": 1495,
													"nodeType": "Block",
													"src": "2418:75:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1491,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1423,
																		"src": "2468:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1492,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1425,
																		"src": "2475:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1490,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1326,
																	"src": "2439:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 1493,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1494,
															"nodeType": "RevertStatement",
															"src": "2432:50:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1499,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1435,
															"src": "2516:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1498,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1497,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:8",
															"typeDescriptions": {}
														}
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1429,
												"id": 1501,
												"nodeType": "Return",
												"src": "2502:21:8"
											}
										]
									},
									"documentation": {
										"id": 1421,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1423,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2026:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2041:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:8"
									},
									"returnParameters": {
										"id": 1429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "2080:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1427,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:8"
									},
									"scope": 1561,
									"src": "2005:525:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1522,
										"nodeType": "Block",
										"src": "2762:75:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1516,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1506,
																			"src": "2807:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1515,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1514,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1513,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1512,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1519,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1319,
															"src": "2815:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1511,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1420,
															1503,
															1523
														],
														"referencedDeclaration": 1503,
														"src": "2779:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1510,
												"id": 1521,
												"nodeType": "Return",
												"src": "2772:58:8"
											}
										]
									},
									"documentation": {
										"id": 1504,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:8",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1523,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "2710:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1505,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:8"
									},
									"returnParameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1523,
												"src": "2747:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1508,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:8"
									},
									"scope": 1561,
									"src": "2689:148:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1559,
										"nodeType": "Block",
										"src": "2992:104:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1543,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1535,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1526,
																		"src": "3015:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1533,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1536,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1537,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1540,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1528,
																		"src": "3034:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1539,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1538,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1541,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1542,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1556,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1547,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1526,
																			"src": "3063:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1546,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1545,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1544,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1553,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1528,
																			"src": "3086:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1551,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1550,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1555,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1532,
												"id": 1558,
												"nodeType": "Return",
												"src": "3002:87:8"
											}
										]
									},
									"documentation": {
										"id": 1524,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:8",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1526,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "2929:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1525,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "2946:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1527,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:8"
									},
									"returnParameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1560,
												"src": "2986:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1530,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:8"
									},
									"scope": 1561,
									"src": "2914:182:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1562,
							"src": "251:2847:8",
							"usedErrors": [
								1326
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:8"
				},
				"id": 8
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							1909
						]
					},
					"id": 1910,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1563,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1564,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:9",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 1909,
							"linearizedBaseContracts": [
								1909
							],
							"name": "ECDSA",
							"nameLocation": "352:5:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1569,
									"members": [
										{
											"id": 1565,
											"name": "NoError",
											"nameLocation": "392:7:9",
											"nodeType": "EnumValue",
											"src": "392:7:9"
										},
										{
											"id": 1566,
											"name": "InvalidSignature",
											"nameLocation": "409:16:9",
											"nodeType": "EnumValue",
											"src": "409:16:9"
										},
										{
											"id": 1567,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:9",
											"nodeType": "EnumValue",
											"src": "435:22:9"
										},
										{
											"id": 1568,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:9",
											"nodeType": "EnumValue",
											"src": "467:17:9"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:9",
									"nodeType": "EnumDefinition",
									"src": "364:126:9"
								},
								{
									"documentation": {
										"id": 1570,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:9",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1572,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:9"
									},
									"src": "564:30:9"
								},
								{
									"documentation": {
										"id": 1573,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:9",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1577,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "699:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:9"
									},
									"src": "665:50:9"
								},
								{
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:9",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1582,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1582,
												"src": "840:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1579,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:9"
									},
									"src": "811:40:9"
								},
								{
									"body": {
										"id": 1634,
										"nodeType": "Block",
										"src": "2242:653:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1597,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1587,
															"src": "2256:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1598,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1599,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1632,
													"nodeType": "Block",
													"src": "2781:108:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1621,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1620,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1619,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1622,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1623,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1569,
																			"src": "2815:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:9",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1567,
																		"src": "2815:35:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1569",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1627,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1587,
																					"src": "2860:9:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1628,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:9",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1626,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1625,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1629,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1630,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1596,
															"id": 1631,
															"nodeType": "Return",
															"src": "2795:83:9"
														}
													]
												},
												"id": 1633,
												"nodeType": "IfStatement",
												"src": "2252:637:9",
												"trueBody": {
													"id": 1618,
													"nodeType": "Block",
													"src": "2280:495:9",
													"statements": [
														{
															"assignments": [
																1602
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1602,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1618,
																	"src": "2294:9:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1601,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1603,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:9"
														},
														{
															"assignments": [
																1605
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1605,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1618,
																	"src": "2317:9:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1604,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1606,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:9"
														},
														{
															"assignments": [
																1608
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1608,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1618,
																	"src": "2340:7:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1607,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1609,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:9"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2548:171:9",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2566:32:9",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:9",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:9"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2615:32:9",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:9"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:9",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:9"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:9"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2664:41:9",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:9",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:9"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:9",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:9"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:9"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:9"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:9"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:9"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:9"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:9"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 1602,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1605,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1587,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1587,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1587,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:9",
																	"valueSize": 1
																},
																{
																	"declaration": 1608,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:9",
																	"valueSize": 1
																}
															],
															"id": 1610,
															"nodeType": "InlineAssembly",
															"src": "2539:180:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1612,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1585,
																		"src": "2750:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1613,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1608,
																		"src": "2756:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1614,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1602,
																		"src": "2759:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1615,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1605,
																		"src": "2762:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1611,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1635,
																		1715,
																		1823
																	],
																	"referencedDeclaration": 1823,
																	"src": "2739:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1596,
															"id": 1617,
															"nodeType": "Return",
															"src": "2732:32:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1583,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:9",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1635,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1585,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "2149:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1584,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "2163:22:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1586,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:9"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "2210:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "2219:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1569",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1592,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1591,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1569,
														"src": "2219:12:9"
													},
													"referencedDeclaration": 1569,
													"src": "2219:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1569",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1635,
												"src": "2233:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1594,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:9"
									},
									"scope": 1909,
									"src": "2129:766:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1664,
										"nodeType": "Block",
										"src": "3789:168:9",
										"statements": [
											{
												"assignments": [
													1646,
													1649,
													1651
												],
												"declarations": [
													{
														"constant": false,
														"id": 1646,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1664,
														"src": "3800:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1645,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1649,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1664,
														"src": "3819:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1648,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1647,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1569,
																"src": "3819:12:9"
															},
															"referencedDeclaration": 1569,
															"src": "3819:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1651,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 1664,
														"src": "3839:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1650,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1656,
												"initialValue": {
													"arguments": [
														{
															"id": 1653,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1638,
															"src": "3870:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1654,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1640,
															"src": "3876:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1652,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1635,
															1715,
															1823
														],
														"referencedDeclaration": 1635,
														"src": "3859:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1655,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1658,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1649,
															"src": "3908:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1659,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1651,
															"src": "3915:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1657,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1908,
														"src": "3896:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1569_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1661,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:9"
											},
											{
												"expression": {
													"id": 1662,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1646,
													"src": "3941:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1644,
												"id": 1663,
												"nodeType": "Return",
												"src": "3934:16:9"
											}
										]
									},
									"documentation": {
										"id": 1636,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:9",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1665,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "3719:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1637,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "3733:22:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1639,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:9"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1665,
												"src": "3780:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:9"
									},
									"scope": 1909,
									"src": "3702:255:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1714,
										"nodeType": "Block",
										"src": "4285:342:9",
										"statements": [
											{
												"id": 1713,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:9",
												"statements": [
													{
														"assignments": [
															1683
														],
														"declarations": [
															{
																"constant": false,
																"id": 1683,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:9",
																"nodeType": "VariableDeclaration",
																"scope": 1713,
																"src": "4319:9:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1682,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1690,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1684,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1672,
																"src": "4331:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 1687,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 1686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1685,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 1688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:9"
													},
													{
														"assignments": [
															1692
														],
														"declarations": [
															{
																"constant": false,
																"id": 1692,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:9",
																"nodeType": "VariableDeclaration",
																"scope": 1713,
																"src": "4522:7:9",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 1691,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1705,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1700,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 1697,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1672,
																							"src": "4547:2:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 1696,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1695,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:9",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1698,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:9",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 1699,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1701,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 1702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1694,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 1693,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:9"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1707,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1668,
																	"src": "4596:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1708,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1692,
																	"src": "4602:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 1709,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1670,
																	"src": "4605:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1710,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1683,
																	"src": "4608:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1706,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1635,
																	1715,
																	1823
																],
																"referencedDeclaration": 1823,
																"src": "4585:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 1711,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1681,
														"id": 1712,
														"nodeType": "Return",
														"src": "4578:32:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1666,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:9",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 1715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1668,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4193:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1667,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1670,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4207:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1669,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4218:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1671,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:9"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1675,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4253:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1674,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1678,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4262:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1569",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1677,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1676,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1569,
														"src": "4262:12:9"
													},
													"referencedDeclaration": 1569,
													"src": "4262:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1569",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1715,
												"src": "4276:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1679,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:9"
									},
									"scope": 1909,
									"src": "4173:454:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1747,
										"nodeType": "Block",
										"src": "4840:164:9",
										"statements": [
											{
												"assignments": [
													1728,
													1731,
													1733
												],
												"declarations": [
													{
														"constant": false,
														"id": 1728,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1747,
														"src": "4851:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1727,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1731,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1747,
														"src": "4870:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1730,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1729,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1569,
																"src": "4870:12:9"
															},
															"referencedDeclaration": 1569,
															"src": "4870:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1733,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 1747,
														"src": "4890:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1732,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1739,
												"initialValue": {
													"arguments": [
														{
															"id": 1735,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "4921:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1736,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1720,
															"src": "4927:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1737,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1722,
															"src": "4930:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1734,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1635,
															1715,
															1823
														],
														"referencedDeclaration": 1715,
														"src": "4910:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1741,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1731,
															"src": "4955:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1742,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1733,
															"src": "4962:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1740,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1908,
														"src": "4943:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1569_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1743,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1744,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:9"
											},
											{
												"expression": {
													"id": 1745,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1728,
													"src": "4988:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1726,
												"id": 1746,
												"nodeType": "Return",
												"src": "4981:16:9"
											}
										]
									},
									"documentation": {
										"id": 1716,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:9",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 1748,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1723,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "4771:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1717,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "4785:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1719,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1722,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "4796:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1721,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:9"
									},
									"returnParameters": {
										"id": 1726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1725,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1748,
												"src": "4831:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1724,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:9"
									},
									"scope": 1909,
									"src": "4754:250:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1822,
										"nodeType": "Block",
										"src": "5298:1372:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1769,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "6194:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1767,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1770,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1783,
												"nodeType": "IfStatement",
												"src": "6182:164:9",
												"trueBody": {
													"id": 1782,
													"nodeType": "Block",
													"src": "6267:79:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1775,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1774,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1773,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1776,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1777,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1569,
																			"src": "6301:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1778,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:9",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1568,
																		"src": "6301:30:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1569",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 1779,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1757,
																		"src": "6333:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1780,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1766,
															"id": 1781,
															"nodeType": "Return",
															"src": "6281:54:9"
														}
													]
												}
											},
											{
												"assignments": [
													1785
												],
												"declarations": [
													{
														"constant": false,
														"id": 1785,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:9",
														"nodeType": "VariableDeclaration",
														"scope": 1822,
														"src": "6440:14:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1784,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1792,
												"initialValue": {
													"arguments": [
														{
															"id": 1787,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1751,
															"src": "6467:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1788,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1753,
															"src": "6473:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1789,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1755,
															"src": "6476:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1790,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "6479:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1786,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1793,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1785,
														"src": "6495:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1796,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1795,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1794,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 1797,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1812,
												"nodeType": "IfStatement",
												"src": "6491:113:9",
												"trueBody": {
													"id": 1811,
													"nodeType": "Block",
													"src": "6517:87:9",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1801,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1800,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1799,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1802,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1803,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1569,
																			"src": "6551:12:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1804,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:9",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1566,
																		"src": "6551:29:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1569",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1807,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1805,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1808,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1809,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1766,
															"id": 1810,
															"nodeType": "Return",
															"src": "6531:62:9"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 1813,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "6622:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1814,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1569,
																"src": "6630:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1815,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:9",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1565,
															"src": "6630:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1817,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1816,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1819,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 1820,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:9",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 1766,
												"id": 1821,
												"nodeType": "Return",
												"src": "6614:49:9"
											}
										]
									},
									"documentation": {
										"id": 1749,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:9",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1758,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1751,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5169:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1750,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1753,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5191:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1752,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1755,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5208:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1754,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5227:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1756,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:9"
									},
									"returnParameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1760,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5266:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1759,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5275:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1569",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1762,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1761,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1569,
														"src": "5275:12:9"
													},
													"referencedDeclaration": 1569,
													"src": "5275:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1569",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1823,
												"src": "5289:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1764,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:9"
									},
									"scope": 1909,
									"src": "5140:1530:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1858,
										"nodeType": "Block",
										"src": "6897:166:9",
										"statements": [
											{
												"assignments": [
													1838,
													1841,
													1843
												],
												"declarations": [
													{
														"constant": false,
														"id": 1838,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:9",
														"nodeType": "VariableDeclaration",
														"scope": 1858,
														"src": "6908:17:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1837,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:9",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1841,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1858,
														"src": "6927:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1840,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1839,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:9"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1569,
																"src": "6927:12:9"
															},
															"referencedDeclaration": 1569,
															"src": "6927:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1843,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 1858,
														"src": "6947:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1842,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1850,
												"initialValue": {
													"arguments": [
														{
															"id": 1845,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1826,
															"src": "6978:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1846,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1828,
															"src": "6984:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1847,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1830,
															"src": "6987:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1848,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1832,
															"src": "6990:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1844,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1635,
															1715,
															1823
														],
														"referencedDeclaration": 1823,
														"src": "6967:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1849,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1569_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1852,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1841,
															"src": "7014:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1853,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1843,
															"src": "7021:8:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1851,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1908,
														"src": "7002:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1569_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1855,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:9"
											},
											{
												"expression": {
													"id": 1856,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1838,
													"src": "7047:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1836,
												"id": 1857,
												"nodeType": "Return",
												"src": "7040:16:9"
											}
										]
									},
									"documentation": {
										"id": 1824,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:9",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 1859,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1826,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "6820:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1825,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1828,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "6834:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1827,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "6843:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1829,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "6854:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1831,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:9"
									},
									"returnParameters": {
										"id": 1836,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1835,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1859,
												"src": "6888:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1834,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:9"
									},
									"scope": 1909,
									"src": "6803:260:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1907,
										"nodeType": "Block",
										"src": "7268:460:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1569",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 1871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1868,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1863,
														"src": "7282:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 1869,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1569,
															"src": "7291:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 1870,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:9",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1565,
														"src": "7291:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1569",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 1877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1874,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1863,
															"src": "7378:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 1875,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1569,
																"src": "7387:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:9",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1566,
															"src": "7387:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1569",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 1885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1882,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1863,
																"src": "7483:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1569",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1883,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1569,
																	"src": "7492:12:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 1884,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:9",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1567,
																"src": "7492:35:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1569",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1569",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 1897,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1894,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1863,
																	"src": "7617:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1569",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 1895,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1569,
																		"src": "7626:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1569_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 1896,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:9",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1568,
																	"src": "7626:30:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1569",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1903,
															"nodeType": "IfStatement",
															"src": "7613:109:9",
															"trueBody": {
																"id": 1902,
																"nodeType": "Block",
																"src": "7658:64:9",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1899,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1865,
																					"src": "7702:8:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 1898,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1582,
																				"src": "7679:22:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$__$",
																					"typeString": "function (bytes32) pure"
																				}
																			},
																			"id": 1900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1901,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:9"
																	}
																]
															}
														},
														"id": 1904,
														"nodeType": "IfStatement",
														"src": "7479:243:9",
														"trueBody": {
															"id": 1893,
															"nodeType": "Block",
															"src": "7529:78:9",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1889,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1865,
																						"src": "7586:8:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 1888,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 1887,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:9",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1890,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1886,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1577,
																			"src": "7550:27:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																				"typeString": "function (uint256) pure"
																			}
																		},
																		"id": 1891,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1892,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:9"
																}
															]
														}
													},
													"id": 1905,
													"nodeType": "IfStatement",
													"src": "7374:348:9",
													"trueBody": {
														"id": 1881,
														"nodeType": "Block",
														"src": "7418:55:9",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1878,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1572,
																		"src": "7439:21:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 1879,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1880,
																"nodeType": "RevertStatement",
																"src": "7432:30:9"
															}
														]
													}
												},
												"id": 1906,
												"nodeType": "IfStatement",
												"src": "7278:444:9",
												"trueBody": {
													"id": 1873,
													"nodeType": "Block",
													"src": "7313:55:9",
													"statements": [
														{
															"functionReturnParameters": 1867,
															"id": 1872,
															"nodeType": "Return",
															"src": "7327:7:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1860,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:9",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 1908,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1863,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1908,
												"src": "7217:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1569",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1862,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1861,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1569,
														"src": "7217:12:9"
													},
													"referencedDeclaration": 1569,
													"src": "7217:12:9",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1569",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1865,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1908,
												"src": "7237:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1864,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:9"
									},
									"returnParameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:9"
									},
									"scope": 1909,
									"src": "7196:532:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1910,
							"src": "344:7386:9",
							"usedErrors": [
								1572,
								1577,
								1582
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:9"
				},
				"id": 9
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2136
						],
						"IERC5267": [
							24
						],
						"MessageHashUtils": [
							2210
						],
						"ShortString": [
							985
						],
						"ShortStrings": [
							1196
						]
					},
					"id": 2137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1911,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:10"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 1913,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2137,
							"sourceUnit": 2211,
							"src": "139:56:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1912,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2210,
										"src": "147:16:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 1916,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2137,
							"sourceUnit": 1197,
							"src": "196:62:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1914,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1196,
										"src": "204:12:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 1915,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 985,
										"src": "218:11:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 1918,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2137,
							"sourceUnit": 25,
							"src": "259:55:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1917,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 24,
										"src": "267:8:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1920,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 24,
										"src": "1988:8:10"
									},
									"id": 1921,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:10"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1919,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:10",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2136,
							"linearizedBaseContracts": [
								2136,
								24
							],
							"name": "EIP712",
							"nameLocation": "1978:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1923,
									"libraryName": {
										"id": 1922,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1196,
										"src": "2009:12:10"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:10"
								},
								{
									"constant": true,
									"id": 1928,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2034:140:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1924,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 1926,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:10",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 1925,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1927,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:10",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1930,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2373:48:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1929,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1932,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2427:40:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1931,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1934,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2473:37:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1933,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:10",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1936,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2517:37:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1935,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1938,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2560:40:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1937,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1941,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2607:35:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 1940,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1939,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 985,
											"src": "2607:11:10"
										},
										"referencedDeclaration": 985,
										"src": "2607:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1944,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2648:38:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 1943,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1942,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 985,
											"src": "2648:11:10"
										},
										"referencedDeclaration": 985,
										"src": "2648:11:10",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1946,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2692:28:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1945,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1948,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 2136,
									"src": "2726:31:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1947,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2005,
										"nodeType": "Block",
										"src": "3383:376:10",
										"statements": [
											{
												"expression": {
													"id": 1961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1956,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1941,
														"src": "3393:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1959,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1946,
																"src": "3432:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 1957,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1951,
																"src": "3401:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 1958,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:10",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1137,
															"src": "3401:30:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$985_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 1960,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"id": 1962,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:10"
											},
											{
												"expression": {
													"id": 1968,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1963,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1944,
														"src": "3456:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1966,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1948,
																"src": "3501:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 1964,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1953,
																"src": "3467:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 1965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:10",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1137,
															"src": "3467:33:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$985_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 1967,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
														"typeString": "ShortString"
													}
												},
												"id": 1969,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:10"
											},
											{
												"expression": {
													"id": 1977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1970,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1936,
														"src": "3528:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1974,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1951,
																		"src": "3558:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1972,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 1975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1971,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1976,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1978,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:10"
											},
											{
												"expression": {
													"id": 1986,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1979,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1938,
														"src": "3574:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1983,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1953,
																		"src": "3607:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1982,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1981,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:10",
																		"typeDescriptions": {}
																	}
																},
																"id": 1984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1980,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 1985,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1987,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:10"
											},
											{
												"expression": {
													"id": 1991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1988,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1932,
														"src": "3627:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1989,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1990,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:10",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1992,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:10"
											},
											{
												"expression": {
													"id": 1996,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1993,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1930,
														"src": "3667:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1994,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2053,
															"src": "3692:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 1995,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1997,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:10"
											},
											{
												"expression": {
													"id": 2003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1998,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1934,
														"src": "3725:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2001,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2136",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2136",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2000,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1999,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 2002,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2004,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:10"
											}
										]
									},
									"documentation": {
										"id": 1949,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:10",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2006,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2006,
												"src": "3340:18:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1950,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1953,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2006,
												"src": "3360:21:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1952,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:10"
									},
									"returnParameters": {
										"id": 1955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:10"
									},
									"scope": 2136,
									"src": "3328:431:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2031,
										"nodeType": "Block",
										"src": "3907:200:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2022,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2017,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2014,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2136",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2136",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2013,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2012,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2015,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2016,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1934,
															"src": "3938:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2021,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2018,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:10",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2020,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "3970:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2029,
													"nodeType": "Block",
													"src": "4046:55:10",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2026,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2053,
																	"src": "4067:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2027,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2011,
															"id": 2028,
															"nodeType": "Return",
															"src": "4060:30:10"
														}
													]
												},
												"id": 2030,
												"nodeType": "IfStatement",
												"src": "3917:184:10",
												"trueBody": {
													"id": 2025,
													"nodeType": "Block",
													"src": "3986:54:10",
													"statements": [
														{
															"expression": {
																"id": 2023,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1930,
																"src": "4007:22:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2011,
															"id": 2024,
															"nodeType": "Return",
															"src": "4000:29:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2007,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:10",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:10"
									},
									"returnParameters": {
										"id": 2011,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2010,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2032,
												"src": "3898:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2009,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:10"
									},
									"scope": 2136,
									"src": "3845:262:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2052,
										"nodeType": "Block",
										"src": "4177:115:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2040,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1928,
																	"src": "4215:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2041,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1936,
																	"src": "4226:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2042,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1938,
																	"src": "4239:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2043,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2044,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:10",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2047,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2136",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2136",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2046,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2045,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2048,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2038,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2039,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:10",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2049,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2037,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2050,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2036,
												"id": 2051,
												"nodeType": "Return",
												"src": "4187:98:10"
											}
										]
									},
									"id": 2053,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2033,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:10"
									},
									"returnParameters": {
										"id": 2036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2053,
												"src": "4168:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2034,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:10"
									},
									"scope": 2136,
									"src": "4113:179:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2068,
										"nodeType": "Block",
										"src": "5003:90:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2063,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2032,
																"src": "5053:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2065,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2056,
															"src": "5075:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2061,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2210,
															"src": "5020:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2210_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2062,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:10",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2209,
														"src": "5020:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2060,
												"id": 2067,
												"nodeType": "Return",
												"src": "5013:73:10"
											}
										]
									},
									"documentation": {
										"id": 2054,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:10",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "4943:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2055,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:10"
									},
									"returnParameters": {
										"id": 2060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2059,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "4994:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2058,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:10"
									},
									"scope": 2136,
									"src": "4917:176:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										23
									],
									"body": {
										"id": 2110,
										"nodeType": "Block",
										"src": "5472:229:10",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2088,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2089,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2123,
																"src": "5533:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2090,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2091,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2135,
																"src": "5560:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2092,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2093,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:10",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2097,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2136",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2136",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2096,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2095,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2098,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2099,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2106,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2105,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2103,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2104,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2107,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2108,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2087,
												"id": 2109,
												"nodeType": "Return",
												"src": "5482:212:10"
											}
										]
									},
									"documentation": {
										"id": 2070,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:10",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:10"
									},
									"returnParameters": {
										"id": 2087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2073,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5242:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2072,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2075,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5269:18:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2074,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5301:21:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2076,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2079,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5336:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2078,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2081,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5365:25:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2080,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5404:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2082,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2086,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "5430:27:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2084,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2085,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:10"
									},
									"scope": 2136,
									"src": "5144:557:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2122,
										"nodeType": "Block",
										"src": "6082:65:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2119,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1946,
															"src": "6126:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2117,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1941,
															"src": "6099:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																"typeString": "ShortString"
															}
														},
														"id": 2118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:10",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1164,
														"src": "6099:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$985_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$985_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2116,
												"id": 2121,
												"nodeType": "Return",
												"src": "6092:48:10"
											}
										]
									},
									"documentation": {
										"id": 2112,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:10",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2123,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:10"
									},
									"returnParameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2123,
												"src": "6067:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2114,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:10"
									},
									"scope": 2136,
									"src": "6021:126:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2134,
										"nodeType": "Block",
										"src": "6537:71:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2131,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1948,
															"src": "6584:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2129,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1944,
															"src": "6554:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$985",
																"typeString": "ShortString"
															}
														},
														"id": 2130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:10",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1164,
														"src": "6554:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$985_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$985_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2128,
												"id": 2133,
												"nodeType": "Return",
												"src": "6547:54:10"
											}
										]
									},
									"documentation": {
										"id": 2124,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:10",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:10"
									},
									"returnParameters": {
										"id": 2128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2135,
												"src": "6522:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2126,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:10"
									},
									"scope": 2136,
									"src": "6473:135:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2137,
							"src": "1960:4650:10",
							"usedErrors": [
								993,
								995
							],
							"usedEvents": [
								4
							]
						}
					],
					"src": "113:6498:10"
				},
				"id": 10
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2210
						],
						"Strings": [
							1561
						]
					},
					"id": 2211,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:11"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2211,
							"sourceUnit": 1562,
							"src": "149:39:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2139,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1561,
										"src": "157:7:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2141,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:11",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2210,
							"linearizedBaseContracts": [
								2210
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2150,
										"nodeType": "Block",
										"src": "1314:368:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1376:300:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:11",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:11",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1390:48:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:11",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1492:25:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1571:31:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:11",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:11",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "1581:21:11"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2147,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:11",
														"valueSize": 1
													},
													{
														"declaration": 2144,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:11",
														"valueSize": 1
													}
												],
												"id": 2149,
												"nodeType": "InlineAssembly",
												"src": "1367:309:11"
											}
										]
									},
									"documentation": {
										"id": 2142,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:11",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "1254:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:11"
									},
									"returnParameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2151,
												"src": "1298:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2146,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:11"
									},
									"scope": 2210,
									"src": "1222:460:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2176,
										"nodeType": "Block",
										"src": "2234:143:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2168,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2154,
																						"src": "2343:7:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2169,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:11",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2166,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1561,
																					"src": "2326:7:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1561_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:11",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1374,
																				"src": "2326:16:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:11",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2164,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2172,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2154,
																	"src": "2361:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2161,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2160,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:11",
																		"typeDescriptions": {}
																	}
																},
																"id": 2162,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:11",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2159,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2158,
												"id": 2175,
												"nodeType": "Return",
												"src": "2244:126:11"
											}
										]
									},
									"documentation": {
										"id": 2152,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:11",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "2180:20:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2153,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:11"
									},
									"returnParameters": {
										"id": 2158,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2157,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2177,
												"src": "2225:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2156,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:11"
									},
									"scope": 2210,
									"src": "2148:229:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2196,
										"nodeType": "Block",
										"src": "2831:80:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2190,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2191,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2180,
																	"src": "2887:9:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2192,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2182,
																	"src": "2898:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2188,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:11",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2193,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2187,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2186,
												"id": 2195,
												"nodeType": "Return",
												"src": "2841:63:11"
											}
										]
									},
									"documentation": {
										"id": 2178,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:11",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2180,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2761:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2179,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2182,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2780:17:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2181,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:11"
									},
									"returnParameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2197,
												"src": "2822:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2184,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:11"
									},
									"scope": 2210,
									"src": "2720:191:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2208,
										"nodeType": "Block",
										"src": "3462:292:11",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "3524:224:11",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:11",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:11",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3549:11:11"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:11",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:11"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:11",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3573:23:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:11",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:11"
																	},
																	{
																		"name": "domainSeparator",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3609:39:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:11",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:11"
																	},
																	{
																		"name": "structHash",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3661:34:11"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:11"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3708:30:11",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:11"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:11",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:11"
																},
																"nodeType": "YulFunctionCall",
																"src": "3718:20:11"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "shanghai",
												"externalReferences": [
													{
														"declaration": 2205,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:11",
														"valueSize": 1
													},
													{
														"declaration": 2200,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:11",
														"valueSize": 1
													},
													{
														"declaration": 2202,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:11",
														"valueSize": 1
													}
												],
												"id": 2207,
												"nodeType": "InlineAssembly",
												"src": "3515:233:11"
											}
										]
									},
									"documentation": {
										"id": 2198,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:11",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2200,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:11",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "3378:23:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2199,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2202,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "3403:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2201,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:11"
									},
									"returnParameters": {
										"id": 2206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2209,
												"src": "3446:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2204,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:11"
									},
									"scope": 2210,
									"src": "3353:401:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2211,
							"src": "521:3235:11",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:11"
				},
				"id": 11
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3264
						]
					},
					"id": 3265,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2212,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2213,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:12",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3264,
							"linearizedBaseContracts": [
								3264
							],
							"name": "Math",
							"nameLocation": "211:4:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2214,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:12",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2216,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:12"
									},
									"src": "277:29:12"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2221,
									"members": [
										{
											"id": 2217,
											"name": "Floor",
											"nameLocation": "336:5:12",
											"nodeType": "EnumValue",
											"src": "336:5:12"
										},
										{
											"id": 2218,
											"name": "Ceil",
											"nameLocation": "379:4:12",
											"nodeType": "EnumValue",
											"src": "379:4:12"
										},
										{
											"id": 2219,
											"name": "Trunc",
											"nameLocation": "421:5:12",
											"nodeType": "EnumValue",
											"src": "421:5:12"
										},
										{
											"id": 2220,
											"name": "Expand",
											"nameLocation": "451:6:12",
											"nodeType": "EnumValue",
											"src": "451:6:12"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:12",
									"nodeType": "EnumDefinition",
									"src": "312:169:12"
								},
								{
									"body": {
										"id": 2252,
										"nodeType": "Block",
										"src": "661:140:12",
										"statements": [
											{
												"id": 2251,
												"nodeType": "UncheckedBlock",
												"src": "671:124:12",
												"statements": [
													{
														"assignments": [
															2234
														],
														"declarations": [
															{
																"constant": false,
																"id": 2234,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:12",
																"nodeType": "VariableDeclaration",
																"scope": 2251,
																"src": "695:9:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2233,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2238,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2235,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2224,
																"src": "707:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2236,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2226,
																"src": "711:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2239,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2234,
																"src": "730:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2240,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2224,
																"src": "734:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2246,
														"nodeType": "IfStatement",
														"src": "726:28:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2243,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2244,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2232,
															"id": 2245,
															"nodeType": "Return",
															"src": "737:17:12"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2247,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2248,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2234,
																	"src": "782:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2249,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2232,
														"id": 2250,
														"nodeType": "Return",
														"src": "768:16:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2222,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:12",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2224,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "601:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2226,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "612:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2225,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:12"
									},
									"returnParameters": {
										"id": 2232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "646:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2228,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "652:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:12"
									},
									"scope": 3264,
									"src": "585:216:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2280,
										"nodeType": "Block",
										"src": "984:113:12",
										"statements": [
											{
												"id": 2279,
												"nodeType": "UncheckedBlock",
												"src": "994:97:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2267,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2265,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2258,
																"src": "1022:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2266,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2256,
																"src": "1026:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2272,
														"nodeType": "IfStatement",
														"src": "1018:28:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2269,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2270,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2264,
															"id": 2271,
															"nodeType": "Return",
															"src": "1029:17:12"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2274,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2256,
																		"src": "1074:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2275,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2258,
																		"src": "1078:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2277,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2264,
														"id": 2278,
														"nodeType": "Return",
														"src": "1060:20:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2254,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:12",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2256,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "924:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2255,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2258,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "935:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:12"
									},
									"returnParameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "969:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2260,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2281,
												"src": "975:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:12"
									},
									"scope": 3264,
									"src": "908:189:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2322,
										"nodeType": "Block",
										"src": "1283:417:12",
										"statements": [
											{
												"id": 2321,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2293,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2284,
																"src": "1551:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2300,
														"nodeType": "IfStatement",
														"src": "1547:28:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2298,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2292,
															"id": 2299,
															"nodeType": "Return",
															"src": "1559:16:12"
														}
													},
													{
														"assignments": [
															2302
														],
														"declarations": [
															{
																"constant": false,
																"id": 2302,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:12",
																"nodeType": "VariableDeclaration",
																"scope": 2321,
																"src": "1589:9:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2301,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2306,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2303,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2284,
																"src": "1601:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2304,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2286,
																"src": "1605:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2307,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2302,
																	"src": "1624:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2308,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2284,
																	"src": "1628:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2310,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2286,
																"src": "1633:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2316,
														"nodeType": "IfStatement",
														"src": "1620:33:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2314,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2292,
															"id": 2315,
															"nodeType": "Return",
															"src": "1636:17:12"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2318,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2302,
																	"src": "1681:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2319,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2292,
														"id": 2320,
														"nodeType": "Return",
														"src": "1667:16:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2282,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:12",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2323,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2284,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "1223:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2286,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "1234:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2285,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:12"
									},
									"returnParameters": {
										"id": 2292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "1268:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2288,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "1274:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:12"
									},
									"scope": 3264,
									"src": "1207:493:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2350,
										"nodeType": "Block",
										"src": "1887:114:12",
										"statements": [
											{
												"id": 2349,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2337,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2335,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2328,
																"src": "1925:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2336,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2342,
														"nodeType": "IfStatement",
														"src": "1921:29:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2338,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2339,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2340,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2334,
															"id": 2341,
															"nodeType": "Return",
															"src": "1933:17:12"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2344,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2326,
																		"src": "1978:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2345,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2328,
																		"src": "1982:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2347,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2334,
														"id": 2348,
														"nodeType": "Return",
														"src": "1964:20:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2324,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:12",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2326,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "1827:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2328,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "1838:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2327,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:12"
									},
									"returnParameters": {
										"id": 2334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2331,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "1872:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2330,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2351,
												"src": "1878:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:12"
									},
									"scope": 3264,
									"src": "1811:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2378,
										"nodeType": "Block",
										"src": "2198:114:12",
										"statements": [
											{
												"id": 2377,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2363,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2356,
																"src": "2236:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2364,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2370,
														"nodeType": "IfStatement",
														"src": "2232:29:12",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2367,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2368,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2362,
															"id": 2369,
															"nodeType": "Return",
															"src": "2244:17:12"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2371,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2374,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2372,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2354,
																		"src": "2289:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2373,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2356,
																		"src": "2293:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2375,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:12",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2362,
														"id": 2376,
														"nodeType": "Return",
														"src": "2275:20:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2352,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:12",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "2138:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "2149:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:12"
									},
									"returnParameters": {
										"id": 2362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "2183:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2358,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2379,
												"src": "2189:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:12"
									},
									"scope": 3264,
									"src": "2122:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2396,
										"nodeType": "Block",
										"src": "2449:37:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2391,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2389,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2382,
															"src": "2466:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2390,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2384,
															"src": "2470:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2393,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2384,
														"src": "2478:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:12",
													"trueExpression": {
														"id": 2392,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2382,
														"src": "2474:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2388,
												"id": 2395,
												"nodeType": "Return",
												"src": "2459:20:12"
											}
										]
									},
									"documentation": {
										"id": 2380,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:12",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "2395:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "2406:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2383,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:12"
									},
									"returnParameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "2440:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:12"
									},
									"scope": 3264,
									"src": "2382:104:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2414,
										"nodeType": "Block",
										"src": "2624:37:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2409,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2407,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2400,
															"src": "2641:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2408,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2402,
															"src": "2645:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2411,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2402,
														"src": "2653:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2412,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:12",
													"trueExpression": {
														"id": 2410,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2400,
														"src": "2649:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2406,
												"id": 2413,
												"nodeType": "Return",
												"src": "2634:20:12"
											}
										]
									},
									"documentation": {
										"id": 2398,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:12",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2415,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2400,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2415,
												"src": "2570:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2415,
												"src": "2581:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:12"
									},
									"returnParameters": {
										"id": 2406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2415,
												"src": "2615:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:12"
									},
									"scope": 3264,
									"src": "2557:104:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2437,
										"nodeType": "Block",
										"src": "2845:82:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2425,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2418,
																	"src": "2900:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2426,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2420,
																	"src": "2904:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2428,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2431,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2429,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2418,
																		"src": "2910:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2430,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2420,
																		"src": "2914:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2432,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2433,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2424,
												"id": 2436,
												"nodeType": "Return",
												"src": "2892:28:12"
											}
										]
									},
									"documentation": {
										"id": 2416,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:12",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2438,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2418,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2791:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2802:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:12"
									},
									"returnParameters": {
										"id": 2424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2423,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2438,
												"src": "2836:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:12"
									},
									"scope": 3264,
									"src": "2774:153:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2471,
										"nodeType": "Block",
										"src": "3219:260:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2448,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2443,
														"src": "3233:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2449,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2456,
												"nodeType": "IfStatement",
												"src": "3229:127:12",
												"trueBody": {
													"id": 2455,
													"nodeType": "Block",
													"src": "3241:115:12",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2453,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2451,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2441,
																	"src": "3340:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2452,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2443,
																	"src": "3344:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2447,
															"id": 2454,
															"nodeType": "Return",
															"src": "3333:12:12"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2459,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2457,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2441,
															"src": "3444:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2458,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2468,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2466,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2463,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2461,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2441,
																			"src": "3458:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2462,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2464,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2465,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "3467:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2467,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:12",
													"trueExpression": {
														"hexValue": "30",
														"id": 2460,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2447,
												"id": 2470,
												"nodeType": "Return",
												"src": "3437:35:12"
											}
										]
									},
									"documentation": {
										"id": 2439,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:12",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2472,
												"src": "3165:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2443,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2472,
												"src": "3176:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:12"
									},
									"returnParameters": {
										"id": 2447,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2446,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2472,
												"src": "3210:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:12"
									},
									"scope": 3264,
									"src": "3148:331:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2597,
										"nodeType": "Block",
										"src": "3901:4018:12",
										"statements": [
											{
												"id": 2596,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:12",
												"statements": [
													{
														"assignments": [
															2485
														],
														"declarations": [
															{
																"constant": false,
																"id": 2485,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:12",
																"nodeType": "VariableDeclaration",
																"scope": 2596,
																"src": "4232:13:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2484,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2489,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2486,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2475,
																"src": "4248:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2487,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2477,
																"src": "4252:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:12"
													},
													{
														"assignments": [
															2491
														],
														"declarations": [
															{
																"constant": false,
																"id": 2491,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:12",
																"nodeType": "VariableDeclaration",
																"scope": 2596,
																"src": "4312:13:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2490,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2492,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:12"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "4392:122:12",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:12"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:12",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:12"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:12"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:12",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4457:43:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:12"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:12"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:12"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:12"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:12"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:12"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2491,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2475,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:12",
																"valueSize": 1
															},
															{
																"declaration": 2477,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:12",
																"valueSize": 1
															}
														],
														"id": 2493,
														"nodeType": "InlineAssembly",
														"src": "4383:131:12"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2496,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2494,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "4595:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2495,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2502,
														"nodeType": "IfStatement",
														"src": "4591:368:12",
														"trueBody": {
															"id": 2501,
															"nodeType": "Block",
															"src": "4607:352:12",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2497,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2485,
																			"src": "4925:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2498,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2479,
																			"src": "4933:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2483,
																	"id": 2500,
																	"nodeType": "Return",
																	"src": "4918:26:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2503,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2479,
																"src": "5065:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2504,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2491,
																"src": "5080:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2510,
														"nodeType": "IfStatement",
														"src": "5061:88:12",
														"trueBody": {
															"id": 2509,
															"nodeType": "Block",
															"src": "5087:62:12",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2506,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2216,
																			"src": "5112:20:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2507,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2508,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:12"
																}
															]
														}
													},
													{
														"assignments": [
															2512
														],
														"declarations": [
															{
																"constant": false,
																"id": 2512,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:12",
																"nodeType": "VariableDeclaration",
																"scope": 2596,
																"src": "5404:17:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2511,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2513,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:12"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "5444:291:12",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "5513:38:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:12"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:12"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:12"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:12"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:12"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5633:41:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:12"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:12"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:12"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:12"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:12"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5691:30:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:12"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:12"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:12"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:12"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2479,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2491,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2491,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2512,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:12",
																"valueSize": 1
															},
															{
																"declaration": 2512,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:12",
																"valueSize": 1
															},
															{
																"declaration": 2512,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:12",
																"valueSize": 1
															},
															{
																"declaration": 2475,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:12",
																"valueSize": 1
															},
															{
																"declaration": 2477,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:12",
																"valueSize": 1
															}
														],
														"id": 2514,
														"nodeType": "InlineAssembly",
														"src": "5435:300:12"
													},
													{
														"assignments": [
															2516
														],
														"declarations": [
															{
																"constant": false,
																"id": 2516,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:12",
																"nodeType": "VariableDeclaration",
																"scope": 2596,
																"src": "5939:12:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2515,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2523,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2517,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2479,
																"src": "5954:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2520,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2519,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2479,
																			"src": "5973:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2521,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:12"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "6008:362:12",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "6073:37:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:12"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:12"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:12"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:12"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6177:25:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:12"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:12"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:12"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:12"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6317:39:12",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:12",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:12"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:12"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:12"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:12"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:12"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:12"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:12",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:12"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:12"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:12"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2479,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:12",
																"valueSize": 1
															},
															{
																"declaration": 2479,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2485,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:12",
																"valueSize": 1
															},
															{
																"declaration": 2516,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:12",
																"valueSize": 1
															},
															{
																"declaration": 2516,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:12",
																"valueSize": 1
															},
															{
																"declaration": 2516,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:12",
																"valueSize": 1
															},
															{
																"declaration": 2516,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:12",
																"valueSize": 1
															},
															{
																"declaration": 2516,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:12",
																"valueSize": 1
															}
														],
														"id": 2524,
														"nodeType": "InlineAssembly",
														"src": "5999:371:12"
													},
													{
														"expression": {
															"id": 2529,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2525,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2485,
																"src": "6436:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2526,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2491,
																	"src": "6445:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2527,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2516,
																	"src": "6453:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2530,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:12"
													},
													{
														"assignments": [
															2532
														],
														"declarations": [
															{
																"constant": false,
																"id": 2532,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:12",
																"nodeType": "VariableDeclaration",
																"scope": 2596,
																"src": "6775:15:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2531,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2539,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2538,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2533,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2534,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2479,
																			"src": "6798:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2536,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2537,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:12"
													},
													{
														"expression": {
															"id": 2546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2540,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7031:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2545,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2541,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2544,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2542,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7046:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2543,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7060:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2547,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:12"
													},
													{
														"expression": {
															"id": 2554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2548,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7100:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2553,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2552,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2550,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7115:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2551,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7129:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2555,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:12"
													},
													{
														"expression": {
															"id": 2562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2556,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7170:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2557,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2558,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7185:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2559,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7199:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2563,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:12"
													},
													{
														"expression": {
															"id": 2570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2564,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7240:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2569,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2565,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2568,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2566,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7255:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2567,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7269:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2571,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:12"
													},
													{
														"expression": {
															"id": 2578,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2572,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7310:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2577,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2573,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2574,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7325:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2575,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7339:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2579,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:12"
													},
													{
														"expression": {
															"id": 2586,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2580,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2532,
																"src": "7381:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2585,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2584,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2582,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2479,
																		"src": "7396:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2583,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2532,
																		"src": "7410:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2587,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:12"
													},
													{
														"expression": {
															"id": 2592,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2588,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2482,
																"src": "7851:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2589,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2485,
																	"src": "7860:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2590,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2532,
																	"src": "7868:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2593,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:12"
													},
													{
														"expression": {
															"id": 2594,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2482,
															"src": "7896:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2483,
														"id": 2595,
														"nodeType": "Return",
														"src": "7889:13:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2473,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:12",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2598,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2475,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2598,
												"src": "3819:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2477,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2598,
												"src": "3830:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2479,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 2598,
												"src": "3841:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:12"
									},
									"returnParameters": {
										"id": 2483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2482,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 2598,
												"src": "3885:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:12"
									},
									"scope": 3264,
									"src": "3803:4116:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2640,
										"nodeType": "Block",
										"src": "8161:192:12",
										"statements": [
											{
												"assignments": [
													2614
												],
												"declarations": [
													{
														"constant": false,
														"id": 2614,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2640,
														"src": "8171:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2613,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2620,
												"initialValue": {
													"arguments": [
														{
															"id": 2616,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2601,
															"src": "8195:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2617,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2603,
															"src": "8198:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2618,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2605,
															"src": "8201:11:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2615,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2598,
															2641
														],
														"referencedDeclaration": 2598,
														"src": "8188:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2622,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2608,
																"src": "8244:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2221",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2221",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2621,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3263,
															"src": "8227:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2221_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2623,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2630,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2625,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2601,
																	"src": "8264:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2626,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2603,
																	"src": "8267:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2627,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2605,
																	"src": "8270:11:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2624,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2629,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2637,
												"nodeType": "IfStatement",
												"src": "8223:101:12",
												"trueBody": {
													"id": 2636,
													"nodeType": "Block",
													"src": "8288:36:12",
													"statements": [
														{
															"expression": {
																"id": 2634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2632,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2614,
																	"src": "8302:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2633,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2635,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:12"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2638,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2614,
													"src": "8340:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2612,
												"id": 2639,
												"nodeType": "Return",
												"src": "8333:13:12"
											}
										]
									},
									"documentation": {
										"id": 2599,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:12",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2641,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2601,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "8067:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2600,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2603,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "8078:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2602,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2605,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "8089:19:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2608,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "8110:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2607,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2606,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "8110:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "8110:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:12"
									},
									"returnParameters": {
										"id": 2612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2641,
												"src": "8152:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:12"
									},
									"scope": 3264,
									"src": "8051:302:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2752,
										"nodeType": "Block",
										"src": "8644:1585:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2651,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2649,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2644,
														"src": "8658:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2650,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2655,
												"nodeType": "IfStatement",
												"src": "8654:45:12",
												"trueBody": {
													"id": 2654,
													"nodeType": "Block",
													"src": "8666:33:12",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2652,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2648,
															"id": 2653,
															"nodeType": "Return",
															"src": "8680:8:12"
														}
													]
												}
											},
											{
												"assignments": [
													2657
												],
												"declarations": [
													{
														"constant": false,
														"id": 2657,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2752,
														"src": "9378:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2656,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2666,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2658,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2663,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2660,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2644,
																			"src": "9406:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2659,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2920,
																			2955
																		],
																		"referencedDeclaration": 2920,
																		"src": "9401:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2661,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2662,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2664,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:12"
											},
											{
												"id": 2751,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:12",
												"statements": [
													{
														"expression": {
															"id": 2676,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2667,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "9839:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2675,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2672,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2668,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "9849:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2671,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2669,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "9858:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2670,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "9862:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2673,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2674,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2677,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:12"
													},
													{
														"expression": {
															"id": 2687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2678,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "9888:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2686,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2683,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2679,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "9898:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2682,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2680,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "9907:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2681,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "9911:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2684,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2688,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:12"
													},
													{
														"expression": {
															"id": 2698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2689,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "9937:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2697,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2694,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2690,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "9947:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2693,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2691,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "9956:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2692,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "9960:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2695,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2696,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2699,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:12"
													},
													{
														"expression": {
															"id": 2709,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2700,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "9986:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2705,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2701,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "9996:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2704,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2702,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "10005:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2703,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "10009:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2706,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2710,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:12"
													},
													{
														"expression": {
															"id": 2720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2711,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "10035:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2719,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2716,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2712,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "10045:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2715,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2713,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "10054:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2714,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "10058:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2717,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2718,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2721,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:12"
													},
													{
														"expression": {
															"id": 2731,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2722,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "10084:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2730,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2723,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "10094:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2724,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "10103:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2725,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "10107:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2728,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2732,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:12"
													},
													{
														"expression": {
															"id": 2742,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2733,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2657,
																"src": "10133:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2741,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2738,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2734,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2657,
																				"src": "10143:6:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2737,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2735,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2644,
																					"src": "10152:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2736,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2657,
																					"src": "10156:6:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2739,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2740,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2743,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:12"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2745,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2657,
																	"src": "10193:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2746,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2644,
																		"src": "10201:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2747,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2657,
																		"src": "10205:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2744,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2415,
																"src": "10189:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2648,
														"id": 2750,
														"nodeType": "Return",
														"src": "10182:30:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2642,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:12",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2753,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "8601:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:12"
									},
									"returnParameters": {
										"id": 2648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2753,
												"src": "8635:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2646,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:12"
									},
									"scope": 3264,
									"src": "8587:1642:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2787,
										"nodeType": "Block",
										"src": "10405:164:12",
										"statements": [
											{
												"id": 2786,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:12",
												"statements": [
													{
														"assignments": [
															2765
														],
														"declarations": [
															{
																"constant": false,
																"id": 2765,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 2786,
																"src": "10439:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2764,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2769,
														"initialValue": {
															"arguments": [
																{
																	"id": 2767,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2756,
																	"src": "10461:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2766,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2753,
																	2788
																],
																"referencedDeclaration": 2753,
																"src": "10456:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2768,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:12"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2770,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2765,
																"src": "10484:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2779,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2772,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2759,
																						"src": "10511:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2771,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3263,
																					"src": "10494:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2221_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2773,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2778,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2776,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2774,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2765,
																						"src": "10524:6:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2775,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2765,
																						"src": "10533:6:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2777,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2756,
																					"src": "10542:1:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2781,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:12",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2780,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2783,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2763,
														"id": 2785,
														"nodeType": "Return",
														"src": "10477:75:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2754,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:12",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2788,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2760,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2756,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "10343:9:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2759,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "10354:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2758,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2757,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "10354:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "10354:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:12"
									},
									"returnParameters": {
										"id": 2763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2788,
												"src": "10396:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:12"
									},
									"scope": 3264,
									"src": "10329:240:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2919,
										"nodeType": "Block",
										"src": "10760:922:12",
										"statements": [
											{
												"assignments": [
													2797
												],
												"declarations": [
													{
														"constant": false,
														"id": 2797,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 2919,
														"src": "10770:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2796,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2799,
												"initialValue": {
													"hexValue": "30",
													"id": 2798,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:12"
											},
											{
												"id": 2916,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2802,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2800,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "10826:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2803,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2814,
														"nodeType": "IfStatement",
														"src": "10822:99:12",
														"trueBody": {
															"id": 2813,
															"nodeType": "Block",
															"src": "10844:77:12",
															"statements": [
																{
																	"expression": {
																		"id": 2807,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2805,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "10862:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2808,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:12"
																},
																{
																	"expression": {
																		"id": 2811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2809,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "10893:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2810,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2812,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2819,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2817,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2815,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "10938:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2818,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2829,
														"nodeType": "IfStatement",
														"src": "10934:96:12",
														"trueBody": {
															"id": 2828,
															"nodeType": "Block",
															"src": "10955:75:12",
															"statements": [
																{
																	"expression": {
																		"id": 2822,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2820,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "10973:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2821,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2823,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:12"
																},
																{
																	"expression": {
																		"id": 2826,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2824,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11003:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2825,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2827,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2834,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2830,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11047:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2833,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2844,
														"nodeType": "IfStatement",
														"src": "11043:96:12",
														"trueBody": {
															"id": 2843,
															"nodeType": "Block",
															"src": "11064:75:12",
															"statements": [
																{
																	"expression": {
																		"id": 2837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2835,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "11082:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2836,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2838,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:12"
																},
																{
																	"expression": {
																		"id": 2841,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2839,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11112:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2840,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2842,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2849,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2847,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2845,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11156:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2846,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2848,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2859,
														"nodeType": "IfStatement",
														"src": "11152:96:12",
														"trueBody": {
															"id": 2858,
															"nodeType": "Block",
															"src": "11173:75:12",
															"statements": [
																{
																	"expression": {
																		"id": 2852,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2850,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "11191:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2851,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2853,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:12"
																},
																{
																	"expression": {
																		"id": 2856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2854,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11221:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2855,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2857,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2864,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2862,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2860,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11265:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2863,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2874,
														"nodeType": "IfStatement",
														"src": "11261:93:12",
														"trueBody": {
															"id": 2873,
															"nodeType": "Block",
															"src": "11281:73:12",
															"statements": [
																{
																	"expression": {
																		"id": 2867,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2865,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "11299:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2866,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2868,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:12"
																},
																{
																	"expression": {
																		"id": 2871,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2869,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11328:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2870,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2872,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2879,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2877,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2875,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11371:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2876,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2878,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2889,
														"nodeType": "IfStatement",
														"src": "11367:93:12",
														"trueBody": {
															"id": 2888,
															"nodeType": "Block",
															"src": "11387:73:12",
															"statements": [
																{
																	"expression": {
																		"id": 2882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2880,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "11405:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2881,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2883,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:12"
																},
																{
																	"expression": {
																		"id": 2886,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2884,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11434:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2885,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2887,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2892,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2890,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11477:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2891,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2893,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2904,
														"nodeType": "IfStatement",
														"src": "11473:93:12",
														"trueBody": {
															"id": 2903,
															"nodeType": "Block",
															"src": "11493:73:12",
															"statements": [
																{
																	"expression": {
																		"id": 2897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2895,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2791,
																			"src": "11511:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2898,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:12"
																},
																{
																	"expression": {
																		"id": 2901,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2899,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11540:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2900,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2902,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2909,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2905,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2791,
																	"src": "11583:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2908,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2915,
														"nodeType": "IfStatement",
														"src": "11579:64:12",
														"trueBody": {
															"id": 2914,
															"nodeType": "Block",
															"src": "11599:44:12",
															"statements": [
																{
																	"expression": {
																		"id": 2912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2910,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2797,
																			"src": "11617:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2911,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2913,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:12"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2917,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2797,
													"src": "11669:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2795,
												"id": 2918,
												"nodeType": "Return",
												"src": "11662:13:12"
											}
										]
									},
									"documentation": {
										"id": 2789,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:12",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2920,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2920,
												"src": "10713:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2790,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:12"
									},
									"returnParameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2920,
												"src": "10751:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:12"
									},
									"scope": 3264,
									"src": "10699:983:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2954,
										"nodeType": "Block",
										"src": "11915:168:12",
										"statements": [
											{
												"id": 2953,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:12",
												"statements": [
													{
														"assignments": [
															2932
														],
														"declarations": [
															{
																"constant": false,
																"id": 2932,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 2953,
																"src": "11949:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2931,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2936,
														"initialValue": {
															"arguments": [
																{
																	"id": 2934,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2923,
																	"src": "11971:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2933,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2920,
																	2955
																],
																"referencedDeclaration": 2920,
																"src": "11966:4:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:12"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2951,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2937,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2932,
																"src": "11998:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2946,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2939,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2926,
																						"src": "12025:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2938,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3263,
																					"src": "12008:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2221_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2940,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2945,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2943,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2941,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2942,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2932,
																						"src": "12043:6:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2944,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2923,
																					"src": "12052:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2948,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:12",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2950,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2930,
														"id": 2952,
														"nodeType": "Return",
														"src": "11991:75:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2921,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:12",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2955,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2923,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "11849:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2926,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "11864:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2925,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2924,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "11864:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "11864:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:12"
									},
									"returnParameters": {
										"id": 2930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2929,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2955,
												"src": "11906:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2928,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:12"
									},
									"scope": 3264,
									"src": "11835:248:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3083,
										"nodeType": "Block",
										"src": "12276:854:12",
										"statements": [
											{
												"assignments": [
													2964
												],
												"declarations": [
													{
														"constant": false,
														"id": 2964,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 3083,
														"src": "12286:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2963,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2966,
												"initialValue": {
													"hexValue": "30",
													"id": 2965,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:12"
											},
											{
												"id": 3080,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2967,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12342:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2970,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2983,
														"nodeType": "IfStatement",
														"src": "12338:103:12",
														"trueBody": {
															"id": 2982,
															"nodeType": "Block",
															"src": "12361:80:12",
															"statements": [
																{
																	"expression": {
																		"id": 2976,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2972,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12379:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2975,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2973,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2974,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2977,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:12"
																},
																{
																	"expression": {
																		"id": 2980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2978,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12414:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2979,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2981,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2984,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12458:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2987,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3000,
														"nodeType": "IfStatement",
														"src": "12454:103:12",
														"trueBody": {
															"id": 2999,
															"nodeType": "Block",
															"src": "12477:80:12",
															"statements": [
																{
																	"expression": {
																		"id": 2993,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2989,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12495:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2992,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2990,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2991,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2994,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:12"
																},
																{
																	"expression": {
																		"id": 2997,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2995,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12530:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2996,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2998,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3001,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12574:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3004,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3003,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3017,
														"nodeType": "IfStatement",
														"src": "12570:103:12",
														"trueBody": {
															"id": 3016,
															"nodeType": "Block",
															"src": "12593:80:12",
															"statements": [
																{
																	"expression": {
																		"id": 3010,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3006,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12611:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3009,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3007,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3008,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3011,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:12"
																},
																{
																	"expression": {
																		"id": 3014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3012,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12646:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3013,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3015,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3022,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3018,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12690:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3021,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3019,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3020,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3034,
														"nodeType": "IfStatement",
														"src": "12686:100:12",
														"trueBody": {
															"id": 3033,
															"nodeType": "Block",
															"src": "12708:78:12",
															"statements": [
																{
																	"expression": {
																		"id": 3027,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3023,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12726:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3026,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3024,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3025,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3028,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:12"
																},
																{
																	"expression": {
																		"id": 3031,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3029,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12760:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3030,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3032,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3035,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12803:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3038,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3051,
														"nodeType": "IfStatement",
														"src": "12799:100:12",
														"trueBody": {
															"id": 3050,
															"nodeType": "Block",
															"src": "12821:78:12",
															"statements": [
																{
																	"expression": {
																		"id": 3044,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3040,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12839:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3041,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3042,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3045,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:12"
																},
																{
																	"expression": {
																		"id": 3048,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3046,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12873:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3047,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3049,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3052,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "12916:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3055,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3054,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3068,
														"nodeType": "IfStatement",
														"src": "12912:100:12",
														"trueBody": {
															"id": 3067,
															"nodeType": "Block",
															"src": "12934:78:12",
															"statements": [
																{
																	"expression": {
																		"id": 3061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3057,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2958,
																			"src": "12952:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3058,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3059,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3062,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:12"
																},
																{
																	"expression": {
																		"id": 3065,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3063,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "12986:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3064,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3066,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3073,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3069,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2958,
																"src": "13029:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3072,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3070,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3071,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3079,
														"nodeType": "IfStatement",
														"src": "13025:66:12",
														"trueBody": {
															"id": 3078,
															"nodeType": "Block",
															"src": "13047:44:12",
															"statements": [
																{
																	"expression": {
																		"id": 3076,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3074,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2964,
																			"src": "13065:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3075,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3077,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:12"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3081,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2964,
													"src": "13117:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2962,
												"id": 3082,
												"nodeType": "Return",
												"src": "13110:13:12"
											}
										]
									},
									"documentation": {
										"id": 2956,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:12",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2958,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3084,
												"src": "12229:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:12"
									},
									"returnParameters": {
										"id": 2962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2961,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3084,
												"src": "12267:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2960,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:12"
									},
									"scope": 3264,
									"src": "12214:916:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3118,
										"nodeType": "Block",
										"src": "13365:170:12",
										"statements": [
											{
												"id": 3117,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:12",
												"statements": [
													{
														"assignments": [
															3096
														],
														"declarations": [
															{
																"constant": false,
																"id": 3096,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 3117,
																"src": "13399:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3095,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3100,
														"initialValue": {
															"arguments": [
																{
																	"id": 3098,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3087,
																	"src": "13422:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3097,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3084,
																	3119
																],
																"referencedDeclaration": 3084,
																"src": "13416:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:12"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3101,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3096,
																"src": "13449:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3110,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3103,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3090,
																						"src": "13476:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3102,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3263,
																					"src": "13459:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2221_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3104,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3109,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3107,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3105,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3106,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3096,
																						"src": "13495:6:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3108,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3087,
																					"src": "13504:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3112,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3113,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:12",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3111,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3114,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3094,
														"id": 3116,
														"nodeType": "Return",
														"src": "13442:76:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3085,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:12",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3091,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3087,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3119,
												"src": "13299:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3090,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3119,
												"src": "13314:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3089,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3088,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "13314:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "13314:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:12"
									},
									"returnParameters": {
										"id": 3094,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3093,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3119,
												"src": "13356:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3092,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:12"
									},
									"scope": 3264,
									"src": "13284:251:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3205,
										"nodeType": "Block",
										"src": "13855:600:12",
										"statements": [
											{
												"assignments": [
													3128
												],
												"declarations": [
													{
														"constant": false,
														"id": 3128,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 3205,
														"src": "13865:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3127,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3130,
												"initialValue": {
													"hexValue": "30",
													"id": 3129,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:12"
											},
											{
												"id": 3202,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:12",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3133,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3131,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3122,
																	"src": "13921:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3145,
														"nodeType": "IfStatement",
														"src": "13917:98:12",
														"trueBody": {
															"id": 3144,
															"nodeType": "Block",
															"src": "13939:76:12",
															"statements": [
																{
																	"expression": {
																		"id": 3138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3136,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3122,
																			"src": "13957:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3139,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:12"
																},
																{
																	"expression": {
																		"id": 3142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3140,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3128,
																			"src": "13988:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3141,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3143,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3148,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3146,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3122,
																	"src": "14032:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3147,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3149,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3160,
														"nodeType": "IfStatement",
														"src": "14028:95:12",
														"trueBody": {
															"id": 3159,
															"nodeType": "Block",
															"src": "14049:74:12",
															"statements": [
																{
																	"expression": {
																		"id": 3153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3151,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3122,
																			"src": "14067:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3152,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3154,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:12"
																},
																{
																	"expression": {
																		"id": 3157,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3155,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3128,
																			"src": "14097:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3156,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3158,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3163,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3161,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3122,
																	"src": "14140:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3164,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3175,
														"nodeType": "IfStatement",
														"src": "14136:95:12",
														"trueBody": {
															"id": 3174,
															"nodeType": "Block",
															"src": "14157:74:12",
															"statements": [
																{
																	"expression": {
																		"id": 3168,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3166,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3122,
																			"src": "14175:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3167,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3169,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:12"
																},
																{
																	"expression": {
																		"id": 3172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3170,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3128,
																			"src": "14205:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3173,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3178,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3176,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3122,
																	"src": "14248:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3179,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3190,
														"nodeType": "IfStatement",
														"src": "14244:95:12",
														"trueBody": {
															"id": 3189,
															"nodeType": "Block",
															"src": "14265:74:12",
															"statements": [
																{
																	"expression": {
																		"id": 3183,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3181,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3122,
																			"src": "14283:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3182,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3184,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:12"
																},
																{
																	"expression": {
																		"id": 3187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3185,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3128,
																			"src": "14313:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3188,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:12"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3195,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3191,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3122,
																	"src": "14356:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3194,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3201,
														"nodeType": "IfStatement",
														"src": "14352:64:12",
														"trueBody": {
															"id": 3200,
															"nodeType": "Block",
															"src": "14372:44:12",
															"statements": [
																{
																	"expression": {
																		"id": 3198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3196,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3128,
																			"src": "14390:6:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3199,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:12"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3203,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3128,
													"src": "14442:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3126,
												"id": 3204,
												"nodeType": "Return",
												"src": "14435:13:12"
											}
										]
									},
									"documentation": {
										"id": 3120,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:12",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3122,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3206,
												"src": "13808:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3121,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:12"
									},
									"returnParameters": {
										"id": 3126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3125,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3206,
												"src": "13846:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3124,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:12"
									},
									"scope": 3264,
									"src": "13792:663:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3243,
										"nodeType": "Block",
										"src": "14692:177:12",
										"statements": [
											{
												"id": 3242,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:12",
												"statements": [
													{
														"assignments": [
															3218
														],
														"declarations": [
															{
																"constant": false,
																"id": 3218,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 3242,
																"src": "14726:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3217,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3222,
														"initialValue": {
															"arguments": [
																{
																	"id": 3220,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3209,
																	"src": "14750:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3219,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3206,
																	3244
																],
																"referencedDeclaration": 3206,
																"src": "14743:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3221,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:12"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3240,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3223,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3218,
																"src": "14777:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3235,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3225,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3212,
																						"src": "14804:8:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2221",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3224,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3263,
																					"src": "14787:16:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2221_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3226,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3234,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3232,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3227,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3230,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3228,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3218,
																									"src": "14823:6:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3229,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3231,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3233,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3209,
																					"src": "14838:5:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3237,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3238,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:12",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3236,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3239,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3216,
														"id": 3241,
														"nodeType": "Return",
														"src": "14770:82:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3207,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:12",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3244,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3209,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3244,
												"src": "14626:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3212,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3244,
												"src": "14641:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3211,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3210,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "14641:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "14641:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:12"
									},
									"returnParameters": {
										"id": 3216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3215,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3244,
												"src": "14683:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:12"
									},
									"scope": 3264,
									"src": "14610:259:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3262,
										"nodeType": "Block",
										"src": "15067:48:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3258,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3255,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3248,
																	"src": "15090:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2221",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2221",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3254,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3253,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3252,
												"id": 3261,
												"nodeType": "Return",
												"src": "15077:31:12"
											}
										]
									},
									"documentation": {
										"id": 3245,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:12",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3263,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3248,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3263,
												"src": "15019:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2221",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3247,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3246,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2221,
														"src": "15019:8:12"
													},
													"referencedDeclaration": 2221,
													"src": "15019:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2221",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:12"
									},
									"returnParameters": {
										"id": 3252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3251,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3263,
												"src": "15061:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3250,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:12"
									},
									"scope": 3264,
									"src": "14993:122:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3265,
							"src": "203:14914:12",
							"usedErrors": [
								2216
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:12"
				},
				"id": 12
			},
			"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3369
						]
					},
					"id": 3370,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3266,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3267,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:13",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3369,
							"linearizedBaseContracts": [
								3369
							],
							"name": "SignedMath",
							"nameLocation": "224:10:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3284,
										"nodeType": "Block",
										"src": "376:37:13",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3279,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3277,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3270,
															"src": "393:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3278,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3272,
															"src": "397:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3281,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3272,
														"src": "405:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:13",
													"trueExpression": {
														"id": 3280,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3270,
														"src": "401:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3276,
												"id": 3283,
												"nodeType": "Return",
												"src": "386:20:13"
											}
										]
									},
									"documentation": {
										"id": 3268,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:13",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3270,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "325:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3269,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3272,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "335:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3271,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:13"
									},
									"returnParameters": {
										"id": 3276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3275,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3285,
												"src": "368:6:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3274,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:13"
									},
									"scope": 3369,
									"src": "312:101:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3302,
										"nodeType": "Block",
										"src": "555:37:13",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3297,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3295,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3288,
															"src": "572:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3296,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3290,
															"src": "576:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3299,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3290,
														"src": "584:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:13",
													"trueExpression": {
														"id": 3298,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3288,
														"src": "580:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3294,
												"id": 3301,
												"nodeType": "Return",
												"src": "565:20:13"
											}
										]
									},
									"documentation": {
										"id": 3286,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:13",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3303,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3288,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3303,
												"src": "504:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3287,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3290,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3303,
												"src": "514:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3289,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:13"
									},
									"returnParameters": {
										"id": 3294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3303,
												"src": "547:6:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3292,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:13"
									},
									"scope": 3369,
									"src": "491:101:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3346,
										"nodeType": "Block",
										"src": "797:162:13",
										"statements": [
											{
												"assignments": [
													3314
												],
												"declarations": [
													{
														"constant": false,
														"id": 3314,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:13",
														"nodeType": "VariableDeclaration",
														"scope": 3346,
														"src": "859:8:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3313,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3327,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3317,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3315,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3306,
																	"src": "871:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3316,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3308,
																	"src": "875:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3318,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3324,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3321,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3319,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3306,
																				"src": "882:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3320,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3308,
																				"src": "886:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3322,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3323,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3325,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:13"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3328,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3314,
														"src": "911:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3342,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3336,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3333,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3314,
																						"src": "931:1:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3332,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3331,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:13",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3334,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3335,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3329,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3340,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3338,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3306,
																				"src": "945:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3339,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3308,
																				"src": "949:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3341,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3343,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:13",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3312,
												"id": 3345,
												"nodeType": "Return",
												"src": "904:48:13"
											}
										]
									},
									"documentation": {
										"id": 3304,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:13",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3347,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3306,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3347,
												"src": "746:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3305,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3308,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3347,
												"src": "756:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3307,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:13"
									},
									"returnParameters": {
										"id": 3312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3347,
												"src": "789:6:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3310,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:13"
									},
									"scope": 3369,
									"src": "729:230:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3367,
										"nodeType": "Block",
										"src": "1103:158:13",
										"statements": [
											{
												"id": 3366,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:13",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3357,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3350,
																			"src": "1228:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:13",
																		"subExpression": {
																			"id": 3361,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3350,
																			"src": "1242:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:13",
																	"trueExpression": {
																		"id": 3360,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3350,
																		"src": "1237:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3356,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3355,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 3364,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3354,
														"id": 3365,
														"nodeType": "Return",
														"src": "1213:31:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3348,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:13",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3350,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 3368,
												"src": "1061:8:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3349,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:13"
									},
									"returnParameters": {
										"id": 3354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3353,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3368,
												"src": "1094:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:13"
									},
									"scope": 3369,
									"src": "1048:213:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3370,
							"src": "216:1047:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:13"
				},
				"id": 13
			},
			"src/Dummy.sol": {
				"ast": {
					"absolutePath": "src/Dummy.sol",
					"exportedSymbols": {
						"Address": [
							889
						],
						"Context": [
							911
						],
						"Dummy": [
							3399
						],
						"ECDSA": [
							1909
						],
						"EIP712": [
							2136
						],
						"ERC2771Context": [
							129
						],
						"ERC2771Forwarder": [
							636
						],
						"Nonces": [
							979
						]
					},
					"id": 3400,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
							"file": "../lib/openzeppelin-contracts/contracts/metatx/ERC2771Forwarder.sol",
							"id": 3371,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3400,
							"sourceUnit": 637,
							"src": "0:77:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
							"file": "../lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol",
							"id": 3372,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3400,
							"sourceUnit": 130,
							"src": "79:75:14",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3373,
										"name": "ERC2771Context",
										"nameLocations": [
											"176:14:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 129,
										"src": "176:14:14"
									},
									"id": 3374,
									"nodeType": "InheritanceSpecifier",
									"src": "176:14:14"
								},
								{
									"baseName": {
										"id": 3375,
										"name": "ERC2771Forwarder",
										"nameLocations": [
											"192:16:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 636,
										"src": "192:16:14"
									},
									"id": 3376,
									"nodeType": "InheritanceSpecifier",
									"src": "192:16:14"
								}
							],
							"canonicalName": "Dummy",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3399,
							"linearizedBaseContracts": [
								3399,
								636,
								979,
								2136,
								24,
								129,
								911
							],
							"name": "Dummy",
							"nameLocation": "167:5:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3378,
									"mutability": "mutable",
									"name": "number",
									"nameLocation": "223:6:14",
									"nodeType": "VariableDeclaration",
									"scope": 3399,
									"src": "218:11:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 3377,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "218:4:14",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3387,
										"nodeType": "Block",
										"src": "339:8:14",
										"statements": []
									},
									"id": 3388,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "466163746f7279",
													"id": 3381,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "269:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_992f90ffb92c5ad86f1df6829115f18aaea41d6094dadc8955c35086081a7bb9",
														"typeString": "literal_string \"Factory\""
													},
													"value": "Factory"
												}
											],
											"id": 3382,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3380,
												"name": "ERC2771Forwarder",
												"nameLocations": [
													"252:16:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 636,
												"src": "252:16:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "252:27:14"
										},
										{
											"arguments": [
												{
													"hexValue": "307841623834383346363464394336643145634639623834394165363737644433333135383335636232",
													"id": 3384,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "295:42:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"value": "0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2"
												}
											],
											"id": 3385,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3383,
												"name": "ERC2771Context",
												"nameLocations": [
													"280:14:14"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 129,
												"src": "280:14:14"
											},
											"nodeType": "ModifierInvocation",
											"src": "280:58:14"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "249:2:14"
									},
									"returnParameters": {
										"id": 3386,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "339:0:14"
									},
									"scope": 3399,
									"src": "238:109:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3397,
										"nodeType": "Block",
										"src": "401:35:14",
										"statements": [
											{
												"expression": {
													"id": 3395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3393,
														"name": "number",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3378,
														"src": "412:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3394,
														"name": "_number",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3390,
														"src": "421:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "412:16:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 3396,
												"nodeType": "ExpressionStatement",
												"src": "412:16:14"
											}
										]
									},
									"functionSelector": "3fb5c1cb",
									"id": 3398,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setNumber",
									"nameLocation": "368:9:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3390,
												"mutability": "mutable",
												"name": "_number",
												"nameLocation": "383:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 3398,
												"src": "378:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3389,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "378:4:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "377:14:14"
									},
									"returnParameters": {
										"id": 3392,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "401:0:14"
									},
									"scope": 3399,
									"src": "359:77:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3400,
							"src": "158:281:14",
							"usedErrors": [
								185,
								192,
								197,
								204,
								644,
								652,
								921,
								993,
								995
							],
							"usedEvents": [
								4,
								178
							]
						}
					],
					"src": "0:439:14"
				},
				"id": 14
			}
		}
	}
}