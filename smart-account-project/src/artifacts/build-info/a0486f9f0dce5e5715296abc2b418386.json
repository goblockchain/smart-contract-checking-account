{
	"id": "a0486f9f0dce5e5715296abc2b418386",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.21",
	"solcLongVersion": "0.8.21+commit.d9974bed",
	"input": {
		"language": "Solidity",
		"sources": {
			"src/AllowERC1155.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport {Storage} from \"./Storage.sol\";\nimport {ISmartAccount} from \"./interfaces/ISmartAccount.sol\";\nimport {Errors} from \"./helpers/Errors.sol\";\n\nabstract contract AllowERC1155 is IERC1155Receiver, Storage {\n    /// @notice the function below as is MUST NOT be used in production. This is only a demo for a presentation\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external lock returns (bytes4) {\n        // NOTE: This is not yet safe. A malicious `msg.sender` can call this function with a registered `from` address, etc.\n        // if (_smartAccount[from] == address(0)) revert Errors.NotAUser(from);\n        require(_tokensType[msg.sender] == uint(TokenStandard.isERC1155), \"!3\");\n        revertIfZeroAddress(_smartAccount[from]);\n        if (!_users[from]) revert Errors.InvalidUser(from);\n\n        ISmartAccount(_smartAccount[from]).update(1000);\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155Received(address,address,uint256,uint256,bytes)\"\n                )\n            );\n    }\n\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external lock returns (bytes4) {\n        // NOTE: This is not yet safe. A malicious `msg.sender` can call this function with a registered `from` address, etc.\n        if (_smartAccount[from] == address(0)) revert Errors.InvalidUser(from);\n        ISmartAccount(_smartAccount[from]).update(1000);\n        _tokensType[msg.sender] = uint(TokenStandard.isERC1155);\n        return\n            bytes4(\n                keccak256(\n                    \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"\n                )\n            );\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
			},
			"src/helpers/Errors.sol": {
				"content": "//SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.13;\n\nlibrary Errors {\n    error ForbiddenSender();\n    error InvalidCalldata();\n    error InvalidUser(address user);\n    error ArrayLengthMismatch();\n    error Locked();\n    error Paused();\n    error InvalidToken(address token);\n    error InvalidTokenType(address token);\n    error UnableToMove();\n    error InvalidSmartAccount(address smartAccount);\n    error AmountIsZero();\n    error AddressIsZero();\n    error ReceivedNative();\n}\n"
			},
			"src/interfaces/ISmartAccount.sol": {
				"content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.13;\n\ninterface ISmartAccount {\n    /*╔═════════════════════════════╗\n      ║        VIEW FUNCTIONS       ║\n      ╚═════════════════════════════╝*/\n\n    /// @notice user's name.\n    function name() external view returns (string memory);\n\n    /// @notice checks whether `account` is authorized to modify user's smart account.\n    /// @dev It should always match the current admins in SAFactory. So, avoid passing in constants, but always make a call to IFactory.admins().\n    /// @param account to verify\n    function admin(address account) external view returns (bool);\n\n    /// @notice user's current credit (>0) or debt (<0) at any given time.\n    function credit() external view returns (int);\n\n    /// @notice user's max credit calculated from user's allocation. Consequentially, it is also the maxDebt for a user.\n    function maxCredit() external view returns (uint256);\n\n    /// @notice it increases each time the user `payback()`. It diminishes when user doesn't inccurs debt multiple times. It can be used futurely for giving a usr specific rewards according to his/her score.\n    function score() external view returns (int);\n\n    /// @notice it returns the last timestamp the SA was updated.\n    /// @dev important for accountability to check whether all SAs in factory have all be updated around the same time.\n    // function lastUpdatedTimestamp() external view returns (uint);\n\n    /// @notice gets a token from its address and check whether it's a erc20 (0), erc721(1) or erc1155(2).\n    /// @param _token address of token.\n    function tokenToStandard(address _token) external view returns (uint);\n\n    /// @notice callable by SAFactory. It sets the config options for the Smart Account and registers tokens in tokens addresses.\n    /// @dev since the SA itself will pull the tokens from the user, user's approval of tokens to this contract should be handled inside the allocateWithPermit function.\n    /*\n    function init(\n        uint userId,\n        string calldata user,\n        address[] calldata admins,\n        uint minAllocation,\n        bool acceptsERC20Tokens,\n        address[] calldata sortedPermittedERC20Tokens,\n        bool acceptsERC721Tokens,\n        address[] calldata sortedPermittedERC721Tokens,\n        bool acceptsERC1155Tokens,\n        address[] calldata sortedPermittedERC1155Tokens,\n        uint percentageFromAllocation,\n        address[] calldata paymentTokens\n    ) external returns (bool);\n    */\n\n    /// @notice storage variable that is either true or false. Use default values already registered in this Factory contract for the `create` function. If false, params should be given. If true, params can be of any value and they will be discarded.\n    /// @dev I thought of having all users use the same value, but as it is done in the TradFi industry, users are categorized into certain thresholds - there's the Itau, but there's also the Itau Personalité, for example. So, a customization should be made possible. So, functions sould be also be accessible to be modified by admins in SA.\n    function useDefault() external view returns (bool);\n\n    /*╔═════════════════════════════╗\n      ║      ADMIN FUNCTIONS        ║\n      ╚═════════════════════════════╝*/\n\n    /// @notice used by user to allocate funds and get debts. Make it have a `lock` modifier.\n    // function allocate(uint256 tokenIndex, uint256 amount) external;\n\n    /// @notice it permits a user to give his credits to another user, but the debt will be calculated against this SA, not the SA of the `to`.\n    function allocateDelegate(\n        uint256 tokenIndex,\n        uint256 amount,\n        address to\n    ) external;\n\n    /// Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit. Function uses the safeTransferFrom with permit functionality to pull tokens. This function can only be callable by the company. Why? Because precification needs to bae handled off-chain. If user calls this function directly, he can send any amount of a depretiated token and his credit can be updated, making it so that he'll have paid less than his bills. So, front-end determines precification, and the user can deposit it. Yes, he can deposit at anytime, however, he can't call it directly. To support  payments before the due data, anytime the user allocates, his credit is updated. To support direct payments, make an `if` statement that if it's not the company the `sender`, user will pay in a stablecoin - probably tether which is centralized and seems to maintain price at $1 always. Then do the math to convert to real - check whether there's a REAL-like stable coin on chain - and then do the math to roundup user payment onchain. Check whether the function implementation is protected against the company making the factory a user as well.\n    /// @param tokenIndex token to allocate\n    /// @param amount amount of token to allocate\n    /// @param deadline deadline for token to be allocated.\n    /// @param includesNonce does the token include a nonce (e.g. DAI) Check whether a nonce can be 0 - since it probably can't, use it as a param to identify that there's no nonce.\n    /// @param nonce tx's nonce for token allocation, if any.\n    /// @param v sig param\n    /// @param r sig param\n    /// @param s sig param\n    function allocateWithPermit(\n        uint256 tokenIndex,\n        uint256 amount,\n        uint256 deadline,\n        bool includesNonce, // some tokens, like DAI seem to have a nonce in their permit functions.\n        uint256 nonce,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /// @notice Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit.\n    /// @param tokenIndexes tokens the user want to allocate to receive credit. Must be in inside the permitted tokens addresses chosen by the company.\n    /// @param amounts amounts of each token to be deposited.\n    /// @param deadlines deadlines for the transfers to happen.\n    /// @param includesNonce whether tokens use includes nonces\n    /// @param nonces nonces for tokens. Choose an arbitrary number those who haven't nonces\n    /// @param v sig param\n    /// @param r sig param\n    /// @param s sig param\n    function batchAllocateWithPermit(\n        uint256[] calldata tokenIndexes,\n        uint256[] calldata amounts,\n        uint256[] calldata deadlines,\n        bool[] calldata includesNonce, // some tokens, like DAI seem to have a nonce in their permit functions.\n        uint256[] calldata nonces,\n        uint8[] calldata v,\n        bytes32[] calldata r,\n        bytes32[] calldata s\n    ) external;\n\n    /// @notice only to be called by company's wallets addresses. It's called when company updates the states of the user according to their usage of the credit card off-chain. It can be called in batches to avoid block-max-gas-limit revert error in the chain being used.\n    /// @param amount debt or credit of user in a given time. It is used to update the `credit` mapping.\n    function update(int amount) external returns (int);\n\n    /// @notice used by company to cease a user's participation in the protocol.\n    function cease(uint8 v, bytes32 r, bytes32 s, bytes memory data) external;\n\n    /// @notice pause SA' mains functionalities. Callable only by Factory on deactivate.\n    function pause() external;\n\n    /// @notice unpauses SA's mains functionalities. Callable only by Factory on activate.\n    function unpause() external;\n\n    /// @notice function callable by company to withdraw any tokens directly transferred to this contract by accident or leftovers from solidity's rounding arithmetic. If token to be withdrawn is the zero address, withdraw ether from contract. This function should be able to retrieve any balance from this smart account in case of a smart account upgrade so that funds can be transferred to the new one. Use safeTransfer function from SafeERC20 inside here to handle different tokens.\n    /// @param token token to be withdrawn.\n    /// @param to to whom it should be given to, possibly being the user who sent it by accident.\n    function skim(address token, address to) external returns (bool);\n\n    function setPaymentTokens(\n        address paymentTokens,\n        uint tokenType\n    ) external returns (address[] memory newPaymentTokens);\n\n    function setPermittedERC20Tokens(\n        address tokenAddress\n    ) external returns (address[] memory newPermittedERC20Tokens);\n\n    function setPermittedERC721Tokens(\n        address tokenAddress\n    ) external returns (address[] memory newPermittedERC721Tokens);\n\n    function setPermittedERC1155Tokens(\n        address tokenAddress\n    ) external returns (address[] memory);\n\n    function setPercentageFromAllocation(\n        uint percentageFromAllocation\n    ) external returns (uint newPercentageFromAllocation);\n\n    /// @notice it should be called within the `constructor` function saying wether it's gonna be true or false. Only callable by admins. Make the factory an admin as well.\n    function setUseDefault(bool useDefault) external returns (bool);\n}\n"
			},
			"src/Storage.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n/**\n * @title Storage\n * @author Caio Sá\n * @notice Contract that has all the storage variables used by Factory.\n */\n\nimport \"./Checks.sol\";\n\ncontract Storage is Checks {\n    uint internal unlocked = 1;\n\n    modifier lock() {\n        if (unlocked != 1) revert Errors.Locked();\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    /*╔═════════════════════════════╗\n      ║       STORAGE VARIABLES     ║\n      ╚═════════════════════════════╝*/\n\n    ///@dev finds if some address is an admin.\n    mapping(address => bool) internal _admins;\n\n    ///@dev finds if some address is an user.\n    mapping(address => bool) internal _users;\n\n    ///@dev finds if smart account address from an user.\n    mapping(address => address) internal _smartAccount;\n\n    /*╔═════════════════════════════╗\n      ║--------TOKENS TYPES---------║\n      ║        IsNothing: 0         ║\n      ║        ERC20: 1             ║\n      ║        ERC721: 2            ║\n      ║        ERC1155: 3           ║\n      ╚═════════════════════════════╝*/\n    ///@dev maps a token address to a tokenStandard.\n    mapping(address => uint) internal _tokensType;\n\n    ///@dev shows whether an erc20 address is allowed as allocation.\n    mapping(address => bool) internal _tokensERC20ToAllocate;\n\n    ///@dev shows whether an erc721 address is allowed as allocation.\n    mapping(address => bool) internal _tokensERC721ToAllocate;\n\n    ///@dev shows whether an erc1155 address is allowed as allocation.\n    mapping(address => bool) internal _tokensERC1155ToAllocate;\n\n    ///@dev maps ERC20 token to percentage from allocation that will be transformed into credit.\n    mapping(address => uint) internal _cutForERC20;\n\n    ///@dev maps ERC721 token to percentage from allocation that will be transformed into credit.\n    mapping(address => uint) internal _cutForERC721;\n\n    ///@dev maps ERC1155 token to percentage from allocation that will be transformed into credit.\n    mapping(address => uint) internal _cutForERC1155;\n\n    /// @dev min amount for certain token.\n    mapping(address => uint) internal _minAllocationForERC20Token;\n\n    /// @dev min amount for certain token.\n    mapping(address => uint) internal _minAllocationForERC721Token;\n\n    /// @dev min amount for certain token.\n    mapping(address => uint) internal _minAllocationForERC1155Token;\n\n    /// @dev enum to store token types.\n    enum TokenStandard {\n        isNothing, // 0\n        isERC20, // 1\n        isERC721, // 2\n        isERC1155 // 3\n    }\n\n    /*╔═════════════════════════════╗\n      ║   ACCESS CONTROL FUNCTIONS  ║\n      ╚═════════════════════════════╝*/\n\n    function _isAdmin(address _sender) internal {\n        if (!_admins[_sender]) revert Errors.ForbiddenSender();\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			},
			"src/Checks.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\n/*╔═════════════════════════════╗\n      ║        CHECK FUNCTIONS      ║\n      ╚═════════════════════════════╝*/\n\nimport {Errors} from \"./helpers/Errors.sol\";\n\ncontract Checks {\n    function ifZeroRevert(uint amount) internal pure {\n        if (amount == 0) revert Errors.AmountIsZero();\n    }\n\n    function revertIfZeroAddress(address token) internal pure {\n        if (token == address(0)) revert Errors.AddressIsZero();\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
				"IERC1155Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "ids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "values",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC1155BatchReceived",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC1155Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.",
						"kind": "dev",
						"methods": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
								"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
								"params": {
									"data": "Additional data with no specified format",
									"from": "The address which previously owned the token",
									"ids": "An array containing ids of each token being transferred (order and length must match values array)",
									"operator": "The address which initiated the batch transfer (i.e. msg.sender)",
									"values": "An array containing amounts of each token being transferred (order and length must match ids array)"
								},
								"returns": {
									"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
								}
							},
							"onERC1155Received(address,address,uint256,uint256,bytes)": {
								"details": "Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61, or its own function selector).",
								"params": {
									"data": "Additional data with no specified format",
									"from": "The address which previously owned the token",
									"id": "The ID of the token being transferred",
									"operator": "The address which initiated the transfer (i.e. msg.sender)",
									"value": "The amount of tokens being transferred"
								},
								"returns": {
									"_0": "`bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
								}
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
							"onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface that must be implemented by smart contracts in order to receive ERC-1155 token transfers.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":\"IERC1155Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25addbda49a578b3318130585601344c5149a5549d749adf88e9685349a46b23\",\"dweb:/ipfs/Qme2DuD8gpsve1ZvaSMQpBwMdpU7yAtekDwr7gUp8dX4zX\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/AllowERC1155.sol": {
				"AllowERC1155": {
					"abi": [
						{
							"inputs": [],
							"name": "AddressIsZero",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "InvalidUser",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Locked",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256[]",
									"name": "ids",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "values",
									"type": "uint256[]"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC1155BatchReceived",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC1155Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
								"details": "Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81, or its own function selector).",
								"params": {
									"data": "Additional data with no specified format",
									"from": "The address which previously owned the token",
									"ids": "An array containing ids of each token being transferred (order and length must match values array)",
									"operator": "The address which initiated the batch transfer (i.e. msg.sender)",
									"values": "An array containing amounts of each token being transferred (order and length must match ids array)"
								},
								"returns": {
									"_0": "`bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
								}
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
							"onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InvalidUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81, or its own function selector).\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match ids array)\"},\"returns\":{\"_0\":\"`bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"the function below as is MUST NOT be used in production. This is only a demo for a presentation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/AllowERC1155.sol\":\"AllowERC1155\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25addbda49a578b3318130585601344c5149a5549d749adf88e9685349a46b23\",\"dweb:/ipfs/Qme2DuD8gpsve1ZvaSMQpBwMdpU7yAtekDwr7gUp8dX4zX\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"src/AllowERC1155.sol\":{\"keccak256\":\"0xc286a7b1fdeac1ce7a480cb15b0d190ce051673580a4294ced2666be679fccd7\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://b747f1f29a9533313f998c8ea2e22c51e1688a71ef464a0dd02f3d4f6fd5cd38\",\"dweb:/ipfs/QmQnCyiP4mUSEyRXCntkBbxPoaL7dxPXsjZS69ftyxMpqh\"]},\"src/Checks.sol\":{\"keccak256\":\"0x65bb11df807f778a05ee9a01879398a0a2da23362eee5ce3d0c947b01ff5ec36\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd3be5a9816e7b19abaf6ef20f37db12e28d77c1459154283e5a0ccefc13cfa1\",\"dweb:/ipfs/QmbY2XqUv6KouJB5YzWR9ssCG2GT5FfoME8EEFnpXtyKGF\"]},\"src/Storage.sol\":{\"keccak256\":\"0x5216fa06b063b3d9e25221f3487971275a3d25dbe007b06178d794cb7ab1cd20\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d382416dc25ce28f47967ae4608a6a0976dcd412f88a857cd42b634afa4c766a\",\"dweb:/ipfs/QmbdpWxbEopmwvSpMCkxPhLpjTw38GR1LFPWniEkF3HjUz\"]},\"src/helpers/Errors.sol\":{\"keccak256\":\"0xfc012755a7b7cde80f3a3c21ef2e5e44e2973bb10564577571eb838cbd3b42f1\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d2eae5414a969480b18b68abae81c1f08bb658f608f40ae3f0f6d3b1e7f1310e\",\"dweb:/ipfs/QmQMYi7XDnosRQFV91CcFkqxmmnuxAGmLv15A2JCGbEnuF\"]},\"src/interfaces/ISmartAccount.sol\":{\"keccak256\":\"0x86e9e36816cdb15703225659f57f3f38b9ae090b23c78b0a3d63ffcf4df7afb3\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://4abe7ec943bb1a00356078892e3ffdcace4c4992d8e33b6fab0cb533e69eeb94\",\"dweb:/ipfs/QmewdeMb2B9Aq9Sj7ihEa71NbZN3a9ndP9DGAYFuKNKek4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 259,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "unlocked",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 285,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_admins",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 290,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_users",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 295,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_smartAccount",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_address)"
							},
							{
								"astId": 300,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_tokensType",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 305,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_tokensERC20ToAllocate",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 310,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_tokensERC721ToAllocate",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 315,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_tokensERC1155ToAllocate",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 320,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_cutForERC20",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 325,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_cutForERC721",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 330,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_cutForERC1155",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 335,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_minAllocationForERC20Token",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 340,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_minAllocationForERC721Token",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 345,
								"contract": "src/AllowERC1155.sol:AllowERC1155",
								"label": "_minAllocationForERC1155Token",
								"offset": 0,
								"slot": "13",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_address)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"onERC1155Received(address,address,uint256,uint256,bytes)": {
								"notice": "the function below as is MUST NOT be used in production. This is only a demo for a presentation"
							}
						},
						"version": 1
					}
				}
			},
			"src/Checks.sol": {
				"Checks": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Checks.sol\":352:622  contract Checks {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/Checks.sol\":352:622  contract Checks {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209d29adde87140a8696f647463e3fd34d32843f696aaf1e248bc9f0ad299ec03364736f6c63430008150033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea26469706673582212209d29adde87140a8696f647463e3fd34d32843f696aaf1e248bc9f0ad299ec03364736f6c63430008150033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x29 0xAD 0xDE DUP8 EQ EXP DUP7 SWAP7 0xF6 SELFBALANCE CHAINID RETURNDATACOPY EXTCODEHASH 0xD3 0x4D ORIGIN DUP5 EXTCODEHASH PUSH10 0x6AAF1E248BC9F0AD299E 0xC0 CALLER PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
							"sourceMap": "352:270:3:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea26469706673582212209d29adde87140a8696f647463e3fd34d32843f696aaf1e248bc9f0ad299ec03364736f6c63430008150033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP14 0x29 0xAD 0xDE DUP8 EQ EXP DUP7 SWAP7 0xF6 SELFBALANCE CHAINID RETURNDATACOPY EXTCODEHASH 0xD3 0x4D ORIGIN DUP5 EXTCODEHASH PUSH10 0x6AAF1E248BC9F0AD299E 0xC0 CALLER PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ",
							"sourceMap": "352:270:3:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							},
							"internal": {
								"ifZeroRevert(uint256)": "infinite",
								"revertIfZeroAddress(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 352,
									"end": 622,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 352,
									"end": 622,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209d29adde87140a8696f647463e3fd34d32843f696aaf1e248bc9f0ad299ec03364736f6c63430008150033",
									".code": [
										{
											"begin": 352,
											"end": 622,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 352,
											"end": 622,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 352,
											"end": 622,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 352,
											"end": 622,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 352,
											"end": 622,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 352,
											"end": 622,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/AllowERC1155.sol",
								"src/Checks.sol",
								"src/Storage.sol",
								"src/helpers/Errors.sol",
								"src/interfaces/ISmartAccount.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Checks.sol\":\"Checks\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Checks.sol\":{\"keccak256\":\"0x65bb11df807f778a05ee9a01879398a0a2da23362eee5ce3d0c947b01ff5ec36\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd3be5a9816e7b19abaf6ef20f37db12e28d77c1459154283e5a0ccefc13cfa1\",\"dweb:/ipfs/QmbY2XqUv6KouJB5YzWR9ssCG2GT5FfoME8EEFnpXtyKGF\"]},\"src/helpers/Errors.sol\":{\"keccak256\":\"0xfc012755a7b7cde80f3a3c21ef2e5e44e2973bb10564577571eb838cbd3b42f1\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d2eae5414a969480b18b68abae81c1f08bb658f608f40ae3f0f6d3b1e7f1310e\",\"dweb:/ipfs/QmQMYi7XDnosRQFV91CcFkqxmmnuxAGmLv15A2JCGbEnuF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/Storage.sol": {
				"Storage": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_admins": {
								"details": "finds if some address is an admin."
							},
							"_cutForERC1155": {
								"details": "maps ERC1155 token to percentage from allocation that will be transformed into credit."
							},
							"_cutForERC20": {
								"details": "maps ERC20 token to percentage from allocation that will be transformed into credit."
							},
							"_cutForERC721": {
								"details": "maps ERC721 token to percentage from allocation that will be transformed into credit."
							},
							"_minAllocationForERC1155Token": {
								"details": "min amount for certain token."
							},
							"_minAllocationForERC20Token": {
								"details": "min amount for certain token."
							},
							"_minAllocationForERC721Token": {
								"details": "min amount for certain token."
							},
							"_smartAccount": {
								"details": "finds if smart account address from an user."
							},
							"_tokensERC1155ToAllocate": {
								"details": "shows whether an erc1155 address is allowed as allocation."
							},
							"_tokensERC20ToAllocate": {
								"details": "shows whether an erc20 address is allowed as allocation."
							},
							"_tokensERC721ToAllocate": {
								"details": "shows whether an erc721 address is allowed as allocation."
							},
							"_tokensType": {
								"details": "maps a token address to a tokenStandard."
							},
							"_users": {
								"details": "finds if some address is an user."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/Storage.sol\":208:3193  contract Storage is Checks {... */\n  mstore(0x40, 0x80)\n    /* \"src/Storage.sol\":266:267  1 */\n  0x01\n    /* \"src/Storage.sol\":241:267  uint internal unlocked = 1 */\n  0x00\n  sstore\n    /* \"src/Storage.sol\":208:3193  contract Storage is Checks {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/Storage.sol\":208:3193  contract Storage is Checks {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e1f8f8b56731c6c961cc646b86b6568f15aec6f83dd492e36eef984c329e9e3564736f6c63430008150033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405260015f553480156012575f80fd5b50603e80601e5f395ff3fe60806040525f80fdfea2646970667358221220e1f8f8b56731c6c961cc646b86b6568f15aec6f83dd492e36eef984c329e9e3564736f6c63430008150033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x1 PUSH0 SSTORE CALLVALUE DUP1 ISZERO PUSH1 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1E PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xF8 0xF8 0xB5 PUSH8 0x31C6C961CC646B86 0xB6 JUMP DUP16 ISZERO 0xAE 0xC6 0xF8 RETURNDATASIZE 0xD4 SWAP3 0xE3 PUSH15 0xEF984C329E9E3564736F6C63430008 ISZERO STOP CALLER ",
							"sourceMap": "208:2985:4:-:0;;;266:1;241:26;;208:2985;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea2646970667358221220e1f8f8b56731c6c961cc646b86b6568f15aec6f83dd492e36eef984c329e9e3564736f6c63430008150033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE1 0xF8 0xF8 0xB5 PUSH8 0x31C6C961CC646B86 0xB6 JUMP DUP16 ISZERO 0xAE 0xC6 0xF8 RETURNDATASIZE 0xD4 SWAP3 0xE3 PUSH15 0xEF984C329E9E3564736F6C63430008 ISZERO STOP CALLER ",
							"sourceMap": "208:2985:4:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "22169",
								"totalCost": "34569"
							},
							"internal": {
								"_isAdmin(address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH",
									"source": 4,
									"value": "80"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH",
									"source": 4,
									"value": "40"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 266,
									"end": 267,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 241,
									"end": 267,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 241,
									"end": 267,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "CALLVALUE",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "ISZERO",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "POP",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 208,
									"end": 3193,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e1f8f8b56731c6c961cc646b86b6568f15aec6f83dd492e36eef984c329e9e3564736f6c63430008150033",
									".code": [
										{
											"begin": 208,
											"end": 3193,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 208,
											"end": 3193,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 208,
											"end": 3193,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 208,
											"end": 3193,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 208,
											"end": 3193,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 208,
											"end": 3193,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/AllowERC1155.sol",
								"src/Checks.sol",
								"src/Storage.sol",
								"src/helpers/Errors.sol",
								"src/interfaces/ISmartAccount.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_admins\":{\"details\":\"finds if some address is an admin.\"},\"_cutForERC1155\":{\"details\":\"maps ERC1155 token to percentage from allocation that will be transformed into credit.\"},\"_cutForERC20\":{\"details\":\"maps ERC20 token to percentage from allocation that will be transformed into credit.\"},\"_cutForERC721\":{\"details\":\"maps ERC721 token to percentage from allocation that will be transformed into credit.\"},\"_minAllocationForERC1155Token\":{\"details\":\"min amount for certain token.\"},\"_minAllocationForERC20Token\":{\"details\":\"min amount for certain token.\"},\"_minAllocationForERC721Token\":{\"details\":\"min amount for certain token.\"},\"_smartAccount\":{\"details\":\"finds if smart account address from an user.\"},\"_tokensERC1155ToAllocate\":{\"details\":\"shows whether an erc1155 address is allowed as allocation.\"},\"_tokensERC20ToAllocate\":{\"details\":\"shows whether an erc20 address is allowed as allocation.\"},\"_tokensERC721ToAllocate\":{\"details\":\"shows whether an erc721 address is allowed as allocation.\"},\"_tokensType\":{\"details\":\"maps a token address to a tokenStandard.\"},\"_users\":{\"details\":\"finds if some address is an user.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Storage.sol\":\"Storage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/Checks.sol\":{\"keccak256\":\"0x65bb11df807f778a05ee9a01879398a0a2da23362eee5ce3d0c947b01ff5ec36\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://bd3be5a9816e7b19abaf6ef20f37db12e28d77c1459154283e5a0ccefc13cfa1\",\"dweb:/ipfs/QmbY2XqUv6KouJB5YzWR9ssCG2GT5FfoME8EEFnpXtyKGF\"]},\"src/Storage.sol\":{\"keccak256\":\"0x5216fa06b063b3d9e25221f3487971275a3d25dbe007b06178d794cb7ab1cd20\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d382416dc25ce28f47967ae4608a6a0976dcd412f88a857cd42b634afa4c766a\",\"dweb:/ipfs/QmbdpWxbEopmwvSpMCkxPhLpjTw38GR1LFPWniEkF3HjUz\"]},\"src/helpers/Errors.sol\":{\"keccak256\":\"0xfc012755a7b7cde80f3a3c21ef2e5e44e2973bb10564577571eb838cbd3b42f1\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d2eae5414a969480b18b68abae81c1f08bb658f608f40ae3f0f6d3b1e7f1310e\",\"dweb:/ipfs/QmQMYi7XDnosRQFV91CcFkqxmmnuxAGmLv15A2JCGbEnuF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 259,
								"contract": "src/Storage.sol:Storage",
								"label": "unlocked",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 285,
								"contract": "src/Storage.sol:Storage",
								"label": "_admins",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 290,
								"contract": "src/Storage.sol:Storage",
								"label": "_users",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 295,
								"contract": "src/Storage.sol:Storage",
								"label": "_smartAccount",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_address)"
							},
							{
								"astId": 300,
								"contract": "src/Storage.sol:Storage",
								"label": "_tokensType",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 305,
								"contract": "src/Storage.sol:Storage",
								"label": "_tokensERC20ToAllocate",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 310,
								"contract": "src/Storage.sol:Storage",
								"label": "_tokensERC721ToAllocate",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 315,
								"contract": "src/Storage.sol:Storage",
								"label": "_tokensERC1155ToAllocate",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 320,
								"contract": "src/Storage.sol:Storage",
								"label": "_cutForERC20",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 325,
								"contract": "src/Storage.sol:Storage",
								"label": "_cutForERC721",
								"offset": 0,
								"slot": "9",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 330,
								"contract": "src/Storage.sol:Storage",
								"label": "_cutForERC1155",
								"offset": 0,
								"slot": "10",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 335,
								"contract": "src/Storage.sol:Storage",
								"label": "_minAllocationForERC20Token",
								"offset": 0,
								"slot": "11",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 340,
								"contract": "src/Storage.sol:Storage",
								"label": "_minAllocationForERC721Token",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 345,
								"contract": "src/Storage.sol:Storage",
								"label": "_minAllocationForERC1155Token",
								"offset": 0,
								"slot": "13",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_address)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/helpers/Errors.sol": {
				"Errors": {
					"abi": [
						{
							"inputs": [],
							"name": "AddressIsZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "AmountIsZero",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ArrayLengthMismatch",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ForbiddenSender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidCalldata",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "smartAccount",
									"type": "address"
								}
							],
							"name": "InvalidSmartAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "InvalidToken",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "InvalidTokenType",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "InvalidUser",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Locked",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "Paused",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ReceivedNative",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "UnableToMove",
							"type": "error"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/helpers/Errors.sol\":65:493  library Errors {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"src/helpers/Errors.sol\":65:493  library Errors {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cdce994415c7474b5b17206274f2a249db8e3fa68c03e674e419a544d08fa0ec64736f6c63430008150033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cdce994415c7474b5b17206274f2a249db8e3fa68c03e674e419a544d08fa0ec64736f6c63430008150033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xCE SWAP10 PREVRANDAO ISZERO 0xC7 SELFBALANCE 0x4B JUMPDEST OR KECCAK256 PUSH3 0x74F2A2 0x49 0xDB DUP15 EXTCODEHASH 0xA6 DUP13 SUB 0xE6 PUSH21 0xE419A544D08FA0EC64736F6C634300081500330000 ",
							"sourceMap": "65:428:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cdce994415c7474b5b17206274f2a249db8e3fa68c03e674e419a544d08fa0ec64736f6c63430008150033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD 0xCE SWAP10 PREVRANDAO ISZERO 0xC7 SELFBALANCE 0x4B JUMPDEST OR KECCAK256 PUSH3 0x74F2A2 0x49 0xDB DUP15 EXTCODEHASH 0xA6 DUP13 SUB 0xE6 PUSH21 0xE419A544D08FA0EC64736F6C634300081500330000 ",
							"sourceMap": "65:428:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 65,
									"end": 493,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cdce994415c7474b5b17206274f2a249db8e3fa68c03e674e419a544d08fa0ec64736f6c63430008150033",
									".code": [
										{
											"begin": 65,
											"end": 493,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 65,
											"end": 493,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 65,
											"end": 493,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 65,
											"end": 493,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 65,
											"end": 493,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 65,
											"end": 493,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 65,
											"end": 493,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 65,
											"end": 493,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 65,
											"end": 493,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"src/AllowERC1155.sol",
								"src/Checks.sol",
								"src/Storage.sol",
								"src/helpers/Errors.sol",
								"src/interfaces/ISmartAccount.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForbiddenSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldata\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"InvalidSmartAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InvalidUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Locked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceivedNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToMove\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/helpers/Errors.sol\":\"Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/helpers/Errors.sol\":{\"keccak256\":\"0xfc012755a7b7cde80f3a3c21ef2e5e44e2973bb10564577571eb838cbd3b42f1\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://d2eae5414a969480b18b68abae81c1f08bb658f608f40ae3f0f6d3b1e7f1310e\",\"dweb:/ipfs/QmQMYi7XDnosRQFV91CcFkqxmmnuxAGmLv15A2JCGbEnuF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/interfaces/ISmartAccount.sol": {
				"ISmartAccount": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "admin",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "allocateDelegate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "includesNonce",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "nonce",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "allocateWithPermit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "tokenIndexes",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								},
								{
									"internalType": "uint256[]",
									"name": "deadlines",
									"type": "uint256[]"
								},
								{
									"internalType": "bool[]",
									"name": "includesNonce",
									"type": "bool[]"
								},
								{
									"internalType": "uint256[]",
									"name": "nonces",
									"type": "uint256[]"
								},
								{
									"internalType": "uint8[]",
									"name": "v",
									"type": "uint8[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "r",
									"type": "bytes32[]"
								},
								{
									"internalType": "bytes32[]",
									"name": "s",
									"type": "bytes32[]"
								}
							],
							"name": "batchAllocateWithPermit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "cease",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "credit",
							"outputs": [
								{
									"internalType": "int256",
									"name": "",
									"type": "int256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxCredit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "score",
							"outputs": [
								{
									"internalType": "int256",
									"name": "",
									"type": "int256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "paymentTokens",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenType",
									"type": "uint256"
								}
							],
							"name": "setPaymentTokens",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "newPaymentTokens",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "percentageFromAllocation",
									"type": "uint256"
								}
							],
							"name": "setPercentageFromAllocation",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "newPercentageFromAllocation",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenAddress",
									"type": "address"
								}
							],
							"name": "setPermittedERC1155Tokens",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenAddress",
									"type": "address"
								}
							],
							"name": "setPermittedERC20Tokens",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "newPermittedERC20Tokens",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenAddress",
									"type": "address"
								}
							],
							"name": "setPermittedERC721Tokens",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "newPermittedERC721Tokens",
									"type": "address[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "useDefault",
									"type": "bool"
								}
							],
							"name": "setUseDefault",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "skim",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								}
							],
							"name": "tokenToStandard",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "int256",
									"name": "amount",
									"type": "int256"
								}
							],
							"name": "update",
							"outputs": [
								{
									"internalType": "int256",
									"name": "",
									"type": "int256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "useDefault",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"admin(address)": {
								"details": "It should always match the current admins in SAFactory. So, avoid passing in constants, but always make a call to IFactory.admins().",
								"params": {
									"account": "to verify"
								}
							},
							"allocateWithPermit(uint256,uint256,uint256,bool,uint256,uint8,bytes32,bytes32)": {
								"params": {
									"amount": "amount of token to allocate",
									"deadline": "deadline for token to be allocated.",
									"includesNonce": "does the token include a nonce (e.g. DAI) Check whether a nonce can be 0 - since it probably can't, use it as a param to identify that there's no nonce.",
									"nonce": "tx's nonce for token allocation, if any.",
									"r": "sig param",
									"s": "sig param",
									"tokenIndex": "token to allocate",
									"v": "sig param"
								}
							},
							"batchAllocateWithPermit(uint256[],uint256[],uint256[],bool[],uint256[],uint8[],bytes32[],bytes32[])": {
								"params": {
									"amounts": "amounts of each token to be deposited.",
									"deadlines": "deadlines for the transfers to happen.",
									"includesNonce": "whether tokens use includes nonces",
									"nonces": "nonces for tokens. Choose an arbitrary number those who haven't nonces",
									"r": "sig param",
									"s": "sig param",
									"tokenIndexes": "tokens the user want to allocate to receive credit. Must be in inside the permitted tokens addresses chosen by the company.",
									"v": "sig param"
								}
							},
							"skim(address,address)": {
								"params": {
									"to": "to whom it should be given to, possibly being the user who sent it by accident.",
									"token": "token to be withdrawn."
								}
							},
							"tokenToStandard(address)": {
								"params": {
									"_token": "address of token."
								}
							},
							"update(int256)": {
								"params": {
									"amount": "debt or credit of user in a given time. It is used to update the `credit` mapping."
								}
							},
							"useDefault()": {
								"details": "I thought of having all users use the same value, but as it is done in the TradFi industry, users are categorized into certain thresholds - there's the Itau, but there's also the Itau Personalité, for example. So, a customization should be made possible. So, functions sould be also be accessible to be modified by admins in SA."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"admin(address)": "63a846f8",
							"allocateDelegate(uint256,uint256,address)": "5d1a7355",
							"allocateWithPermit(uint256,uint256,uint256,bool,uint256,uint8,bytes32,bytes32)": "ffc08b6d",
							"batchAllocateWithPermit(uint256[],uint256[],uint256[],bool[],uint256[],uint8[],bytes32[],bytes32[])": "40affa94",
							"cease(uint8,bytes32,bytes32,bytes)": "dd71a430",
							"credit()": "a06d083c",
							"maxCredit()": "cfdad40a",
							"name()": "06fdde03",
							"pause()": "8456cb59",
							"score()": "efedc669",
							"setPaymentTokens(address,uint256)": "b66c484e",
							"setPercentageFromAllocation(uint256)": "0ab9bb62",
							"setPermittedERC1155Tokens(address)": "10c030a3",
							"setPermittedERC20Tokens(address)": "de68a001",
							"setPermittedERC721Tokens(address)": "5709d115",
							"setUseDefault(bool)": "9d3c1c7b",
							"skim(address,address)": "712b772f",
							"tokenToStandard(address)": "c2bb8120",
							"unpause()": "3f4ba83a",
							"update(int256)": "6299a6ef",
							"useDefault()": "c550a1ca"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"allocateDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"includesNonce\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"allocateWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"includesNonce\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"batchAllocateWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"credit\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"score\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"}],\"name\":\"setPaymentTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"newPaymentTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentageFromAllocation\",\"type\":\"uint256\"}],\"name\":\"setPercentageFromAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentageFromAllocation\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setPermittedERC1155Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setPermittedERC20Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"newPermittedERC20Tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setPermittedERC721Tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"newPermittedERC721Tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useDefault\",\"type\":\"bool\"}],\"name\":\"setUseDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"tokenToStandard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"update\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useDefault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"admin(address)\":{\"details\":\"It should always match the current admins in SAFactory. So, avoid passing in constants, but always make a call to IFactory.admins().\",\"params\":{\"account\":\"to verify\"}},\"allocateWithPermit(uint256,uint256,uint256,bool,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"amount of token to allocate\",\"deadline\":\"deadline for token to be allocated.\",\"includesNonce\":\"does the token include a nonce (e.g. DAI) Check whether a nonce can be 0 - since it probably can't, use it as a param to identify that there's no nonce.\",\"nonce\":\"tx's nonce for token allocation, if any.\",\"r\":\"sig param\",\"s\":\"sig param\",\"tokenIndex\":\"token to allocate\",\"v\":\"sig param\"}},\"batchAllocateWithPermit(uint256[],uint256[],uint256[],bool[],uint256[],uint8[],bytes32[],bytes32[])\":{\"params\":{\"amounts\":\"amounts of each token to be deposited.\",\"deadlines\":\"deadlines for the transfers to happen.\",\"includesNonce\":\"whether tokens use includes nonces\",\"nonces\":\"nonces for tokens. Choose an arbitrary number those who haven't nonces\",\"r\":\"sig param\",\"s\":\"sig param\",\"tokenIndexes\":\"tokens the user want to allocate to receive credit. Must be in inside the permitted tokens addresses chosen by the company.\",\"v\":\"sig param\"}},\"skim(address,address)\":{\"params\":{\"to\":\"to whom it should be given to, possibly being the user who sent it by accident.\",\"token\":\"token to be withdrawn.\"}},\"tokenToStandard(address)\":{\"params\":{\"_token\":\"address of token.\"}},\"update(int256)\":{\"params\":{\"amount\":\"debt or credit of user in a given time. It is used to update the `credit` mapping.\"}},\"useDefault()\":{\"details\":\"I thought of having all users use the same value, but as it is done in the TradFi industry, users are categorized into certain thresholds - there's the Itau, but there's also the Itau Personalit\\u00e9, for example. So, a customization should be made possible. So, functions sould be also be accessible to be modified by admins in SA.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"admin(address)\":{\"notice\":\"checks whether `account` is authorized to modify user's smart account.\"},\"allocateDelegate(uint256,uint256,address)\":{\"notice\":\"it permits a user to give his credits to another user, but the debt will be calculated against this SA, not the SA of the `to`.\"},\"allocateWithPermit(uint256,uint256,uint256,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit. Function uses the safeTransferFrom with permit functionality to pull tokens. This function can only be callable by the company. Why? Because precification needs to bae handled off-chain. If user calls this function directly, he can send any amount of a depretiated token and his credit can be updated, making it so that he'll have paid less than his bills. So, front-end determines precification, and the user can deposit it. Yes, he can deposit at anytime, however, he can't call it directly. To support  payments before the due data, anytime the user allocates, his credit is updated. To support direct payments, make an `if` statement that if it's not the company the `sender`, user will pay in a stablecoin - probably tether which is centralized and seems to maintain price at $1 always. Then do the math to convert to real - check whether there's a REAL-like stable coin on chain - and then do the math to roundup user payment onchain. Check whether the function implementation is protected against the company making the factory a user as well.\"},\"batchAllocateWithPermit(uint256[],uint256[],uint256[],bool[],uint256[],uint8[],bytes32[],bytes32[])\":{\"notice\":\"Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit.\"},\"cease(uint8,bytes32,bytes32,bytes)\":{\"notice\":\"used by company to cease a user's participation in the protocol.\"},\"credit()\":{\"notice\":\"user's current credit (>0) or debt (<0) at any given time.\"},\"maxCredit()\":{\"notice\":\"user's max credit calculated from user's allocation. Consequentially, it is also the maxDebt for a user.\"},\"name()\":{\"notice\":\"user's name.\"},\"pause()\":{\"notice\":\"pause SA' mains functionalities. Callable only by Factory on deactivate.\"},\"score()\":{\"notice\":\"it increases each time the user `payback()`. It diminishes when user doesn't inccurs debt multiple times. It can be used futurely for giving a usr specific rewards according to his/her score.\"},\"setUseDefault(bool)\":{\"notice\":\"it should be called within the `constructor` function saying wether it's gonna be true or false. Only callable by admins. Make the factory an admin as well.\"},\"skim(address,address)\":{\"notice\":\"function callable by company to withdraw any tokens directly transferred to this contract by accident or leftovers from solidity's rounding arithmetic. If token to be withdrawn is the zero address, withdraw ether from contract. This function should be able to retrieve any balance from this smart account in case of a smart account upgrade so that funds can be transferred to the new one. Use safeTransfer function from SafeERC20 inside here to handle different tokens.\"},\"tokenToStandard(address)\":{\"notice\":\"gets a token from its address and check whether it's a erc20 (0), erc721(1) or erc1155(2).\"},\"unpause()\":{\"notice\":\"unpauses SA's mains functionalities. Callable only by Factory on activate.\"},\"update(int256)\":{\"notice\":\"only to be called by company's wallets addresses. It's called when company updates the states of the user according to their usage of the credit card off-chain. It can be called in batches to avoid block-max-gas-limit revert error in the chain being used.\"},\"useDefault()\":{\"notice\":\"storage variable that is either true or false. Use default values already registered in this Factory contract for the `create` function. If false, params should be given. If true, params can be of any value and they will be discarded.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISmartAccount.sol\":\"ISmartAccount\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/ISmartAccount.sol\":{\"keccak256\":\"0x86e9e36816cdb15703225659f57f3f38b9ae090b23c78b0a3d63ffcf4df7afb3\",\"license\":\"SEE LICENSE IN LICENSE\",\"urls\":[\"bzz-raw://4abe7ec943bb1a00356078892e3ffdcace4c4992d8e33b6fab0cb533e69eeb94\",\"dweb:/ipfs/QmewdeMb2B9Aq9Sj7ihEa71NbZN3a9ndP9DGAYFuKNKek4\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"admin(address)": {
								"notice": "checks whether `account` is authorized to modify user's smart account."
							},
							"allocateDelegate(uint256,uint256,address)": {
								"notice": "it permits a user to give his credits to another user, but the debt will be calculated against this SA, not the SA of the `to`."
							},
							"allocateWithPermit(uint256,uint256,uint256,bool,uint256,uint8,bytes32,bytes32)": {
								"notice": "Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit. Function uses the safeTransferFrom with permit functionality to pull tokens. This function can only be callable by the company. Why? Because precification needs to bae handled off-chain. If user calls this function directly, he can send any amount of a depretiated token and his credit can be updated, making it so that he'll have paid less than his bills. So, front-end determines precification, and the user can deposit it. Yes, he can deposit at anytime, however, he can't call it directly. To support  payments before the due data, anytime the user allocates, his credit is updated. To support direct payments, make an `if` statement that if it's not the company the `sender`, user will pay in a stablecoin - probably tether which is centralized and seems to maintain price at $1 always. Then do the math to convert to real - check whether there's a REAL-like stable coin on chain - and then do the math to roundup user payment onchain. Check whether the function implementation is protected against the company making the factory a user as well."
							},
							"batchAllocateWithPermit(uint256[],uint256[],uint256[],bool[],uint256[],uint8[],bytes32[],bytes32[])": {
								"notice": "Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit."
							},
							"cease(uint8,bytes32,bytes32,bytes)": {
								"notice": "used by company to cease a user's participation in the protocol."
							},
							"credit()": {
								"notice": "user's current credit (>0) or debt (<0) at any given time."
							},
							"maxCredit()": {
								"notice": "user's max credit calculated from user's allocation. Consequentially, it is also the maxDebt for a user."
							},
							"name()": {
								"notice": "user's name."
							},
							"pause()": {
								"notice": "pause SA' mains functionalities. Callable only by Factory on deactivate."
							},
							"score()": {
								"notice": "it increases each time the user `payback()`. It diminishes when user doesn't inccurs debt multiple times. It can be used futurely for giving a usr specific rewards according to his/her score."
							},
							"setUseDefault(bool)": {
								"notice": "it should be called within the `constructor` function saying wether it's gonna be true or false. Only callable by admins. Make the factory an admin as well."
							},
							"skim(address,address)": {
								"notice": "function callable by company to withdraw any tokens directly transferred to this contract by accident or leftovers from solidity's rounding arithmetic. If token to be withdrawn is the zero address, withdraw ether from contract. This function should be able to retrieve any balance from this smart account in case of a smart account upgrade so that funds can be transferred to the new one. Use safeTransfer function from SafeERC20 inside here to handle different tokens."
							},
							"tokenToStandard(address)": {
								"notice": "gets a token from its address and check whether it's a erc20 (0), erc721(1) or erc1155(2)."
							},
							"unpause()": {
								"notice": "unpauses SA's mains functionalities. Callable only by Factory on activate."
							},
							"update(int256)": {
								"notice": "only to be called by company's wallets addresses. It's called when company updates the states of the user according to their usage of the credit card off-chain. It can be called in batches to avoid block-max-gas-limit revert error in the chain being used."
							},
							"useDefault()": {
								"notice": "storage variable that is either true or false. Use default values already registered in this Factory contract for the `create` function. If false, params should be given. If true, params can be of any value and they will be discarded."
							}
						},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:13:9:\n   |\n13 |         address operator,\n   |         ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 616,
					"file": "src/AllowERC1155.sol",
					"start": 600
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:15:9:\n   |\n15 |         uint256 id,\n   |         ^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 658,
					"file": "src/AllowERC1155.sol",
					"start": 648
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:16:9:\n   |\n16 |         uint256 value,\n   |         ^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 681,
					"file": "src/AllowERC1155.sol",
					"start": 668
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:17:9:\n   |\n17 |         bytes calldata data\n   |         ^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 710,
					"file": "src/AllowERC1155.sol",
					"start": 691
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:35:9:\n   |\n35 |         address operator,\n   |         ^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1447,
					"file": "src/AllowERC1155.sol",
					"start": 1431
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:37:9:\n   |\n37 |         uint256[] calldata ids,\n   |         ^^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1501,
					"file": "src/AllowERC1155.sol",
					"start": 1479
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:38:9:\n   |\n38 |         uint256[] calldata values,\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1536,
					"file": "src/AllowERC1155.sol",
					"start": 1511
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "5667",
				"formattedMessage": "Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/AllowERC1155.sol:39:9:\n   |\n39 |         bytes calldata data\n   |         ^^^^^^^^^^^^^^^^^^^\n\n",
				"message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
				"severity": "warning",
				"sourceLocation": {
					"end": 1565,
					"file": "src/AllowERC1155.sol",
					"start": 1546
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to view\n  --> src/Storage.sol:84:5:\n   |\n84 |     function _isAdmin(address _sender) internal {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to view",
				"severity": "warning",
				"sourceLocation": {
					"end": 3191,
					"file": "src/Storage.sol",
					"start": 3076
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n  --> src/AllowERC1155.sol:53:5:\n   |\n53 |     function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 2265,
					"file": "src/AllowERC1155.sol",
					"start": 2127
				},
				"type": "Warning"
			}
		],
		"sources": {
			"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
					"exportedSymbols": {
						"IERC1155Receiver": [
							41
						],
						"IERC165": [
							53
						]
					},
					"id": 42,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 42,
							"sourceUnit": 54,
							"src": "144:62:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 53,
										"src": "152:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "IERC165",
										"nameLocations": [
											"357:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 53,
										"src": "357:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "357:7:0"
								}
							],
							"canonicalName": "IERC1155Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "208:118:0",
								"text": " @dev Interface that must be implemented by smart contracts in order to receive\n ERC-1155 token transfers."
							},
							"fullyImplemented": false,
							"id": 41,
							"linearizedBaseContracts": [
								41,
								53
							],
							"name": "IERC1155Receiver",
							"nameLocation": "337:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 7,
										"nodeType": "StructuredDocumentation",
										"src": "371:826:0",
										"text": " @dev Handles the receipt of a single ERC1155 token type. This function is\n called at the end of a `safeTransferFrom` after the balance has been updated.\n NOTE: To accept the transfer, this must return\n `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n (i.e. 0xf23a6e61, or its own function selector).\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed"
									},
									"functionSelector": "f23a6e61",
									"id": 22,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC1155Received",
									"nameLocation": "1211:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1246:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1238:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1238:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1272:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1264:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1264:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "1294:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1286:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1286:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1314:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1306:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1344:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1329:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 16,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1329:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1228:126:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1373:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 19,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1373:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1372:8:0"
									},
									"scope": 41,
									"src": "1202:179:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1387:994:0",
										"text": " @dev Handles the receipt of a multiple ERC1155 token types. This function\n is called at the end of a `safeBatchTransferFrom` after the balances have\n been updated.\n NOTE: To accept the transfer(s), this must return\n `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n (i.e. 0xbc197c81, or its own function selector).\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match values array)\n @param values An array containing amounts of each token being transferred (order and length must match ids array)\n @param data Additional data with no specified format\n @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed"
									},
									"functionSelector": "bc197c81",
									"id": 40,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC1155BatchReceived",
									"nameLocation": "2395:22:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "2435:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2427:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2427:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2461:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2453:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2453:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "ids",
												"nameLocation": "2494:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2475:22:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 28,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2475:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 29,
													"nodeType": "ArrayTypeName",
													"src": "2475:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "values",
												"nameLocation": "2526:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2507:25:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 31,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2507:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 32,
													"nodeType": "ArrayTypeName",
													"src": "2507:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2557:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2542:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 34,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2542:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2417:150:0"
									},
									"returnParameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2586:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 37,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2586:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2585:8:0"
									},
									"scope": 41,
									"src": "2386:208:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 42,
							"src": "327:2269:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "118:2479:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							53
						]
					},
					"id": 54,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 43,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 44,
								"nodeType": "StructuredDocumentation",
								"src": "141:279:1",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 53,
							"linearizedBaseContracts": [
								53
							],
							"name": "IERC165",
							"nameLocation": "431:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "445:340:1",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "799:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "824:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "817:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 46,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "817:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "816:20:1"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "860:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 49,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "860:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "859:6:1"
									},
									"scope": 53,
									"src": "790:76:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 54,
							"src": "421:447:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:754:1"
				},
				"id": 1
			},
			"src/AllowERC1155.sol": {
				"ast": {
					"absolutePath": "src/AllowERC1155.sol",
					"exportedSymbols": {
						"AllowERC1155": [
							213
						],
						"Errors": [
							405
						],
						"IERC1155Receiver": [
							41
						],
						"IERC165": [
							53
						],
						"ISmartAccount": [
							599
						],
						"Storage": [
							368
						]
					},
					"id": 214,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 55,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"id": 57,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 214,
							"sourceUnit": 54,
							"src": "65:80:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 56,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 53,
										"src": "73:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
							"file": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol",
							"id": 59,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 214,
							"sourceUnit": 42,
							"src": "146:92:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 58,
										"name": "IERC1155Receiver",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "154:16:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/Storage.sol",
							"file": "./Storage.sol",
							"id": 61,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 214,
							"sourceUnit": 369,
							"src": "239:38:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 60,
										"name": "Storage",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 368,
										"src": "247:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/interfaces/ISmartAccount.sol",
							"file": "./interfaces/ISmartAccount.sol",
							"id": 63,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 214,
							"sourceUnit": 600,
							"src": "278:61:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 62,
										"name": "ISmartAccount",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 599,
										"src": "286:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/helpers/Errors.sol",
							"file": "./helpers/Errors.sol",
							"id": 65,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 214,
							"sourceUnit": 406,
							"src": "340:44:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 64,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 405,
										"src": "348:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 66,
										"name": "IERC1155Receiver",
										"nameLocations": [
											"420:16:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "420:16:2"
									},
									"id": 67,
									"nodeType": "InheritanceSpecifier",
									"src": "420:16:2"
								},
								{
									"baseName": {
										"id": 68,
										"name": "Storage",
										"nameLocations": [
											"438:7:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 368,
										"src": "438:7:2"
									},
									"id": 69,
									"nodeType": "InheritanceSpecifier",
									"src": "438:7:2"
								}
							],
							"canonicalName": "AllowERC1155",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 213,
							"linearizedBaseContracts": [
								213,
								368,
								251,
								41,
								53
							],
							"name": "AllowERC1155",
							"nameLocation": "404:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										22
									],
									"body": {
										"id": 134,
										"nodeType": "Block",
										"src": "748:636:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 88,
																	"name": "_tokensType",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 300,
																	"src": "972:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 91,
																"indexExpression": {
																	"expression": {
																		"id": 89,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "984:3:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 90,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "988:6:2",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "984:10:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "972:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 94,
																			"name": "TokenStandard",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 351,
																			"src": "1004:13:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_TokenStandard_$351_$",
																				"typeString": "type(enum Storage.TokenStandard)"
																			}
																		},
																		"id": 95,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "1018:9:2",
																		"memberName": "isERC1155",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 350,
																		"src": "1004:23:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_TokenStandard_$351",
																			"typeString": "enum Storage.TokenStandard"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_enum$_TokenStandard_$351",
																			"typeString": "enum Storage.TokenStandard"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "999:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "uint",
																		"nodeType": "ElementaryTypeName",
																		"src": "999:4:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 96,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "999:29:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "972:56:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "2133",
															"id": 98,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1030:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0cab2613516a2af3d7b1ddbca5853926ef912cc864b99e44b3d6e2391213747a",
																"typeString": "literal_string \"!3\""
															},
															"value": "!3"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0cab2613516a2af3d7b1ddbca5853926ef912cc864b99e44b3d6e2391213747a",
																"typeString": "literal_string \"!3\""
															}
														],
														"id": 87,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "964:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 99,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "964:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 100,
												"nodeType": "ExpressionStatement",
												"src": "964:71:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 102,
																"name": "_smartAccount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 295,
																"src": "1065:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																	"typeString": "mapping(address => address)"
																}
															},
															"id": 104,
															"indexExpression": {
																"id": 103,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 74,
																"src": "1079:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1065:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 101,
														"name": "revertIfZeroAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 250,
														"src": "1045:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$returns$__$",
															"typeString": "function (address) pure"
														}
													},
													"id": 105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1045:40:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 106,
												"nodeType": "ExpressionStatement",
												"src": "1045:40:2"
											},
											{
												"condition": {
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1099:13:2",
													"subExpression": {
														"baseExpression": {
															"id": 107,
															"name": "_users",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 290,
															"src": "1100:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 109,
														"indexExpression": {
															"id": 108,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 74,
															"src": "1107:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1100:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 117,
												"nodeType": "IfStatement",
												"src": "1095:50:2",
												"trueBody": {
													"errorCall": {
														"arguments": [
															{
																"id": 114,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 74,
																"src": "1140:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 111,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "1121:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1128:11:2",
															"memberName": "InvalidUser",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 378,
															"src": "1121:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																"typeString": "function (address) pure"
															}
														},
														"id": 115,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1121:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 116,
													"nodeType": "RevertStatement",
													"src": "1114:31:2"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "31303030",
															"id": 124,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1198:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"expression": {
															"arguments": [
																{
																	"baseExpression": {
																		"id": 119,
																		"name": "_smartAccount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 295,
																		"src": "1170:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																			"typeString": "mapping(address => address)"
																		}
																	},
																	"id": 121,
																	"indexExpression": {
																		"id": 120,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 74,
																		"src": "1184:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1170:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 118,
																"name": "ISmartAccount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 599,
																"src": "1156:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISmartAccount_$599_$",
																	"typeString": "type(contract ISmartAccount)"
																}
															},
															"id": 122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1156:34:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISmartAccount_$599",
																"typeString": "contract ISmartAccount"
															}
														},
														"id": 123,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1191:6:2",
														"memberName": "update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 519,
														"src": "1156:41:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_int256_$returns$_t_int256_$",
															"typeString": "function (int256) external returns (int256)"
														}
													},
													"id": 125,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1156:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 126,
												"nodeType": "ExpressionStatement",
												"src": "1156:47:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f6e45524331313535526563656976656428616464726573732c616464726573732c75696e743235362c75696e743235362c627974657329",
																	"id": 130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1287:58:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf97",
																		"typeString": "literal_string \"onERC1155Received(address,address,uint256,uint256,bytes)\""
																	},
																	"value": "onERC1155Received(address,address,uint256,uint256,bytes)"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_f23a6e612e1ff4830e658fe43f4e3cb4a5f8170bd5d9e69fb5d7a7fa9e4fdf97",
																		"typeString": "literal_string \"onERC1155Received(address,address,uint256,uint256,bytes)\""
																	}
																],
																"id": 129,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "1256:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 131,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1256:107:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 128,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1232:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes4_$",
															"typeString": "type(bytes4)"
														},
														"typeName": {
															"id": 127,
															"name": "bytes4",
															"nodeType": "ElementaryTypeName",
															"src": "1232:6:2",
															"typeDescriptions": {}
														}
													},
													"id": 132,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1232:145:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 86,
												"id": 133,
												"nodeType": "Return",
												"src": "1213:164:2"
											}
										]
									},
									"documentation": {
										"id": 70,
										"nodeType": "StructuredDocumentation",
										"src": "452:107:2",
										"text": "@notice the function below as is MUST NOT be used in production. This is only a demo for a presentation"
									},
									"functionSelector": "f23a6e61",
									"id": 135,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 83,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 82,
												"name": "lock",
												"nameLocations": [
													"726:4:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 280,
												"src": "726:4:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "726:4:2"
										}
									],
									"name": "onERC1155Received",
									"nameLocation": "573:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 72,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "608:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "600:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 71,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "600:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "634:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "626:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "626:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "656:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "648:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "648:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "676:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "668:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "706:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "691:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 79,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "691:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "590:126:2"
									},
									"returnParameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "740:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 84,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "740:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "739:8:2"
									},
									"scope": 213,
									"src": "564:820:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										40
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "1603:518:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"baseExpression": {
															"id": 154,
															"name": "_smartAccount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 295,
															"src": "1743:13:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																"typeString": "mapping(address => address)"
															}
														},
														"id": 156,
														"indexExpression": {
															"id": 155,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "1757:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1743:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 159,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1774:1:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 158,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1766:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 157,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1766:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 160,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1766:10:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1743:33:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 168,
												"nodeType": "IfStatement",
												"src": "1739:70:2",
												"trueBody": {
													"errorCall": {
														"arguments": [
															{
																"id": 165,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 139,
																"src": "1804:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 162,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "1785:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 164,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1792:11:2",
															"memberName": "InvalidUser",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 378,
															"src": "1785:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																"typeString": "function (address) pure"
															}
														},
														"id": 166,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1785:24:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 167,
													"nodeType": "RevertStatement",
													"src": "1778:31:2"
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "31303030",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1861:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															},
															"value": "1000"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1000_by_1",
																"typeString": "int_const 1000"
															}
														],
														"expression": {
															"arguments": [
																{
																	"baseExpression": {
																		"id": 170,
																		"name": "_smartAccount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 295,
																		"src": "1833:13:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
																			"typeString": "mapping(address => address)"
																		}
																	},
																	"id": 172,
																	"indexExpression": {
																		"id": 171,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 139,
																		"src": "1847:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1833:19:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 169,
																"name": "ISmartAccount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 599,
																"src": "1819:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_ISmartAccount_$599_$",
																	"typeString": "type(contract ISmartAccount)"
																}
															},
															"id": 173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1819:34:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISmartAccount_$599",
																"typeString": "contract ISmartAccount"
															}
														},
														"id": 174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1854:6:2",
														"memberName": "update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 519,
														"src": "1819:41:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_int256_$returns$_t_int256_$",
															"typeString": "function (int256) external returns (int256)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1819:47:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "1819:47:2"
											},
											{
												"expression": {
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 178,
															"name": "_tokensType",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 300,
															"src": "1876:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 181,
														"indexExpression": {
															"expression": {
																"id": 179,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1888:3:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1892:6:2",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1888:10:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1876:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 184,
																	"name": "TokenStandard",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "1907:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_TokenStandard_$351_$",
																		"typeString": "type(enum Storage.TokenStandard)"
																	}
																},
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1921:9:2",
																"memberName": "isERC1155",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 350,
																"src": "1907:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_TokenStandard_$351",
																	"typeString": "enum Storage.TokenStandard"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_TokenStandard_$351",
																	"typeString": "enum Storage.TokenStandard"
																}
															],
															"id": 183,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1902:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 182,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "1902:4:2",
																"typeDescriptions": {}
															}
														},
														"id": 186,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1902:29:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1876:55:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "1876:55:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "6f6e455243313135354261746368526563656976656428616464726573732c616464726573732c75696e743235365b5d2c75696e743235365b5d2c627974657329",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2015:67:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_bc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621",
																		"typeString": "literal_string \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\""
																	},
																	"value": "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_bc197c819b3e337a6f9652dd10becd7eef83032af3b9d958d3d42f6694146621",
																		"typeString": "literal_string \"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\""
																	}
																],
																"id": 191,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "1984:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 193,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1984:116:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 190,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1960:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes4_$",
															"typeString": "type(bytes4)"
														},
														"typeName": {
															"id": 189,
															"name": "bytes4",
															"nodeType": "ElementaryTypeName",
															"src": "1960:6:2",
															"typeDescriptions": {}
														}
													},
													"id": 194,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1960:154:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"functionReturnParameters": 153,
												"id": 195,
												"nodeType": "Return",
												"src": "1941:173:2"
											}
										]
									},
									"functionSelector": "bc197c81",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 150,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 149,
												"name": "lock",
												"nameLocations": [
													"1581:4:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 280,
												"src": "1581:4:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1581:4:2"
										}
									],
									"name": "onERC1155BatchReceived",
									"nameLocation": "1399:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "1439:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1431:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1431:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1465:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1457:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 138,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1457:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "ids",
												"nameLocation": "1498:3:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1479:22:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 140,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1479:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 141,
													"nodeType": "ArrayTypeName",
													"src": "1479:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "values",
												"nameLocation": "1530:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1511:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 143,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1511:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 144,
													"nodeType": "ArrayTypeName",
													"src": "1511:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1561:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1546:19:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 146,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1546:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1421:150:2"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "1595:6:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 151,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1595:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1594:8:2"
									},
									"scope": 213,
									"src": "1390:731:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										52
									],
									"body": {
										"id": 211,
										"nodeType": "Block",
										"src": "2201:64:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 204,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "2218:11:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 206,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 53,
																	"src": "2238:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$53_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$53_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 205,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "2233:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 207,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2233:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$53",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 208,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "2247:11:2",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "2233:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "2218:40:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 203,
												"id": 210,
												"nodeType": "Return",
												"src": "2211:47:2"
											}
										]
									},
									"functionSelector": "01ffc9a7",
									"id": 212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "2136:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "2161:11:2",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2154:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 198,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "2154:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:20:2"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 212,
												"src": "2195:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 201,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2195:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2194:6:2"
									},
									"scope": 213,
									"src": "2127:138:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 214,
							"src": "386:1881:2",
							"usedErrors": [
								378,
								382,
								402
							],
							"usedEvents": []
						}
					],
					"src": "39:2229:2"
				},
				"id": 2
			},
			"src/Checks.sol": {
				"ast": {
					"absolutePath": "src/Checks.sol",
					"exportedSymbols": {
						"Checks": [
							251
						],
						"Errors": [
							405
						]
					},
					"id": 252,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 215,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:3"
						},
						{
							"absolutePath": "src/helpers/Errors.sol",
							"file": "./helpers/Errors.sol",
							"id": 217,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 252,
							"sourceUnit": 406,
							"src": "306:44:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 216,
										"name": "Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 405,
										"src": "314:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Checks",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 251,
							"linearizedBaseContracts": [
								251
							],
							"name": "Checks",
							"nameLocation": "361:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 231,
										"nodeType": "Block",
										"src": "423:62:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 222,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "437:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 223,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "447:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "437:11:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 230,
												"nodeType": "IfStatement",
												"src": "433:45:3",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 225,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "457:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "464:12:3",
															"memberName": "AmountIsZero",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 400,
															"src": "457:19:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "457:21:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 229,
													"nodeType": "RevertStatement",
													"src": "450:28:3"
												}
											}
										]
									},
									"id": 232,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ifZeroRevert",
									"nameLocation": "383:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "401:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 232,
												"src": "396:11:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "396:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "395:13:3"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "423:0:3"
									},
									"scope": 251,
									"src": "374:111:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 249,
										"nodeType": "Block",
										"src": "549:71:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 237,
														"name": "token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 234,
														"src": "563:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 240,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "580:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "572:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 238,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "572:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 241,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "572:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "563:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 248,
												"nodeType": "IfStatement",
												"src": "559:54:3",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 243,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "591:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "598:13:3",
															"memberName": "AddressIsZero",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 402,
															"src": "591:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 246,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "591:22:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 247,
													"nodeType": "RevertStatement",
													"src": "584:29:3"
												}
											}
										]
									},
									"id": 250,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "revertIfZeroAddress",
									"nameLocation": "500:19:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "528:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "520:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "519:15:3"
									},
									"returnParameters": {
										"id": 236,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "549:0:3"
									},
									"scope": 251,
									"src": "491:129:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 252,
							"src": "352:270:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:584:3"
				},
				"id": 3
			},
			"src/Storage.sol": {
				"ast": {
					"absolutePath": "src/Storage.sol",
					"exportedSymbols": {
						"Checks": [
							251
						],
						"Errors": [
							405
						],
						"Storage": [
							368
						]
					},
					"id": 369,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 253,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:4"
						},
						{
							"absolutePath": "src/Checks.sol",
							"file": "./Checks.sol",
							"id": 254,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 369,
							"sourceUnit": 252,
							"src": "184:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 255,
										"name": "Checks",
										"nameLocations": [
											"228:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 251,
										"src": "228:6:4"
									},
									"id": 256,
									"nodeType": "InheritanceSpecifier",
									"src": "228:6:4"
								}
							],
							"canonicalName": "Storage",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 368,
							"linearizedBaseContracts": [
								368,
								251
							],
							"name": "Storage",
							"nameLocation": "217:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 259,
									"mutability": "mutable",
									"name": "unlocked",
									"nameLocation": "255:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "241:26:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 257,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "241:4:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 258,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "266:1:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 279,
										"nodeType": "Block",
										"src": "290:113:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 261,
														"name": "unlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "304:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "31",
														"id": 262,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "316:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "304:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 269,
												"nodeType": "IfStatement",
												"src": "300:41:4",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 264,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "326:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "333:6:4",
															"memberName": "Locked",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 382,
															"src": "326:13:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 267,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "326:15:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 268,
													"nodeType": "RevertStatement",
													"src": "319:22:4"
												}
											},
											{
												"expression": {
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 270,
														"name": "unlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "351:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "362:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "351:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 273,
												"nodeType": "ExpressionStatement",
												"src": "351:12:4"
											},
											{
												"id": 274,
												"nodeType": "PlaceholderStatement",
												"src": "373:1:4"
											},
											{
												"expression": {
													"id": 277,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 275,
														"name": "unlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "384:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 276,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "395:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "384:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 278,
												"nodeType": "ExpressionStatement",
												"src": "384:12:4"
											}
										]
									},
									"id": 280,
									"name": "lock",
									"nameLocation": "283:4:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "287:2:4"
									},
									"src": "274:129:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 281,
										"nodeType": "StructuredDocumentation",
										"src": "654:42:4",
										"text": "@dev finds if some address is an admin."
									},
									"id": 285,
									"mutability": "mutable",
									"name": "_admins",
									"nameLocation": "735:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "701:41:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 284,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 282,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "709:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "701:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 283,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "720:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "749:41:4",
										"text": "@dev finds if some address is an user."
									},
									"id": 290,
									"mutability": "mutable",
									"name": "_users",
									"nameLocation": "829:6:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "795:40:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 289,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 287,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "803:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "795:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 288,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "814:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "842:52:4",
										"text": "@dev finds if smart account address from an user."
									},
									"id": 295,
									"mutability": "mutable",
									"name": "_smartAccount",
									"nameLocation": "936:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "899:50:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
										"typeString": "mapping(address => address)"
									},
									"typeName": {
										"id": 294,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 292,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "907:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "899:27:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_address_$",
											"typeString": "mapping(address => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 293,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "918:7:4",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 296,
										"nodeType": "StructuredDocumentation",
										"src": "1368:48:4",
										"text": "@dev maps a token address to a tokenStandard."
									},
									"id": 300,
									"mutability": "mutable",
									"name": "_tokensType",
									"nameLocation": "1455:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "1421:45:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 299,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 297,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1429:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1421:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 298,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "1440:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "1473:64:4",
										"text": "@dev shows whether an erc20 address is allowed as allocation."
									},
									"id": 305,
									"mutability": "mutable",
									"name": "_tokensERC20ToAllocate",
									"nameLocation": "1576:22:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "1542:56:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 304,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 302,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1550:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1542:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 303,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1561:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "1605:65:4",
										"text": "@dev shows whether an erc721 address is allowed as allocation."
									},
									"id": 310,
									"mutability": "mutable",
									"name": "_tokensERC721ToAllocate",
									"nameLocation": "1709:23:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "1675:57:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 309,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 307,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1683:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1675:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 308,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1694:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 311,
										"nodeType": "StructuredDocumentation",
										"src": "1739:66:4",
										"text": "@dev shows whether an erc1155 address is allowed as allocation."
									},
									"id": 315,
									"mutability": "mutable",
									"name": "_tokensERC1155ToAllocate",
									"nameLocation": "1844:24:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "1810:58:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 314,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 312,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1818:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1810:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 313,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1829:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 316,
										"nodeType": "StructuredDocumentation",
										"src": "1875:92:4",
										"text": "@dev maps ERC20 token to percentage from allocation that will be transformed into credit."
									},
									"id": 320,
									"mutability": "mutable",
									"name": "_cutForERC20",
									"nameLocation": "2006:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "1972:46:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 319,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 317,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1980:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1972:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 318,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "1991:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "2025:93:4",
										"text": "@dev maps ERC721 token to percentage from allocation that will be transformed into credit."
									},
									"id": 325,
									"mutability": "mutable",
									"name": "_cutForERC721",
									"nameLocation": "2157:13:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "2123:47:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 324,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 322,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2131:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2123:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 323,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "2142:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "2177:94:4",
										"text": "@dev maps ERC1155 token to percentage from allocation that will be transformed into credit."
									},
									"id": 330,
									"mutability": "mutable",
									"name": "_cutForERC1155",
									"nameLocation": "2310:14:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "2276:48:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 329,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 327,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2284:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2276:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 328,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "2295:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 331,
										"nodeType": "StructuredDocumentation",
										"src": "2331:38:4",
										"text": "@dev min amount for certain token."
									},
									"id": 335,
									"mutability": "mutable",
									"name": "_minAllocationForERC20Token",
									"nameLocation": "2408:27:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "2374:61:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 334,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 332,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2382:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2374:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 333,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "2393:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 336,
										"nodeType": "StructuredDocumentation",
										"src": "2442:38:4",
										"text": "@dev min amount for certain token."
									},
									"id": 340,
									"mutability": "mutable",
									"name": "_minAllocationForERC721Token",
									"nameLocation": "2519:28:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "2485:62:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 339,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 337,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2493:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2485:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 338,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "2504:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 341,
										"nodeType": "StructuredDocumentation",
										"src": "2554:38:4",
										"text": "@dev min amount for certain token."
									},
									"id": 345,
									"mutability": "mutable",
									"name": "_minAllocationForERC1155Token",
									"nameLocation": "2631:29:4",
									"nodeType": "VariableDeclaration",
									"scope": 368,
									"src": "2597:63:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 344,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 342,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "2605:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "2597:24:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 343,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "2616:4:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "internal"
								},
								{
									"canonicalName": "Storage.TokenStandard",
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "2667:35:4",
										"text": "@dev enum to store token types."
									},
									"id": 351,
									"members": [
										{
											"id": 347,
											"name": "isNothing",
											"nameLocation": "2736:9:4",
											"nodeType": "EnumValue",
											"src": "2736:9:4"
										},
										{
											"id": 348,
											"name": "isERC20",
											"nameLocation": "2760:7:4",
											"nodeType": "EnumValue",
											"src": "2760:7:4"
										},
										{
											"id": 349,
											"name": "isERC721",
											"nameLocation": "2782:8:4",
											"nodeType": "EnumValue",
											"src": "2782:8:4"
										},
										{
											"id": 350,
											"name": "isERC1155",
											"nameLocation": "2805:9:4",
											"nodeType": "EnumValue",
											"src": "2805:9:4"
										}
									],
									"name": "TokenStandard",
									"nameLocation": "2712:13:4",
									"nodeType": "EnumDefinition",
									"src": "2707:118:4"
								},
								{
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "3120:71:4",
										"statements": [
											{
												"condition": {
													"id": 359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3134:17:4",
													"subExpression": {
														"baseExpression": {
															"id": 356,
															"name": "_admins",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 285,
															"src": "3135:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 358,
														"indexExpression": {
															"id": 357,
															"name": "_sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 353,
															"src": "3143:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3135:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 365,
												"nodeType": "IfStatement",
												"src": "3130:54:4",
												"trueBody": {
													"errorCall": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 360,
																"name": "Errors",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 405,
																"src": "3160:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_Errors_$405_$",
																	"typeString": "type(library Errors)"
																}
															},
															"id": 362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3167:15:4",
															"memberName": "ForbiddenSender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 372,
															"src": "3160:22:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_error_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3160:24:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$__$",
															"typeString": "tuple()"
														}
													},
													"id": 364,
													"nodeType": "RevertStatement",
													"src": "3153:31:4"
												}
											}
										]
									},
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isAdmin",
									"nameLocation": "3085:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "_sender",
												"nameLocation": "3102:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "3094:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 352,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3094:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3093:17:4"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3120:0:4"
									},
									"scope": 368,
									"src": "3076:115:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 369,
							"src": "208:2985:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "39:3155:4"
				},
				"id": 4
			},
			"src/helpers/Errors.sol": {
				"ast": {
					"absolutePath": "src/helpers/Errors.sol",
					"exportedSymbols": {
						"Errors": [
							405
						]
					},
					"id": 406,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 370,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Errors",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 405,
							"linearizedBaseContracts": [
								405
							],
							"name": "Errors",
							"nameLocation": "73:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "c5a5ba5c",
									"id": 372,
									"name": "ForbiddenSender",
									"nameLocation": "92:15:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 371,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "107:2:5"
									},
									"src": "86:24:5"
								},
								{
									"errorSelector": "8129bbcd",
									"id": 374,
									"name": "InvalidCalldata",
									"nameLocation": "121:15:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "136:2:5"
									},
									"src": "115:24:5"
								},
								{
									"errorSelector": "ba1b16ec",
									"id": 378,
									"name": "InvalidUser",
									"nameLocation": "150:11:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "170:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 378,
												"src": "162:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "162:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "161:14:5"
									},
									"src": "144:32:5"
								},
								{
									"errorSelector": "a24a13a6",
									"id": 380,
									"name": "ArrayLengthMismatch",
									"nameLocation": "187:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "206:2:5"
									},
									"src": "181:28:5"
								},
								{
									"errorSelector": "0f2e5b6c",
									"id": 382,
									"name": "Locked",
									"nameLocation": "220:6:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "226:2:5"
									},
									"src": "214:15:5"
								},
								{
									"errorSelector": "9e87fac8",
									"id": 384,
									"name": "Paused",
									"nameLocation": "240:6:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "246:2:5"
									},
									"src": "234:15:5"
								},
								{
									"errorSelector": "961c9a4f",
									"id": 388,
									"name": "InvalidToken",
									"nameLocation": "260:12:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "281:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "273:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "273:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "272:15:5"
									},
									"src": "254:34:5"
								},
								{
									"errorSelector": "26601f62",
									"id": 392,
									"name": "InvalidTokenType",
									"nameLocation": "299:16:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "324:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "316:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "316:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "315:15:5"
									},
									"src": "293:38:5"
								},
								{
									"errorSelector": "a7f83032",
									"id": 394,
									"name": "UnableToMove",
									"nameLocation": "342:12:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "354:2:5"
									},
									"src": "336:21:5"
								},
								{
									"errorSelector": "ece6c058",
									"id": 398,
									"name": "InvalidSmartAccount",
									"nameLocation": "368:19:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "smartAccount",
												"nameLocation": "396:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 398,
												"src": "388:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 395,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "388:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "387:22:5"
									},
									"src": "362:48:5"
								},
								{
									"errorSelector": "43ad20fc",
									"id": 400,
									"name": "AmountIsZero",
									"nameLocation": "421:12:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "433:2:5"
									},
									"src": "415:21:5"
								},
								{
									"errorSelector": "867915ab",
									"id": 402,
									"name": "AddressIsZero",
									"nameLocation": "447:13:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "460:2:5"
									},
									"src": "441:22:5"
								},
								{
									"errorSelector": "11e2b65b",
									"id": 404,
									"name": "ReceivedNative",
									"nameLocation": "474:14:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "488:2:5"
									},
									"src": "468:23:5"
								}
							],
							"scope": 406,
							"src": "65:428:5",
							"usedErrors": [
								372,
								374,
								378,
								380,
								382,
								384,
								388,
								392,
								394,
								398,
								400,
								402,
								404
							],
							"usedEvents": []
						}
					],
					"src": "39:455:5"
				},
				"id": 5
			},
			"src/interfaces/ISmartAccount.sol": {
				"ast": {
					"absolutePath": "src/interfaces/ISmartAccount.sol",
					"exportedSymbols": {
						"ISmartAccount": [
							599
						]
					},
					"id": 600,
					"license": "SEE LICENSE IN LICENSE",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 407,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "51:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISmartAccount",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 599,
							"linearizedBaseContracts": [
								599
							],
							"name": "ISmartAccount",
							"nameLocation": "87:13:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "352:24:6",
										"text": "@notice user's name."
									},
									"functionSelector": "06fdde03",
									"id": 413,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "390:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "394:2:6"
									},
									"returnParameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "420:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 410,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "420:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "419:15:6"
									},
									"scope": 599,
									"src": "381:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "441:261:6",
										"text": "@notice checks whether `account` is authorized to modify user's smart account.\n @dev It should always match the current admins in SAFactory. So, avoid passing in constants, but always make a call to IFactory.admins().\n @param account to verify"
									},
									"functionSelector": "63a846f8",
									"id": 421,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "admin",
									"nameLocation": "716:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "730:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 421,
												"src": "722:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "722:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "721:17:6"
									},
									"returnParameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 419,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 421,
												"src": "762:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 418,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "762:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "761:6:6"
									},
									"scope": 599,
									"src": "707:61:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "774:70:6",
										"text": "@notice user's current credit (>0) or debt (<0) at any given time."
									},
									"functionSelector": "a06d083c",
									"id": 427,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "credit",
									"nameLocation": "858:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:2:6"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "890:3:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 424,
													"name": "int",
													"nodeType": "ElementaryTypeName",
													"src": "890:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:5:6"
									},
									"scope": 599,
									"src": "849:46:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "901:116:6",
										"text": "@notice user's max credit calculated from user's allocation. Consequentially, it is also the maxDebt for a user."
									},
									"functionSelector": "cfdad40a",
									"id": 433,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxCredit",
									"nameLocation": "1031:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1040:2:6"
									},
									"returnParameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "1066:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1066:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1065:9:6"
									},
									"scope": 599,
									"src": "1022:53:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "1081:203:6",
										"text": "@notice it increases each time the user `payback()`. It diminishes when user doesn't inccurs debt multiple times. It can be used futurely for giving a usr specific rewards according to his/her score."
									},
									"functionSelector": "efedc669",
									"id": 439,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "score",
									"nameLocation": "1298:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1303:2:6"
									},
									"returnParameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 439,
												"src": "1329:3:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 436,
													"name": "int",
													"nodeType": "ElementaryTypeName",
													"src": "1329:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1328:5:6"
									},
									"scope": 599,
									"src": "1289:45:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 440,
										"nodeType": "StructuredDocumentation",
										"src": "1596:142:6",
										"text": "@notice gets a token from its address and check whether it's a erc20 (0), erc721(1) or erc1155(2).\n @param _token address of token."
									},
									"functionSelector": "c2bb8120",
									"id": 447,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenToStandard",
									"nameLocation": "1752:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "1776:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "1768:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1767:16:6"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "1807:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1807:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1806:6:6"
									},
									"scope": 599,
									"src": "1743:70:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "2648:589:6",
										"text": "@notice storage variable that is either true or false. Use default values already registered in this Factory contract for the `create` function. If false, params should be given. If true, params can be of any value and they will be discarded.\n @dev I thought of having all users use the same value, but as it is done in the TradFi industry, users are categorized into certain thresholds - there's the Itau, but there's also the Itau Personalité, for example. So, a customization should be made possible. So, functions sould be also be accessible to be modified by admins in SA."
									},
									"functionSelector": "c550a1ca",
									"id": 453,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "useDefault",
									"nameLocation": "3251:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 449,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3261:2:6"
									},
									"returnParameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 453,
												"src": "3287:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 450,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3287:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3286:6:6"
									},
									"scope": 599,
									"src": "3242:51:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 454,
										"nodeType": "StructuredDocumentation",
										"src": "3710:139:6",
										"text": "@notice it permits a user to give his credits to another user, but the debt will be calculated against this SA, not the SA of the `to`."
									},
									"functionSelector": "5d1a7355",
									"id": 463,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocateDelegate",
									"nameLocation": "3863:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "tokenIndex",
												"nameLocation": "3897:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3889:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3889:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3925:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3917:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3917:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3949:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 463,
												"src": "3941:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3879:78:6"
									},
									"returnParameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3966:0:6"
									},
									"scope": 599,
									"src": "3854:113:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 464,
										"nodeType": "StructuredDocumentation",
										"src": "3973:1761:6",
										"text": "Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit. Function uses the safeTransferFrom with permit functionality to pull tokens. This function can only be callable by the company. Why? Because precification needs to bae handled off-chain. If user calls this function directly, he can send any amount of a depretiated token and his credit can be updated, making it so that he'll have paid less than his bills. So, front-end determines precification, and the user can deposit it. Yes, he can deposit at anytime, however, he can't call it directly. To support  payments before the due data, anytime the user allocates, his credit is updated. To support direct payments, make an `if` statement that if it's not the company the `sender`, user will pay in a stablecoin - probably tether which is centralized and seems to maintain price at $1 always. Then do the math to convert to real - check whether there's a REAL-like stable coin on chain - and then do the math to roundup user payment onchain. Check whether the function implementation is protected against the company making the factory a user as well.\n @param tokenIndex token to allocate\n @param amount amount of token to allocate\n @param deadline deadline for token to be allocated.\n @param includesNonce does the token include a nonce (e.g. DAI) Check whether a nonce can be 0 - since it probably can't, use it as a param to identify that there's no nonce.\n @param nonce tx's nonce for token allocation, if any.\n @param v sig param\n @param r sig param\n @param s sig param"
									},
									"functionSelector": "ffc08b6d",
									"id": 483,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allocateWithPermit",
									"nameLocation": "5748:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "tokenIndex",
												"nameLocation": "5784:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5776:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5812:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5804:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5804:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "5836:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5828:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 469,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5828:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "includesNonce",
												"nameLocation": "5859:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5854:18:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 471,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5854:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "5963:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5955:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5955:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5984:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5978:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 475,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5978:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6003:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "5995:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 477,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5995:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6022:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 483,
												"src": "6014:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 479,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6014:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5766:263:6"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6038:0:6"
									},
									"scope": 599,
									"src": "5739:300:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 484,
										"nodeType": "StructuredDocumentation",
										"src": "6045:755:6",
										"text": "@notice Main function called by the company (or goblockchain?) to pull user funds to this contract and give him credit. `nonReentrant` function, but allowed to be called in different times for the same user to give him compound credit.\n @param tokenIndexes tokens the user want to allocate to receive credit. Must be in inside the permitted tokens addresses chosen by the company.\n @param amounts amounts of each token to be deposited.\n @param deadlines deadlines for the transfers to happen.\n @param includesNonce whether tokens use includes nonces\n @param nonces nonces for tokens. Choose an arbitrary number those who haven't nonces\n @param v sig param\n @param r sig param\n @param s sig param"
									},
									"functionSelector": "40affa94",
									"id": 511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "batchAllocateWithPermit",
									"nameLocation": "6814:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "tokenIndexes",
												"nameLocation": "6866:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "6847:31:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 485,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6847:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 486,
													"nodeType": "ArrayTypeName",
													"src": "6847:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 490,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "6907:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "6888:26:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 488,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6888:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 489,
													"nodeType": "ArrayTypeName",
													"src": "6888:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "deadlines",
												"nameLocation": "6943:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "6924:28:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 491,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "6924:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 492,
													"nodeType": "ArrayTypeName",
													"src": "6924:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "includesNonce",
												"nameLocation": "6978:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "6962:29:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 494,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "6962:4:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 495,
													"nodeType": "ArrayTypeName",
													"src": "6962:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "nonces",
												"nameLocation": "7093:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "7074:25:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 497,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "7074:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 498,
													"nodeType": "ArrayTypeName",
													"src": "7074:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "7126:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "7109:18:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint8_$dyn_calldata_ptr",
													"typeString": "uint8[]"
												},
												"typeName": {
													"baseType": {
														"id": 500,
														"name": "uint8",
														"nodeType": "ElementaryTypeName",
														"src": "7109:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"id": 501,
													"nodeType": "ArrayTypeName",
													"src": "7109:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint8_$dyn_storage_ptr",
														"typeString": "uint8[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "7156:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "7137:20:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 503,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7137:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 504,
													"nodeType": "ArrayTypeName",
													"src": "7137:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 508,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7186:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "7167:20:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 506,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7167:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 507,
													"nodeType": "ArrayTypeName",
													"src": "7167:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6837:356:6"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7202:0:6"
									},
									"scope": 599,
									"src": "6805:398:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "7209:372:6",
										"text": "@notice only to be called by company's wallets addresses. It's called when company updates the states of the user according to their usage of the credit card off-chain. It can be called in batches to avoid block-max-gas-limit revert error in the chain being used.\n @param amount debt or credit of user in a given time. It is used to update the `credit` mapping."
									},
									"functionSelector": "6299a6ef",
									"id": 519,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "update",
									"nameLocation": "7595:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7606:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7602:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 513,
													"name": "int",
													"nodeType": "ElementaryTypeName",
													"src": "7602:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7601:12:6"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 519,
												"src": "7632:3:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 516,
													"name": "int",
													"nodeType": "ElementaryTypeName",
													"src": "7632:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7631:5:6"
									},
									"scope": 599,
									"src": "7586:51:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 520,
										"nodeType": "StructuredDocumentation",
										"src": "7643:76:6",
										"text": "@notice used by company to cease a user's participation in the protocol."
									},
									"functionSelector": "dd71a430",
									"id": 531,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "cease",
									"nameLocation": "7733:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "7745:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "7739:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 521,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "7739:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "7756:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "7748:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 523,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7748:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 526,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7767:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "7759:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 525,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7759:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7783:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "7770:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 527,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7770:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7738:50:6"
									},
									"returnParameters": {
										"id": 530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7797:0:6"
									},
									"scope": 599,
									"src": "7724:74:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "7804:84:6",
										"text": "@notice pause SA' mains functionalities. Callable only by Factory on deactivate."
									},
									"functionSelector": "8456cb59",
									"id": 535,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pause",
									"nameLocation": "7902:5:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7907:2:6"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7918:0:6"
									},
									"scope": 599,
									"src": "7893:26:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "7925:86:6",
										"text": "@notice unpauses SA's mains functionalities. Callable only by Factory on activate."
									},
									"functionSelector": "3f4ba83a",
									"id": 539,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unpause",
									"nameLocation": "8025:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8032:2:6"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8043:0:6"
									},
									"scope": 599,
									"src": "8016:28:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 540,
										"nodeType": "StructuredDocumentation",
										"src": "8050:623:6",
										"text": "@notice function callable by company to withdraw any tokens directly transferred to this contract by accident or leftovers from solidity's rounding arithmetic. If token to be withdrawn is the zero address, withdraw ether from contract. This function should be able to retrieve any balance from this smart account in case of a smart account upgrade so that funds can be transferred to the new one. Use safeTransfer function from SafeERC20 inside here to handle different tokens.\n @param token token to be withdrawn.\n @param to to whom it should be given to, possibly being the user who sent it by accident."
									},
									"functionSelector": "712b772f",
									"id": 549,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "skim",
									"nameLocation": "8687:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8700:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "8692:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8692:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8715:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "8707:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8707:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8691:27:6"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 549,
												"src": "8737:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 546,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8737:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8736:6:6"
									},
									"scope": 599,
									"src": "8678:65:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "b66c484e",
									"id": 559,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPaymentTokens",
									"nameLocation": "8758:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "paymentTokens",
												"nameLocation": "8792:13:6",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "8784:21:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8784:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "tokenType",
												"nameLocation": "8820:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "8815:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 552,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "8815:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8774:61:6"
									},
									"returnParameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "newPaymentTokens",
												"nameLocation": "8871:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 559,
												"src": "8854:33:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 555,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8854:7:6",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 556,
													"nodeType": "ArrayTypeName",
													"src": "8854:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8853:35:6"
									},
									"scope": 599,
									"src": "8749:140:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "de68a001",
									"id": 567,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPermittedERC20Tokens",
									"nameLocation": "8904:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "tokenAddress",
												"nameLocation": "8945:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "8937:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8937:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8927:36:6"
									},
									"returnParameters": {
										"id": 566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 565,
												"mutability": "mutable",
												"name": "newPermittedERC20Tokens",
												"nameLocation": "8999:23:6",
												"nodeType": "VariableDeclaration",
												"scope": 567,
												"src": "8982:40:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 563,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "8982:7:6",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 564,
													"nodeType": "ArrayTypeName",
													"src": "8982:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8981:42:6"
									},
									"scope": 599,
									"src": "8895:129:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5709d115",
									"id": 575,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPermittedERC721Tokens",
									"nameLocation": "9039:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 569,
												"mutability": "mutable",
												"name": "tokenAddress",
												"nameLocation": "9081:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "9073:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 568,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9073:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9063:36:6"
									},
									"returnParameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "newPermittedERC721Tokens",
												"nameLocation": "9135:24:6",
												"nodeType": "VariableDeclaration",
												"scope": 575,
												"src": "9118:41:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 571,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9118:7:6",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 572,
													"nodeType": "ArrayTypeName",
													"src": "9118:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9117:43:6"
									},
									"scope": 599,
									"src": "9030:131:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "10c030a3",
									"id": 583,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPermittedERC1155Tokens",
									"nameLocation": "9176:25:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "tokenAddress",
												"nameLocation": "9219:12:6",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "9211:20:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9211:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9201:36:6"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "9256:16:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 579,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9256:7:6",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 580,
													"nodeType": "ArrayTypeName",
													"src": "9256:9:6",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9255:18:6"
									},
									"scope": 599,
									"src": "9167:107:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0ab9bb62",
									"id": 590,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setPercentageFromAllocation",
									"nameLocation": "9289:27:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "percentageFromAllocation",
												"nameLocation": "9331:24:6",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "9326:29:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9326:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9316:45:6"
									},
									"returnParameters": {
										"id": 589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "newPercentageFromAllocation",
												"nameLocation": "9385:27:6",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "9380:32:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 587,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "9380:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9379:34:6"
									},
									"scope": 599,
									"src": "9280:134:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "9420:168:6",
										"text": "@notice it should be called within the `constructor` function saying wether it's gonna be true or false. Only callable by admins. Make the factory an admin as well."
									},
									"functionSelector": "9d3c1c7b",
									"id": 598,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setUseDefault",
									"nameLocation": "9602:13:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "useDefault",
												"nameLocation": "9621:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "9616:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 592,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9616:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9615:17:6"
									},
									"returnParameters": {
										"id": 597,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 598,
												"src": "9651:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 595,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9651:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9650:6:6"
									},
									"scope": 599,
									"src": "9593:64:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 600,
							"src": "77:9582:6",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "51:9609:6"
				},
				"id": 6
			}
		}
	}
}